{
    "App": {
        "class": "App",
        "superClass": null,
        "shortdesc": "Represents the Adobe Bridge application.",
        "elementCount": 1,
        "propertyCount": 22,
        "methodCount": 46,
        "properties": [
            {
                "@name": "defaultFilterCriteria",
                "@rwaccess": "readonly",
                "shortdesc": "A collection of the default FilterDescription objects used to populate the Filter palette.",
                "datatype": {
                    "type": "Array"
                }
            },
            {
                "@name": "defaultSortCriteria",
                "@rwaccess": "readonly",
                "shortdesc": "A collection of the default SortCriterion objects used to sort the contents of container nodes.",
                "description": "Default list is: Filename, Document type, Date created, Date file modified, File size, Dimensions, Resolution, Color profile, Label, Rating",
                "datatype": {
                    "type": "Array"
                }
            },
            {
                "@name": "displayDialogs",
                "shortdesc": "The policy for the display of modal dialogs.",
                "description": {
                    "li": [
                        "all (default): Modal dialogs should always be displayed.",
                        "none: Modal dialog should never be displayed.",
                        "error: Only dialogs that report an error to the user should be displayed."
                    ],
                    "@": "One of:"
                },
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "document",
                "shortdesc": "The active (top-most)   Document   object, representing the active browser window.",
                "description": "During an open or create event, this value still contains the previous   Document   object, while the new Document object is passed to the event handler.",
                "datatype": {
                    "type": {
                        "@href": "#\/Document",
                        "@": "Document"
                    }
                }
            },
            {
                "@name": "documents",
                "@rwaccess": "readonly",
                "shortdesc": "A collection of   Document   objects representing the set of all open browser windows.",
                "datatype": {
                    "type": "Array"
                }
            },
            {
                "@name": "eventHandlers",
                "shortdesc": "An array of  event handler objects installed by scripts.",
                "description": {
                    "li": [
                        "When true, the event has been completely handled and Adobe Bridge does not look for more handlers or call the default handler.",
                        "When false (or when the handler returns undefined), Adobe Bridge continues to call registered handlers, or if there are no more, calls the default handler."
                    ],
                    "@": "Add an event-handler object to register it with Adobe Bridge. Registered handler functions are called when any user-interaction event is triggered.Each event handler is specified by a JavaScript object with one property, the handler function name: ={ handler: fnName}= The handler function takes one argument, an Event object, and returns a result object ={handled: boolean}=."
                },
                "datatype": {
                    "type": "Array"
                }
            },
            {
                "@name": "extensions",
                "@rwaccess": "readonly",
                "shortdesc": "A collection of ExtensionHandler objects representing registered node-handling extensions.",
                "description": "Use app.registerExtension() and app.unregisterExtension() to modify the list.",
                "datatype": {
                    "type": "Array"
                }
            },
            {
                "@name": "favorites",
                "@rwaccess": "readonly",
                "shortdesc": "The top-level Favoritesobject for the navigation hierarchy displayed in the Favorites palette.",
                "description": "This object contains two arrays of Thumbnailobjects for the nodes that appear in the \"standard\" and \"user\" sections of the palette.",
                "datatype": {
                    "type": {
                        "@href": "#\/Favorites",
                        "@": "Favorites"
                    }
                }
            },
            {
                "@name": "folderRoots",
                "@rwaccess": "readonly",
                "shortdesc": "The list of Bridge URI strings for the root nodes of the Folders palette.",
                "description": "Extension developers can modify the list with app.addCustomRoot().",
                "datatype": {
                    "type": "Array"
                }
            },
            {
                "@name": "inspectorPanels",
                "@rwaccess": "readonly",
                "shortdesc": "The collection of script-defined InspectorPanel objects that make up the Inspector view for new browser windows.",
                "description": "The list is in display order. Use app.registerInspectorPanel() and app.unregisterInspectorPanel()  to modify the list.",
                "datatype": {
                    "type": "Array"
                }
            },
            {
                "@name": "language",
                "@rwaccess": "readonly",
                "shortdesc": "The display name of the language for the current locale, as configured by the operating system.",
                "description": "This is the language name as it appears in the Preferences dialog.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "lastSender",
                "shortdesc": "The application specifier for the application that has most recently sent an interapplication message to Adobe Bridge.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "locale",
                "@rwaccess": "readonly",
                "shortdesc": "The Adobe locale code for the current locale, as configured by the operating system.",
                "description": "An Adobe locale code consists of a 2-letter ISO-639 language code and an optional 2-letter ISO 3166 country code separated by an underscore. Case is significant. For example, en_US, en_UK, ja_JP, de_DE, fr_FR.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "name",
                "@rwaccess": "readonly",
                "shortdesc": "The application specifier for this application, \"bridge\".",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "pendingJobs",
                "@rwaccess": "readonly",
                "shortdesc": "The number of background tasks that Adobe Bridge has left to process.",
                "description": "Background tasks are started for asynchronous operations, such as metadata extraction from thumbnails, or exporting the cache with app.buildFolderCache(). When all tasks have been started, this value is 0. A value of 0 does not mean that all started tasks have been completed.",
                "datatype": {
                    "type": "Number"
                }
            },
            {
                "@name": "preferences",
                "@rwaccess": "readonly",
                "shortdesc": "The Preferences object, which provides access to the user preferences shown in the Preferences dialog.",
                "datatype": {
                    "type": {
                        "@href": "#\/Preferences",
                        "@": "Preferences"
                    }
                }
            },
            {
                "@name": "standardFavorites",
                "@rwaccess": "readonly",
                "datatype": {
                    "type": "Array"
                }
            },
            {
                "@name": "synchronousMode",
                "shortdesc": "When true, Adobe Bridge attempts to ensure that all Thumbnail properties are valid before returning their values.",
                "description": "This is particularly important when accessing metadata. Scripts (other than node handlers) typically need to set synchronous mode to true. Default is false, for performance reasons.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "userFavorites",
                "@rwaccess": "readonly",
                "datatype": {
                    "type": "Array"
                }
            },
            {
                "@name": "version",
                "@rwaccess": "readonly",
                "shortdesc": "The version number of the Adobe Bridge application.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "watchDirInterval",
                "shortdesc": "The duration in seconds between checks for folder consistency (checking whether files have been added or removed).",
                "datatype": {
                    "type": "Number"
                }
            },
            {
                "@name": "workspaces",
                "@rwaccess": "readonly",
                "shortdesc": "The list of all available workspaces, both default and user- or script-defined.",
                "description": "Each workspace is a JavaScript object with two properties,  id  and  name , specifying the unique identifier and the localized display name; see Document.workspace.",
                "datatype": {
                    "type": "Array"
                }
            }
        ],
        "methods": [
            {
                "@name": "acquirePhysicalFiles",
                "shortdesc": "For each specified file or folder, if it refers to a resource that does not have a local copy (such as the files referenced by VersionCue nodes), downloads the resource.",
                "description": "For efficiency, make one call for all files to be processed, rather than calling repeatedly.",
                "parameters": {
                    "parameter": {
                        "@name": "files",
                        "shortdesc": "An array of strings, each of which is a file or folder specification",
                        "datatype": {
                            "type": "Array"
                        }
                    }
                }
            },
            {
                "@name": "addCollectionMember",
                "shortdesc": "Adds a member thumbnail, or set of member thumbnails, to a collection.",
                "description": "Returns true on success.",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "collection",
                            "shortdesc": "The Thumbnail object for the collection node, as returned by app.createCollection().",
                            "datatype": {
                                "type": {
                                    "@href": "#\/Thumbnail",
                                    "@": "Thumbnail"
                                }
                            }
                        },
                        {
                            "@name": "member",
                            "shortdesc": "A Thumbnail object or Array of Thumbnail objects to be added to the collection.",
                            "datatype": {
                                "type": "any"
                            }
                        }
                    ]
                },
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "addCredits",
                "shortdesc": "Appends a line of text to the Credits section of the Adobe Bridge About box.",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "title",
                            "shortdesc": "The unique identifying string for this addition.",
                            "datatype": {
                                "type": "String"
                            }
                        },
                        {
                            "@name": "content",
                            "shortdesc": "The localizable string to be displayed.",
                            "datatype": {
                                "type": "String"
                            }
                        }
                    ]
                },
                "datatype": {
                    "type": "any"
                }
            },
            {
                "@name": "addCustomRoot",
                "shortdesc": "Appends a custom URI to the list of root nodes in app.folderRoots, which appear in the Folders palette.",
                "description": "Used by script-defined node handlers. Returns true on success.",
                "parameters": {
                    "parameter": {
                        "@name": "uri",
                        "shortdesc": "The Bridge URI string.",
                        "datatype": {
                            "type": "String"
                        }
                    }
                },
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "addLegalNotice",
                "shortdesc": "Appends a line of text to the Legal Notice section of the Adobe Bridge About box.",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "title",
                            "shortdesc": "The unique identifying string for this addition.",
                            "datatype": {
                                "type": "String"
                            }
                        },
                        {
                            "@name": "content",
                            "shortdesc": "The localizable string to be displayed.",
                            "datatype": {
                                "type": "String"
                            }
                        }
                    ]
                },
                "datatype": {
                    "type": "any"
                }
            },
            {
                "@name": "beep",
                "shortdesc": "Calls on the operating system to emit a short audio tone."
            },
            {
                "@name": "bringToFront",
                "shortdesc": "Gives Adobe Bridge the application focus for the operating system, and makes the current browser window the topmost active window in the windowing system."
            },
            {
                "@name": "browseTo",
                "shortdesc": "Deprecated in Creative Suite 3. Do not use.",
                "datatype": {
                    "type": "Any"
                }
            },
            {
                "@name": "buildFolderCache",
                "shortdesc": "Forces Adobe Bridge to create thumbnail images for the specified folder.",
                "description": "The images are stored in a cache file in the folder to which they apply.",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "path",
                            "shortdesc": "The folder.",
                            "description": "A Folder object, Thumbnail object for a folder, or Bridge URI path string. If this specifies a file, the cache is built for the containing folder.",
                            "datatype": [
                                {
                                    "type": "Object"
                                },
                                {
                                    "type": "String"
                                }
                            ]
                        },
                        {
                            "@name": "recurse",
                            "@optional": "true",
                            "shortdesc": "Optional in Adobe Bridge 1.0, not used in Adobe Bridge 2.0.",
                            "description": "Cache building is always recursive; pass true.",
                            "datatype": {
                                "type": "Boolean"
                            }
                        },
                        {
                            "@name": "quality",
                            "@optional": "true",
                            "shortdesc": "Whether to create low or high quality thumbnail images.",
                            "description": "One of the strings quick (the default) or highQuality.",
                            "datatype": {
                                "type": "String"
                            }
                        },
                        {
                            "@name": "buildFullSize",
                            "@optional": "true",
                            "shortdesc": "Whether to export fullsize images to cache folder.",
                            "description": "This determines Bridge's caching behavior in the same way as the \"Generate 100% Previews\" drop down menu item on the toolbar. The value set to this property is also reflected by the checking status of the toolbar menu item.",
                            "datatype": {
                                "type": "Boolean"
                            }
                        }
                    ]
                },
                "datatype": {
                    "type": "Any"
                }
            },
            {
                "@name": "cancelTask",
                "shortdesc": "Cancels a task that has been scheduled using app.scheduleTask().",
                "parameters": {
                    "parameter": {
                        "@name": "taskId",
                        "shortdesc": "The task ID number, as returned from app.scheduleTask().",
                        "datatype": {
                            "type": "Number"
                        }
                    }
                },
                "datatype": {
                    "type": "Any"
                }
            },
            {
                "@name": "createCollection",
                "shortdesc": "Creates a new, named collection node.",
                "description": "Returns the Thumbnail object for the new node. Use this to access the collection programmatically.",
                "parameters": {
                    "parameter": {
                        "@name": "name",
                        "shortdesc": "The name of the new collection.",
                        "description": "If a collection with this name already exists, a unique name is generated using this string.",
                        "datatype": {
                            "type": "String"
                        }
                    }
                },
                "datatype": {
                    "type": {
                        "@href": "#\/Thumbnail",
                        "@": "Thumbnail"
                    }
                }
            },
            {
                "@name": "createSmartCollection",
                "shortdesc": "Creates a new, named smart collection node.",
                "description": "Returns the Thumbnail object for the new node. Use this to access the collection programmatically.",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "name",
                            "shortdesc": "The name of the new smart collection.",
                            "description": "If a collection with this name already exists, a unique name is generated using this string.",
                            "datatype": {
                                "type": "String"
                            }
                        },
                        {
                            "@name": "scope",
                            "shortdesc": "A Thumbnail object for the target container node.",
                            "datatype": {
                                "type": {
                                    "@href": "#\/Thumbnail",
                                    "@": "Thumbnail"
                                }
                            }
                        },
                        {
                            "@name": "searchSpec",
                            "shortdesc": "A SearchSpecification object used to generate the search result.",
                            "datatype": {
                                "type": {
                                    "@href": "#\/SearchSpecification",
                                    "@": "SearchSpecification"
                                }
                            }
                        }
                    ]
                },
                "datatype": {
                    "type": {
                        "@href": "#\/Thumbnail",
                        "@": "Thumbnail"
                    }
                }
            },
            {
                "@name": "deleteCollection",
                "shortdesc": "Deletes a collection node.",
                "description": "Returns true on success.",
                "parameters": {
                    "parameter": {
                        "@name": "collection",
                        "shortdesc": "The Thumbnail object for the collection node, as returned by app.createCollection().",
                        "datatype": {
                            "type": {
                                "@href": "#\/Thumbnail",
                                "@": "Thumbnail"
                            }
                        }
                    }
                },
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "deleteSmartCollection",
                "shortdesc": "Deletes a smart collection node.",
                "description": "Returns true on success.",
                "parameters": {
                    "parameter": {
                        "@name": "collection",
                        "shortdesc": "The Thumbnail object for the collection node, as returned by app.createSmartCollection().",
                        "datatype": {
                            "type": {
                                "@href": "#\/Thumbnail",
                                "@": "Thumbnail"
                            }
                        }
                    }
                },
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "enqueueOperation",
                "shortdesc": "Enqueues a long-running node-handling operation for execution at an appropriate time.",
                "description": "Note that, for a ProgressOperator, Adobe Bridge does not display or update the UI until the node handler calls app.operationChanged().",
                "parameters": {
                    "parameter": {
                        "@name": "operator",
                        "shortdesc": "The ModalOperator or ProgressOperator instance that encapsulates the operation, returned by an ExtensionModel method.",
                        "datatype": {
                            "type": "Object"
                        }
                    }
                }
            },
            {
                "@name": "exportKeywordsFromFile",
                "shortdesc": "Exports keywords from the Keywords palette to a file.",
                "description": "This is the same as choosing Export from the flyout menu in the Keywords palette.",
                "parameters": {
                    "parameter": {
                        "@name": "keywordsFile",
                        "shortdesc": "The file, specified as a string or ExtendScript File object.",
                        "datatype": [
                            {
                                "type": "String"
                            },
                            {
                                "type": "File"
                            }
                        ]
                    }
                }
            },
            {
                "@name": "getCollectionMembers",
                "shortdesc": "Retrieves the collection members for a collection node.",
                "description": "Returns an Array of TThumbnail objects for the collection members.",
                "parameters": {
                    "parameter": {
                        "@name": "collection",
                        "shortdesc": "The Thumbnail object for the collection node, as returned by app.createCollection().",
                        "datatype": {
                            "type": {
                                "@href": "#\/Thumbnail",
                                "@": "Thumbnail"
                            }
                        }
                    }
                },
                "datatype": {
                    "type": "Array"
                }
            },
            {
                "@name": "getCollections",
                "shortdesc": "Retrieves all collection nodes, as created with app.createCollection().",
                "description": "Returns an Array of Thumbnail objects for the collection nodes.",
                "datatype": {
                    "type": "Array"
                }
            },
            {
                "@name": "getSmartCollections",
                "shortdesc": "Retrieves all smart collection nodes, as created with app.createSmartCollection().",
                "description": "Returns an Array of Thumbnail objects for the collection nodes.",
                "datatype": {
                    "type": "Array"
                }
            },
            {
                "@name": "hide",
                "shortdesc": "Hides or minimizes all Adobe Bridge browser windows.",
                "description": {
                    "li": [
                        "In Mac OS, performs the platform-specific hide gesture.",
                        "In Windows, does the equivalent of app.document.minimize()."
                    ]
                }
            },
            {
                "@name": "importKeywordsFromFile",
                "shortdesc": "Imports keywords from a file to the Keywords palette.",
                "description": "This is the same as choosing Import from the flyout menu in the Keywords palette.",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "keywordsFile",
                            "shortdesc": "The file, specified as a string or ExtendScript File object.",
                            "datatype": [
                                {
                                    "type": "String"
                                },
                                {
                                    "type": "File"
                                }
                            ]
                        },
                        {
                            "@name": "importType",
                            "@optional": "true",
                            "shortdesc": "Whether to replace existing keywords in the palette, or merge these keywords with any existing keywords in the palette.",
                            "description": "One of \"clearExistingKeywords\" or \"mergeWithExistingKeywords\" (the default).",
                            "datatype": {
                                "type": "String"
                            }
                        }
                    ]
                }
            },
            {
                "@name": "isCollectionMember",
                "shortdesc": "Reports whether a given thumbnail is a member of a given collection.",
                "description": "Returns true if the thumbnail is a member.",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "collection",
                            "shortdesc": "The Thumbnail object for the collection node, as returned by app.createCollection().",
                            "datatype": {
                                "type": {
                                    "@href": "#\/Thumbnail",
                                    "@": "Thumbnail"
                                }
                            }
                        },
                        {
                            "@name": "member",
                            "shortdesc": "The Thumbnail object for the node to be tested.",
                            "datatype": {
                                "type": {
                                    "@href": "#\/Thumbnail",
                                    "@": "Thumbnail"
                                }
                            }
                        }
                    ]
                },
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "isProcessingJob",
                "shortdesc": "Reports whether Adobe Bridge is processing any jobs. Returns false if all the jobs are finished.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "openUrl",
                "shortdesc": "Opens a page in the platform's default web browser.",
                "parameters": {
                    "parameter": {
                        "@name": "url",
                        "shortdesc": "The URL for the page to open.",
                        "datatype": {
                            "type": "String"
                        }
                    }
                }
            },
            {
                "@name": "operationChanged",
                "shortdesc": "Notifies Adobe Bridge of an update to the processing status or progress of a long-running background operation implemented by a ProgressOperator object.",
                "description": "Adobe Bridge queries the object to find the current status and updates the UI as appropriate. It does not display or update the UI until this call is made.",
                "parameters": {
                    "parameter": {
                        "@name": "operator",
                        "shortdesc": "The ProgressOperator object that encapsulates the operation.",
                        "description": "This object is returned by an ExtensionHandler or ExtensionModel method.",
                        "datatype": {
                            "type": {
                                "@href": "#\/ProgressOperator",
                                "@": "ProgressOperator"
                            }
                        }
                    }
                }
            },
            {
                "@name": "preflightFiles",
                "shortdesc": "DEPRECATED in Creative Suite 3. Use app.acquirePhysicalFiles() instead.",
                "parameters": {
                    "parameter": {
                        "@name": "files"
                    }
                },
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "purgeAllCaches",
                "shortdesc": "Purges the thumbnail caches for all folders.",
                "description": "See also  app.buildFolderCache()  and app.purgeFolderCache()."
            },
            {
                "@name": "purgeFolderCache",
                "shortdesc": "Purges the thumbnail cache for a folder.",
                "description": "See also  app.buildFolderCache()  and app.purgeFolderCache().",
                "parameters": {
                    "parameter": {
                        "@name": "path",
                        "@optional": "true",
                        "shortdesc": "The folder to purge.",
                        "description": "A Folder object, Thumbnail object for a folder, or Bridge URI path string. If this specifies a file, the cache is purged for the containing folder. If not supplied, purges all folder caches.",
                        "datatype": [
                            {
                                "type": "Object"
                            },
                            {
                                "type": "String"
                            }
                        ]
                    }
                },
                "datatype": {
                    "type": "Any"
                }
            },
            {
                "@name": "quit",
                "shortdesc": "Shuts down the Adobe Bridge application and closes all browser windows."
            },
            {
                "@name": "registerBrowseScheme",
                "shortdesc": "DEPRECATED in Creative Suite 3. Do not use.",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "protocol",
                            "datatype": {
                                "type": "String"
                            }
                        },
                        {
                            "@name": "handler",
                            "datatype": {
                                "type": "Object"
                            }
                        }
                    ]
                },
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "registerExtension",
                "shortdesc": "Adds a script-defined node-handling extension to the application's list of available handlers, app.extensions.",
                "description": "Returns true on success, false if there is an existing extension with the same name.",
                "parameters": {
                    "parameter": {
                        "@name": "extension",
                        "shortdesc": "The ExtensionHandler object.",
                        "datatype": {
                            "type": {
                                "@href": "#\/ExtensionHandler",
                                "@": "ExtensionHandler"
                            }
                        }
                    }
                },
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "registerInfoset",
                "shortdesc": "Declares a new node-data information set, associating it with a node-handling extension.",
                "description": "Sets can be associated with multiple handlers. All handlers must support the core sets. Registering a set makes the defined properties available to node display code. Returns true on success.",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "extension",
                            "shortdesc": "The ExtensionHandler object.",
                            "datatype": {
                                "type": {
                                    "@href": "#\/ExtensionHandler",
                                    "@": "ExtensionHandler"
                                }
                            }
                        },
                        {
                            "@name": "infoset",
                            "shortdesc": "The Infoset object.",
                            "datatype": {
                                "type": {
                                    "@href": "#\/Infoset",
                                    "@": "Infoset"
                                }
                            }
                        }
                    ]
                },
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "registerInspectorPanel",
                "shortdesc": "Registers a script-defined Inspector panel, adding it to app.inspectorPanels.",
                "description": "This panel appears in the Inspector palette unless the selected thumbnail explicitly disallows it.",
                "parameters": {
                    "parameter": {
                        "@name": "panel",
                        "shortdesc": "The InspectorPanel object.",
                        "datatype": {
                            "type": {
                                "@href": "#\/InspectorPanel",
                                "@": "InspectorPanel"
                            }
                        }
                    }
                },
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "registerPrefix",
                "shortdesc": "Associates a URI prefix string with a node-handling extension.",
                "description": "The prefix identifies a node type managed by the handler. Handlers can register multiple prefixes.",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "prefix",
                            "shortdesc": "The prefix string , which must contain only ASCII characters.",
                            "datatype": {
                                "type": "String"
                            }
                        },
                        {
                            "@name": "extension",
                            "shortdesc": "The ExtensionHandler object.",
                            "datatype": {
                                "type": {
                                    "@href": "#\/ExtensionHandler",
                                    "@": "ExtensionHandler"
                                }
                            }
                        }
                    ]
                },
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "removeCollectionMember",
                "shortdesc": "Removes one or more member thumbnails from a collection.",
                "description": "Returns true on success.",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "collection",
                            "shortdesc": "The Thumbnail object for the collection node, as returned by app.createCollection().",
                            "datatype": {
                                "type": {
                                    "@href": "#\/Thumbnail",
                                    "@": "Thumbnail"
                                }
                            }
                        },
                        {
                            "@name": "member",
                            "shortdesc": "The Thumbnail object for the node to be removed, or an Array of Thumbnail objects.",
                            "datatype": {
                                "type": "any"
                            }
                        }
                    ]
                },
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "removeCredits",
                "shortdesc": "Removes a text item from the Credits area of the Adobe Bridge About box.",
                "description": "The text must have been previously added with addCredits().",
                "parameters": {
                    "parameter": {
                        "@name": "title",
                        "shortdesc": "The unique identifying string for the item to remove."
                    }
                },
                "datatype": {
                    "type": "any"
                }
            },
            {
                "@name": "removeLegalNotice",
                "shortdesc": "Removes a text item from the LegalNotice area of the Adobe Bridge About box.",
                "description": "The text must have been previously added with addLegalNotice().",
                "parameters": {
                    "parameter": {
                        "@name": "title",
                        "shortdesc": "The unique identifying string for the item to remove."
                    }
                },
                "datatype": {
                    "type": "any"
                }
            },
            {
                "@name": "renameCollection",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "arg1",
                            "datatype": {
                                "type": "Thumbnail"
                            }
                        },
                        {
                            "@name": "name",
                            "datatype": {
                                "type": "String"
                            }
                        }
                    ]
                },
                "datatype": {
                    "type": "Thumbnail"
                }
            },
            {
                "@name": "renameSmartCollection",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "arg1",
                            "datatype": {
                                "type": "Thumbnail"
                            }
                        },
                        {
                            "@name": "name",
                            "datatype": {
                                "type": "String"
                            }
                        }
                    ]
                },
                "datatype": {
                    "type": "Thumbnail"
                }
            },
            {
                "@name": "runSlideshow",
                "shortdesc": "Loads a set of files or thumbnails as a slideshow, using the Preference options currently set for Adobe Bridge.",
                "parameters": {
                    "parameter": {
                        "@name": "sources",
                        "shortdesc": "An array of Thumbnail objects or file path strings.",
                        "datatype": {
                            "type": "Array"
                        }
                    }
                }
            },
            {
                "@name": "scheduleTask",
                "shortdesc": "Executes a script after a specified delay.",
                "description": "The script can be executed repeatedly, stopping when it returns undefined, or when you cancel the task using app.cancelTask().\nReturns the task ID number, which can be used to cancel the scheduled task.",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "script",
                            "shortdesc": "A string containing the script to be run.",
                            "description": "If this script needs to load another script, do not use the JavaScript eval() function; instead use the $.evalFile() function.",
                            "datatype": {
                                "type": "String"
                            }
                        },
                        {
                            "@name": "delay",
                            "shortdesc": "A number of milliseconds to wait before executing the script.",
                            "description": "If 0, waits the default number of milliseconds, which is 10.",
                            "datatype": {
                                "type": "Number"
                            }
                        },
                        {
                            "@name": "repeat",
                            "@optional": "true",
                            "shortdesc": "When true, execute the script repeatedly after each elapsed delay.",
                            "description": "Stops when a script execution returns undefined, or when this task is cancelled by calling app.cancelTask(). Default is false, which means execute the script only once.",
                            "datatype": {
                                "type": "Boolean"
                            }
                        }
                    ]
                },
                "datatype": {
                    "type": "Number"
                }
            },
            {
                "@name": "system",
                "shortdesc": "Issues the argument to the operating system, as if it were entered on the command line in a shell.",
                "description": "Control does not return to Adobe Bridge until this function returns.",
                "parameters": {
                    "parameter": {
                        "@name": "commandLine",
                        "shortdesc": "The command to pass to the operating system.",
                        "datatype": {
                            "type": "String"
                        }
                    }
                },
                "datatype": {
                    "type": "Any"
                }
            },
            {
                "@name": "unregisterExtension",
                "shortdesc": "Removes a node-handling extension, previously registered with app.registerExtension(), from the application\u2019s global list.",
                "parameters": {
                    "parameter": {
                        "@name": "extension",
                        "shortdesc": "The ExtensionHandler object.",
                        "datatype": {
                            "type": {
                                "@href": "#\/ExtensionHandler",
                                "@": "ExtensionHandler"
                            }
                        }
                    }
                }
            },
            {
                "@name": "unregisterInspectorPanel",
                "shortdesc": "Removes a script-defined Inspector panel from the global list in app.inspectorPanels().",
                "parameters": {
                    "parameter": {
                        "@name": "panel",
                        "shortdesc": "The InspectorPanel object.",
                        "datatype": {
                            "type": {
                                "@href": "#\/InspectorPanel",
                                "@": "InspectorPanel"
                            }
                        }
                    }
                },
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "unregisterInfoset",
                "shortdesc": "Removes the association between an extension and an information set, previously established with app.registerInfoset().",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "extension",
                            "shortdesc": "The ExtensionHandler object.",
                            "datatype": {
                                "type": {
                                    "@href": "#\/ExtensionHandler",
                                    "@": "ExtensionHandler"
                                }
                            }
                        },
                        {
                            "@name": "infoset",
                            "shortdesc": "The Infoset object.",
                            "datatype": {
                                "type": {
                                    "@href": "#\/Infoset",
                                    "@": "Infoset"
                                }
                            }
                        }
                    ]
                },
                "datatype": {
                    "type": "Any"
                }
            },
            {
                "@name": "unregisterPrefix",
                "shortdesc": "Removes a node URI prefix from the list of prefixes that the associated node-handling extension manages.",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "prefix",
                            "shortdesc": "The prefix string.",
                            "datatype": {
                                "type": "String"
                            }
                        },
                        {
                            "@name": "extension",
                            "shortdesc": "The ExtensionHandler object.",
                            "datatype": {
                                "type": {
                                    "@href": "#\/ExtensionHandler",
                                    "@": "ExtensionHandler"
                                }
                            }
                        }
                    ]
                },
                "datatype": {
                    "type": "Boolean"
                }
            }
        ]
    },
    "BitmapData": {
        "class": "BitmapData",
        "superClass": null,
        "shortdesc": "Represents an image as a matrix of pixell.",
        "elementCount": 1,
        "propertyCount": 9,
        "methodCount": 11,
        "properties": [
            {
                "@name": "height",
                "@rwaccess": "readonly",
                "shortdesc": "Image height in pixels.",
                "datatype": {
                    "type": "Number"
                }
            },
            {
                "@name": "pointer",
                "@rwaccess": "readonly",
                "shortdesc": "A pointer to the buffer storing the matrix of pixels.",
                "datatype": {
                    "type": "Number"
                }
            },
            {
                "@name": "rectangle",
                "@rwaccess": "readonly",
                "shortdesc": "The rectangle that defines the size of the bitmap image, in the format [0, 0, w, h]. Origin is top left.",
                "datatype": {
                    "type": "Array"
                }
            },
            {
                "@name": "rowBytes",
                "@rwaccess": "readonly",
                "shortdesc": "The length in bytes of a row of pixels.",
                "description": {
                    "br": [
                        "",
                        ""
                    ],
                    "@": "This provides the offset from a given pixel to the pixel immediately below it, allowing for padding at the end of each line. Because a pixel is typically represented by 4 bytes, the value is usually around 4 times bigger than the width in pixels. Typically, rows are padded to multiples of 4, sometimes 16. For example, if a bitmap is 3 pixels wide, width is 3, and rowBytes could be 12 or 16."
                },
                "datatype": {
                    "type": "Number"
                }
            },
            {
                "@name": "transparent",
                "@rwaccess": "readonly",
                "shortdesc": "True if the bitmap image supports per-pixel transparency.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "width",
                "@rwaccess": "readonly",
                "shortdesc": "Image width in pixels.",
                "datatype": {
                    "type": "Number"
                }
            },
            {
                "@name": "channelCount",
                "@rwaccess": "readonly",
                "datatype": {
                    "type": "Number"
                }
            },
            {
                "@name": "colorSpace",
                "@rwaccess": "readonly",
                "datatype": {
                    "type": "Number"
                }
            },
            {
                "@name": "checksum",
                "@rwaccess": "readonly",
                "shortdesc": "A 32-bit Adler checksum of the image data.",
                "description": "Use to compare two object to see if they represent the same image.",
                "datatype": {
                    "type": "Number"
                }
            }
        ],
        "methods": [
            {
                "@name": "clone",
                "shortdesc": "Duplicates this object, creating a new object with an exact copy of the contained bitmap.",
                "description": "Returns the new BitmapData object.",
                "datatype": {
                    "type": {
                        "@href": "#\/BitmapData",
                        "@": "BitmapData"
                    }
                }
            },
            {
                "@name": "dispose",
                "shortdesc": "Explicitly frees the memory used to store pixel data for this object.",
                "description": "If not called, the JavaScript garbage collector eventually frees the memory when there are no references remaining."
            },
            {
                "@name": "exportTo",
                "shortdesc": "Writes the image data to a file in JPEG format.",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "dest",
                            "shortdesc": "A  File object or a string containing the platform-specific path and filename for the target file.",
                            "description": "Creates the file if it does not exist, or overwrites an existing file. It is recommended that the file name have an extension of \".jpg\".",
                            "datatype": {
                                "type": "File"
                            }
                        },
                        {
                            "@name": "jpegQuality",
                            "@optional": "true",
                            "shortdesc": "The quality of the image.",
                            "description": "A number in the range [0..100] where 100 is the highest quality image and largest file size, and lower values indicate more compression, lossier image, and smaller file size. Default is 60 (equivalent to Photoshop quality 7).",
                            "datatype": {
                                "type": "Number",
                                "value": "60"
                            }
                        }
                    ]
                }
            },
            {
                "@name": "getPixel",
                "shortdesc": "Retrieves the color data for a specific pixel from the image.",
                "description": {
                    "br": [
                        "",
                        ""
                    ],
                    "@": "If the transparent property for this object is true, the returned color number is pre-multiplied.Returns an integer that represents the ARGB pixel value. This can be used to create a Color object."
                },
                "parameters": {
                    "parameter": [
                        {
                            "@name": "x",
                            "shortdesc": "The horizontal coordinate of the pixel, relative to the bitmap's origin, the top left.",
                            "datatype": {
                                "type": "Number"
                            }
                        },
                        {
                            "@name": "y",
                            "shortdesc": "The vertical coordinate of the pixel, relative to the bitmap's origin, the top left.",
                            "datatype": {
                                "type": "Number"
                            }
                        }
                    ]
                },
                "datatype": {
                    "type": "Number"
                }
            },
            {
                "@name": "getPixel32",
                "shortdesc": "Retrieves the color data for a specific pixel from the image, including its alpha channel.",
                "description": "Returns an integer that represents the ARGB pixel value. This can be used to create a Color object.",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "x",
                            "shortdesc": "The horizontal coordinate of the pixel, relative to the bitmap's origin, the top left.",
                            "datatype": {
                                "type": "Number"
                            }
                        },
                        {
                            "@name": "y",
                            "shortdesc": "The vertical coordinate of the pixel, relative to the bitmap's origin, the top left.",
                            "datatype": {
                                "type": "Number"
                            }
                        }
                    ]
                },
                "datatype": {
                    "type": "Number"
                }
            },
            {
                "@name": "loadFromJpegStream",
                "shortdesc": "Loads the JPEG stream at a memory address into this object, replacing the previous content.",
                "description": "The object is resized, if necessary.",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "data",
                            "shortdesc": "The address of the data stream.",
                            "description": "A 32-bit value or an array of two elements containing the low word and high word of a 64-bit address.",
                            "datatype": {
                                "type": "Number"
                            }
                        },
                        {
                            "@name": "dataSize",
                            "shortdesc": "The length of the data buffer in bytes.",
                            "datatype": {
                                "type": "Number"
                            }
                        }
                    ]
                }
            },
            {
                "@name": "loadFromPngStream",
                "shortdesc": "Loads the PNG stream at a memory address into this object, replacing the previous content.",
                "description": "The object is resized, if necessary.",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "data",
                            "shortdesc": "The address of the data stream.",
                            "description": "A 32-bit value or an array of two elements containing the low word and high word of a 64-bit address.",
                            "datatype": {
                                "type": "Number"
                            }
                        },
                        {
                            "@name": "dataSize",
                            "shortdesc": "The length of the data buffer in bytes.",
                            "datatype": {
                                "type": "Number"
                            }
                        }
                    ]
                }
            },
            {
                "@name": "resize",
                "shortdesc": "Resizes the bitmap to the specified dimensions.",
                "description": {
                    "br": [
                        "",
                        ""
                    ],
                    "@": "The target dimensions must be smaller than the largest of the current bitmap dimensions.Returns a new BitmapData object whose sides are no greater than the specified dimensions, or undefined if the object already satisfies this condition."
                },
                "parameters": {
                    "parameter": [
                        {
                            "@name": "dimensions",
                            "shortdesc": "The desired edge size, in pixels, of the resized image.",
                            "description": "The resized image is obtained by scaling down the source image to fit into a square with sides that are this number of pixels.",
                            "datatype": {
                                "type": "Number"
                            }
                        },
                        {
                            "@name": "quality",
                            "@optional": "true",
                            "shortdesc": "The algorithm to use in scaling, which trades off image quality and execution time.",
                            "description": "One of \"bilinear\" (the default), a lower quality image but faster scaling; or \"bicubic\", a higher quality image but slower scaling; or \"bicubicSharper\", slowest but best quality.",
                            "datatype": {
                                "type": "String"
                            }
                        }
                    ]
                },
                "datatype": {
                    "type": {
                        "@href": "#\/BitmapData",
                        "@": "BitmapData"
                    }
                }
            },
            {
                "@name": "rotate",
                "shortdesc": "Rotates the bitmap by the specified multiple of 90 degrees.",
                "description": "Returns a new BitmapData object containing the rotated image.",
                "parameters": {
                    "parameter": {
                        "@name": "angle",
                        "shortdesc": "The rotation angle in degrees.",
                        "description": "Positive values rotate clockwise, negative values rotate counterclockwise. Allowed values are -90, 0, 90, 180, 270.",
                        "datatype": {
                            "type": "Number"
                        }
                    }
                },
                "datatype": {
                    "type": {
                        "@href": "#\/BitmapData",
                        "@": "BitmapData"
                    }
                }
            },
            {
                "@name": "setPixel",
                "shortdesc": "Sets the color data for a specific pixel from the image.",
                "description": "The alpha channel is set to 255 (fully opaque).",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "x",
                            "shortdesc": "The horizontal coordinate of the pixel, relative to the bitmap's origin, the top left.",
                            "datatype": {
                                "type": "Number"
                            }
                        },
                        {
                            "@name": "y",
                            "shortdesc": "The vertical coordinate of the pixel, relative to the bitmap's origin, the top left.",
                            "datatype": {
                                "type": "Number"
                            }
                        },
                        {
                            "@name": "color",
                            "shortdesc": "The color.",
                            "description": "A Color object, or an integer that represents the RGB pixel value, or a predefined color name string.",
                            "datatype": {
                                "type": "Object"
                            }
                        }
                    ]
                }
            },
            {
                "@name": "setPixel32",
                "shortdesc": "Sets the color data for a specific pixel from the image, including its alpha channel.",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "x",
                            "shortdesc": "The horizontal coordinate of the pixel, relative to the bitmap's origin, the top left.",
                            "datatype": {
                                "type": "Number"
                            }
                        },
                        {
                            "@name": "y",
                            "shortdesc": "The vertical coordinate of the pixel, relative to the bitmap's origin, the top left.",
                            "datatype": {
                                "type": "Number"
                            }
                        },
                        {
                            "@name": "color",
                            "shortdesc": "The color.",
                            "description": "A Color object, or an integer that represents the RGB pixel value, or a predefined color name string.",
                            "datatype": {
                                "type": "Object"
                            }
                        }
                    ]
                }
            }
        ]
    },
    "CacheElement": {
        "class": "CacheElement",
        "superClass": null,
        "shortdesc": "Encapsulates all node-handling data and the node handler for a Thumbnail object.",
        "elementCount": 1,
        "propertyCount": 14,
        "methodCount": 1,
        "properties": [
            {
                "@name": "path",
                "@rwaccess": "readonly",
                "shortdesc": "The path of the asset associated with this object.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "immediate",
                "shortdesc": "Core data set.",
                "description": "Contains mandatory node information, supplied at node creation.",
                "datatype": {
                    "type": "Infoset"
                }
            },
            {
                "@name": "item",
                "shortdesc": "Core data set.",
                "description": "Node information that can be determined without opening and inspecting the contents of the referenced file.",
                "datatype": {
                    "type": "Infoset"
                }
            },
            {
                "@name": "itemContent",
                "shortdesc": "Core data set.",
                "description": "Node information that must be determined by opening the referenced file.",
                "datatype": {
                    "type": "Infoset"
                }
            },
            {
                "@name": "icon",
                "shortdesc": "Core data set.",
                "description": "Member \"bitmap\" contains a  BitmapData object representing the pixels for the node\u2019s icon.",
                "datatype": {
                    "type": "Infoset"
                }
            },
            {
                "@name": "badges",
                "shortdesc": "Core data set.",
                "description": "Member \"badges\" contains an array of Badge objects representing the node\u2019s status icons. A node in the Content pane can have up to four badge icons.",
                "datatype": {
                    "type": "Infoset"
                }
            },
            {
                "@name": "children",
                "shortdesc": "Core data set.",
                "description": "Member \"children\" contains an Array of Thumbnail objects representing the child nodes of a container node. Container nodes must update their child node lists.",
                "datatype": {
                    "type": "Infoset"
                }
            },
            {
                "@name": "thumbnail",
                "shortdesc": "Core data set.",
                "description": {
                    "br": "",
                    "@": "Member \"thumbnail\" contains a  BitmapData object representing the pixels for the file's thumbnail image. Member \"hasHighQualityThumbnail\" is true if the file contains a high-quality thumbnail image."
                },
                "datatype": {
                    "type": "Infoset"
                }
            },
            {
                "@name": "preview",
                "shortdesc": "Core data set.",
                "description": {
                    "br": "",
                    "@": "Member \"preview\" contains a  BitmapData object representing the pixels for the file's preview thumbnail image. Member \"hasHighQualityThumbnail\" is true if the file contains a high-quality preview image."
                },
                "datatype": {
                    "type": "Infoset"
                }
            },
            {
                "@name": "fullsize",
                "shortdesc": "Core data set.",
                "description": "Member \"fullsize\" contains a  BitmapData object representing the pixels for the file's full-size preview thumbnail image.",
                "datatype": {
                    "type": "Infoset"
                }
            },
            {
                "@name": "metadata",
                "shortdesc": "Core data set.",
                "description": "Member \"metadata\" contains the metadata blob for the file, if applicable",
                "datatype": {
                    "type": "Infoset"
                }
            },
            {
                "@name": "linkTarget",
                "shortdesc": "Core data set.",
                "description": "Member \"linkTarget\" contains a string, the full path to the target, if this node is a link.",
                "datatype": {
                    "type": "Infoset"
                }
            },
            {
                "@name": "cameraRaw",
                "shortdesc": "Core data set.",
                "description": "Member \"rawSupportType\" identifies the extent to which this file can be handled by the Camera Raw plug-in. One of: 0 (the file is of a type that is not handled by the plug-in), 1 (the file is in a camera-raw format), 2 (the file is in JPEG or TIFF format)",
                "datatype": {
                    "type": "Infoset"
                }
            },
            {
                "@name": "quickMetadata",
                "shortdesc": "Core data set.",
                "description": "This is the authoritative source of displayed values, although the same properties are also kept in various other places.",
                "datatype": {
                    "type": "Infoset"
                }
            }
        ],
        "methods": [
            {
                "@name": "doAuthentication",
                "shortdesc": "Calls the authenticate() method defined in the ExtensionHandler object associated with this element."
            }
        ]
    },
    "CacheData": {
        "class": "CacheData",
        "superClass": null,
        "shortdesc": "Tracks the current cache status of node data in an Infoset object.",
        "elementCount": 1,
        "propertyCount": 2,
        "methodCount": 0,
        "properties": [
            {
                "@name": "cookie",
                "shortdesc": "Opaque storage to aid extensions in discovering the cache status.",
                "description": "The string contains data in an extension-defined format.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "status",
                "shortdesc": "The cache status for a member of the associated information set, or of the set itself.",
                "description": {
                    "li": [
                        "good Known valid data.",
                        "bad Was good at one point, but not now.",
                        "unknown",
                        "inProgress The status after a refresh has been requested but before the data is confirmed as good.",
                        "invalid The status is invalid if the ExtensionModel Object no longer exists."
                    ],
                    "@": "One of:"
                },
                "datatype": {
                    "type": "String"
                }
            }
        ],
        "methods": []
    },
    "Color": {
        "class": "Color",
        "superClass": null,
        "shortdesc": "Represents a pixel in the sRGB color space, with an optional alpha channel for opacity.",
        "elementCount": 1,
        "propertyCount": 5,
        "methodCount": 1,
        "properties": [
            {
                "@name": "alpha",
                "shortdesc": "Degree of opacity when the color is composited.",
                "description": "An integer in the range [0..255]. If not specified, default is 255, fully opaque.",
                "datatype": {
                    "type": "Number"
                }
            },
            {
                "@name": "blue",
                "shortdesc": "Blue component value.",
                "description": "An integer in the range [0..255].",
                "datatype": {
                    "type": "Number"
                }
            },
            {
                "@name": "green",
                "shortdesc": "Green component value.",
                "description": "An integer in the range [0..255].",
                "datatype": {
                    "type": "Number"
                }
            },
            {
                "@name": "number",
                "shortdesc": "The color expressed as a 32-bit ARGB value.",
                "datatype": {
                    "type": "Number"
                }
            },
            {
                "@name": "red",
                "shortdesc": "Red component value.",
                "description": "An integer in the range [0..255].",
                "datatype": {
                    "type": "Number"
                }
            }
        ],
        "methods": [
            {
                "@name": "toString",
                "shortdesc": "Retrieves the hexadecimal value of this color, including the alpha channel.",
                "description": "Returns a text string, such as \"#FF00FF00\" for fully-opaque green.",
                "datatype": {
                    "type": "String"
                }
            }
        ]
    },
    "Document": {
        "class": "Document",
        "superClass": null,
        "shortdesc": "Represents an Adobe Bridge browser window.",
        "elementCount": 1,
        "propertyCount": 38,
        "methodCount": 22,
        "properties": [
            {
                "@name": "additionalMetadata",
                "shortdesc": "Identifies up to four lines of additional metadata to display for thumbnails in the Content pane.",
                "description": {
                    "br": [
                        "",
                        "",
                        "",
                        ""
                    ],
                    "@": "Overrides the values set in the Additional Thumbnail Metatdata drop-down lists and checkboxes in the General page of the Preferences dialog, and any value set in Preferences.extraMetadata, but does not change the preference values.The first value in the array sets the first line of additional metadata, the second value sets the second line, and so on. An array value of undefined turns off the display of metadata for that line. Allowed values are: author, bit-depth, color-mode, color-profile, copyright, date-created, date-modified, description, dimensions, document-creator, document-kind, exposure, file-size, focal-length, keywords, label, opening-application"
                },
                "datatype": {
                    "type": "Array"
                }
            },
            {
                "@name": "allowDrags",
                "shortdesc": "Whether to allow drag-and-drop of thumbnails in this browser window.",
                "description": "When true (the default), drag-and-drop of thumbnails is allowed in this browser window. When false, thumbnails cannot be dragged within or from this browser window.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "bottomNavbar",
                "shortdesc": "DEPRECATED. Use navbars.filesystem.bottom."
            },
            {
                "@name": "browserMode",
                "shortdesc": "The browser window mode, corresponding to the UI button on the upper right, \"Switch to compact mode\".",
                "description": "Value can be full or compact. Ultra-compact mode has no scripting equivalent.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "content",
                "@rwaccess": "readonly",
                "shortdesc": "DEPRECATED. Do not use."
            },
            {
                "@name": "contentPaneMode",
                "shortdesc": "DEPRECATED. Do not use.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "context",
                "@rwaccess": "readonly",
                "shortdesc": "The Thumbnail object a user has right-clicked to invoke a context menu; otherwise undefined.",
                "datatype": {
                    "type": {
                        "@href": "#\/Thumbnail",
                        "@": "Thumbnail"
                    }
                }
            },
            {
                "@name": "displayInspectorView",
                "shortdesc": "Whether to display Inspector panels.",
                "description": "When true, this browser window displays the Inspector palette, showing the panels listed in  app.inspectorPanels. When false, the Inspector is not shown.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "groupedSelections",
                "@rwaccess": "readonly",
                "shortdesc": "Current selected thumbnails in the Content pane.",
                "description": "A list of selections in the current Content page, where each member is an array containing a single selected Thumbnail object, or an array of Thumbnail objects that make up a selected stack.",
                "datatype": {
                    "type": "Array"
                }
            },
            {
                "@name": "height",
                "shortdesc": "The height of the browser window in pixels.",
                "description": "Legal values are positive integers. The window is resized only within the limits of the minimum and maximum size allowed by the screen resolution.",
                "datatype": {
                    "type": "Number"
                }
            },
            {
                "@name": "hwnd",
                "@rwaccess": "readonly",
                "shortdesc": "In Windows only, a platform-specific handle to the window for this browser.",
                "datatype": {
                    "type": "Number"
                }
            },
            {
                "@name": "id",
                "@rwaccess": "readonly",
                "shortdesc": "A unique identifier for the browser window, valid for the life of the window.",
                "description": "It is possible for more than one Document object to reference the same window.",
                "datatype": {
                    "type": "Number"
                }
            },
            {
                "@name": "jsFuncs",
                "shortdesc": "DEPRECATED. Do not use."
            },
            {
                "@name": "maximized",
                "@rwaccess": "readonly",
                "shortdesc": "When true, this browser window is in the zoomed or maximized state.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "minimized",
                "@rwaccess": "readonly",
                "shortdesc": "When true, this browser window is in the collapsed or minimized state.",
                "description": "In Mac OS, a window can be in the zoomed state, and still be minimized. If both Document.maximized and Document.minimized are true, call restore() to un-zoom the window.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "navbars",
                "@rwaccess": "readonly",
                "shortdesc": "Contains the predefined NavBar objects for the configurable navigation bars.",
                "description": {
                    "li": "To access the navigation bars that can be shown when the Content pane displays files and folders, use navbars.filesystem.top and navbars.filesystem.bottom.",
                    "br": [
                        "",
                        ""
                    ],
                    "@": "Both of the two bars can be configured to display ScriptUI controls, and are hidden by default."
                },
                "datatype": {
                    "type": "Object"
                }
            },
            {
                "@name": "noItems",
                "shortdesc": "Text to be displayed in the Content pane when the selected thumbnail is for an empty folder.",
                "description": "The default is \"No Items to Display\".",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "owner",
                "shortdesc": "The Adobe Bridge-enabled application that created or first activated this browser window, if it was not Adobe Bridge.",
                "description": "An application specifier, such as \"photoshop\".",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "palettes",
                "@rwaccess": "readonly",
                "shortdesc": "A collection of TabbedPalette objects for all default and script-defined display palettes available to this browser, regardless of their visibility status.",
                "datatype": {
                    "type": "Array"
                }
            },
            {
                "@name": "position",
                "shortdesc": "The position of this browser window on the screen.",
                "description": "An object with two properties, x and y, whose value is the point of the screen coordinates, the screen coordinates are relative to the upper-left corner of the main display.",
                "datatype": {
                    "type": "Object"
                }
            },
            {
                "@name": "presentationMode",
                "@rwaccess": "readonly",
                "shortdesc": "The presentation mode of the Content pane.",
                "description": "The value is always \"browser\" in Bridge, in correspondence with that setPresentationMode() and presentationPath supports the \"browser\" mode only.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "presentationPath",
                "shortdesc": "The path to the content displayed in the Content pane.",
                "description": "A Bridge URI, which is a valid filesystem path that Adobe Bridge can interpret. This property no longer supports URL. To display HTML page, use TabbedPalette.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "selections",
                "@rwaccess": "readonly",
                "shortdesc": "The Thumbnail objects for all currently selected files in the Content pane of this document.",
                "description": {
                    "br": [
                        "",
                        "",
                        "",
                        ""
                    ],
                    "@": "Change the selections using the  select(), selectAll(), deselect() and deselectAll() methods. A script should wait until the loaded event has occurred before making calls to document selection methods. \n\t\t\tUse getSelection() to limit the request to visible thumbnails, or those for files of a given type. Use groupedSelections to include thumbnails that are in selected stacks.NOTE: Accessing this value is a time-intensive operation. To improve performance, access it outside loops. Also, use selectionLength when possible, rather than checking the length of this array."
                },
                "datatype": {
                    "type": "Array"
                }
            },
            {
                "@name": "selectionLength",
                "@rwaccess": "readonly",
                "shortdesc": "The number of currently selected thumbnails in the Content pane.",
                "datatype": {
                    "type": "Number"
                }
            },
            {
                "@name": "selectionsLength",
                "@rwaccess": "readonly",
                "shortdesc": "The number of currently selected thumbnails in the Content pane.",
                "datatype": {
                    "type": "Number"
                }
            },
            {
                "@name": "sorts",
                "shortdesc": "How the thumbnails in the Content pane are sorted.",
                "description": {
                    "li": [
                        "The type value is one of these strings: \"string\", \"date\", \"number\", \"dimensions\", \"resolution\", \"colorProfile\", \"user\".",
                        "The name value is one of these strings: \"user\", \"name\", \"date-created\", \"date-modified\", \"label\", \"rating\", \"file-size\", \"document-kind\", \"keywords\", dimensions\", \"resolution\", \"color-profile\".",
                        "The reverse value is true if the thumbnails are sorted in reverse order in the given category."
                    ],
                    "@": "An array containing one JavaScript object, { type:String, name:String, reverse:Boolean }."
                },
                "datatype": {
                    "type": "Array"
                }
            },
            {
                "@name": "showThumbnailName",
                "shortdesc": "When true, thumbnail names are displayed in the Content pane.",
                "description": "This overrides the ShowName preference value.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "stacks",
                "shortdesc": "A list of all current thumbnail stacks in this browser.",
                "description": {
                    "li": [
                        "thumbnails: An array of Thumbnail objects.",
                        "properties: Read\/write. An array that user can add and retrieve customized properties for the stack. Those properties can be stored into the cache file by calling flushStackProperties().",
                        "isValid: Function. If the stack already exists and valid, the function returns true, otherwise returns false."
                    ],
                    "@": "Each stack is an object with these properties and functions:"
                },
                "datatype": {
                    "type": "Array"
                }
            },
            {
                "@name": "status",
                "shortdesc": "The text displayed in the document's status line at the bottom of the Content pane.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "thumbnail",
                "shortdesc": "The Thumbnail object for the node currently selected in the Folders or Favorites pane.",
                "description": {
                    "br": [
                        "",
                        ""
                    ],
                    "@": "Setting this value navigates to and selects the corresponding node in the Folders pane. The contents of this node are displayed in the Content pane according to its displayMode. The Thumbnail.children array is not populated until the loaded event has occurred for the document."
                },
                "datatype": {
                    "type": {
                        "@href": "#\/Thumbnail",
                        "@": "Thumbnail"
                    }
                }
            },
            {
                "@name": "thumbnailViewMode",
                "shortdesc": "The view mode of the Content pane, as selected by the View menu.",
                "description": "One of: thumbnails, details, list",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "topNavbar",
                "shortdesc": "DEPRECATED. Use navbars.filesystem.top."
            },
            {
                "@name": "visible",
                "shortdesc": "When true, the browser window is expanded, as opposed to being minimized or collapsed.",
                "description": "Setting visible to false collapses the window.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "visibleThumbnails",
                "@rwaccess": "readonly",
                "shortdesc": "An array of Thumbnail objects that are currently shown in the Content pane.",
                "description": {
                    "br": [
                        "",
                        ""
                    ],
                    "@": "The array is ordered according to the current sort order, and contains only thumbnails whose visible property is true.\n\t\t\t\tAccessing this value is a time-intensive operation. To improve performance, access it outside loops. Also, use visibleThumbnailsLength when possible, rather than checking the length of this array."
                },
                "datatype": {
                    "type": "Array"
                }
            },
            {
                "@name": "visibleThumbnailsLength",
                "@rwaccess": "readonly",
                "shortdesc": "The number of thumbnails in the visibleThumbnails array.",
                "datatype": {
                    "type": "Number"
                }
            },
            {
                "@name": "visitUrl",
                "shortdesc": "DEPRECATED. Do not use."
            },
            {
                "@name": "width",
                "shortdesc": "The width of the browser window in pixels.",
                "description": "Legal values are positive integers. The window is resized only within the limits of the minimum and maximum size allowed by the screen resolution.",
                "datatype": {
                    "type": "Number"
                }
            },
            {
                "@name": "workspace",
                "@rwaccess": "readonly",
                "shortdesc": "Retrieves the most recently set workspace.",
                "description": {
                    "br": [
                        "",
                        ""
                    ],
                    "@": "A workspace value is  a JavaScript object with two properties, id and name, whose string values are the unique identifier and display name of the workspace. A user-defined workspace may have been renamed by the user since being set by a script.  Set with Document.setWorkspace(). The current workspace can also be set by user action. Value is undefined for a new document before any workspace has been explicitly set."
                },
                "datatype": {
                    "type": "Object"
                }
            }
        ],
        "methods": [
            {
                "@name": "bringToFront",
                "shortdesc": "Makes this browser window the topmost active window in the windowing system."
            },
            {
                "@name": "center",
                "shortdesc": "Centers this browser window on the screen.",
                "description": "If there is more than one monitor, centers the window on the monitor where most of the window resides."
            },
            {
                "@name": "chooseMenuItem",
                "shortdesc": "Executes an Adobe Bridge-defined or script-defined menu command programatically.",
                "description": "This is the equivalent to the user selecting the command interactively.",
                "parameters": {
                    "parameter": {
                        "@name": "menuID",
                        "shortdesc": "The unique identifier for the command to execute.",
                        "description": "Predefined identifiers for Adobe Bridge menu commands are listed in the Adobe Bridge JavaScript Reference.  If the ID is for a submenu, the function does nothing.",
                        "datatype": {
                            "type": "String"
                        }
                    }
                }
            },
            {
                "@name": "close",
                "shortdesc": "Closes this browser window."
            },
            {
                "@name": "deselect",
                "shortdesc": "Deselects a node in the Content pane.",
                "description": {
                    "br": [
                        "",
                        ""
                    ],
                    "@": "If the specified Thumbnail is a child of this document and is selected, removes it from the selections  array and deselects it in the browser window. Returns true if the thumbnail was deselected. \n\t\t\t\tA script should wait until the loaded event has occurred before making calls to document selection methods."
                },
                "parameters": {
                    "parameter": {
                        "@name": "thumbnail",
                        "shortdesc": "The Thumbnail for the node.",
                        "datatype": {
                            "type": {
                                "@href": "#\/Thumbnail",
                                "@": "Thumbnail"
                            }
                        }
                    }
                },
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "deselectAll",
                "shortdesc": "Deselects all selected nodes in the Content pane.",
                "description": {
                    "br": [
                        "",
                        ""
                    ],
                    "@": "Removes all members from the selections array and deselects all thumbnails in the browser window. A script should wait until the loaded event has occurred before making calls to document selection methods."
                }
            },
            {
                "@name": "execJS",
                "shortdesc": "DEPRECATED. Do not use."
            },
            {
                "@name": "flushStackProperties",
                "shortdesc": "Stores stack properties into the cache file."
            },
            {
                "@name": "getSelection",
                "shortdesc": "Collects selected thumbnails for files of a given type, if any are selected.",
                "description": {
                    "br": [
                        "",
                        ""
                    ],
                    "@": "If no matching thumbnails are selected, collects matching thumbnails that are currently visible in the Content pane.Returns an Array of Thumbnail object."
                },
                "parameters": {
                    "parameter": {
                        "@name": "filter",
                        "@optional": "true",
                        "shortdesc": "A comma-delimited list of file extensions to match.",
                        "description": "Can contain the wildcard character \"*\" to match all file extensions. \"*\" is the default.",
                        "datatype": {
                            "type": "String"
                        }
                    }
                },
                "datatype": {
                    "type": "Array"
                }
            },
            {
                "@name": "maximize",
                "shortdesc": "Maximizes or zooms this browser window."
            },
            {
                "@name": "minimize",
                "shortdesc": "Minimizes or docks this browser window."
            },
            {
                "@name": "normalize",
                "shortdesc": "Centers this browser window on the screen, and sets the height and width to 80% of the screen height and width."
            },
            {
                "@name": "preflightFiles",
                "shortdesc": "DEPRECATED in Creative Suite 3. Use app.acquirePhysicalFiles() instead."
            },
            {
                "@name": "print",
                "shortdesc": "DEPRECATED. Do not use."
            },
            {
                "@name": "refresh",
                "shortdesc": "Refreshes the display of this browser window."
            },
            {
                "@name": "resetToDefaultWorkspace",
                "shortdesc": "Restores the default configuration of the tabbed palettes in this browser window.",
                "description": {
                    "br": [
                        "",
                        ""
                    ],
                    "@": "This is the equivalent of choosing Reset from the Window:Workspace menu.NOTE:This works only when browserMode is full. If browser mode is compact, it does nothing."
                }
            },
            {
                "@name": "restore",
                "shortdesc": "Restores this browser window after it has been minimized.",
                "description": {
                    "li": [
                        "In Windows, makes the window user-sizeable.",
                        "In Mac OS, returns the window to the user-configured size."
                    ]
                }
            },
            {
                "@name": "reveal",
                "shortdesc": "Causes the Content pane (not the Folders or Favorites pane) to show the specified thumbnail.",
                "description": "Scrolls  the display if necessary to make the node visible. Does not select the thumbnail.",
                "parameters": {
                    "parameter": {
                        "@name": "thumbnail",
                        "shortdesc": "The Thumbnail object.",
                        "datatype": {
                            "type": {
                                "@href": "#\/Thumbnail",
                                "@": "Thumbnail"
                            }
                        }
                    }
                }
            },
            {
                "@name": "select",
                "shortdesc": "Selects a thumbnail in the Content pane.",
                "description": {
                    "br": [
                        "",
                        ""
                    ],
                    "@": "If the specified thumbnail is a child of this document and is not selected, adds it to the selections array and selects it in the Content pane. This is the same as selecting the icon in the Content pane with Control-click. Returns true if the thumbnail was selected. A script should wait until the loaded event has occurred before making calls to document selection methods."
                },
                "parameters": {
                    "parameter": {
                        "@name": "thumbnail",
                        "shortdesc": "The Thumbnail object."
                    }
                },
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "selectAll",
                "shortdesc": "Selects all children of the currenly selected thumbnail in the Content pane.",
                "description": {
                    "br": [
                        "",
                        ""
                    ],
                    "@": "Adds all child Thumbnail objects of the current thumbnail (in the thumbnail property) to the selections array, and selects them in the Content pane. This is the same as typing Control-a in the Content pane. A script should wait until the loaded event has occurred before making calls to document selection methods."
                }
            },
            {
                "@name": "setPresentationMode",
                "shortdesc": "Sets the presentation mode of the Content pane, and optionally the path to the current content to display.",
                "description": {
                    "br": [
                        "",
                        ""
                    ],
                    "@": "The mode determines how the presentationPath value is interpreted.CAUTION: In Bridge CC only the \"browser\" mode is supported. Set the presentation mode to other mode will cause the presentationPath property not working properly. To display HTML page, use TabbedPalette."
                },
                "parameters": {
                    "parameter": [
                        {
                            "@name": "mode",
                            "shortdesc": "The new display mode.",
                            "description": "Must be \"browser\" in Bridge, otherwise the presentationPath property will not work properly.",
                            "datatype": {
                                "type": "String"
                            }
                        },
                        {
                            "@name": "path",
                            "@optional": "true",
                            "shortdesc": "The path string, a Bridge URI.",
                            "datatype": {
                                "type": "String"
                            }
                        }
                    ]
                }
            },
            {
                "@name": "setWorkspace",
                "shortdesc": "Sets the browser configuration to a predefined, user-defined or script-defined workspace.",
                "description": {
                    "br": [
                        "",
                        "",
                        "",
                        ""
                    ],
                    "@": "The current workspace can also be set by user action. A user-defined workspace may have been renamed by the user since being set by a script. If an invalid ID is assigned, the workspace is not changed. If a script-defined tabbed palette is visible when the user or a script creates a workspace, the workspace references that palette by its unique identifier. If a workspace references a script-defined tabbed palette, the palette must be created before the workspace is applied. Otherwise, the palette does not appear.NOTE:This works only when browserMode is full. If browser mode is compact, it does nothing."
                },
                "parameters": {
                    "parameter": {
                        "@name": "workspaceId",
                        "shortdesc": "The unique, identifying name string for the new workspace.",
                        "description": "If it is the same as the name of the current workspace, the function does nothing. Identifiers of predefined workspaces are: default, lightTable, navigator, metadata, horizontalFilmstrip, verticalFilmstrip",
                        "datatype": {
                            "type": "String"
                        }
                    }
                },
                "datatype": {
                    "type": "Boolean"
                }
            }
        ]
    },
    "ExtensionHandler": {
        "class": "ExtensionHandler",
        "superClass": null,
        "shortdesc": "Defines the properties and methods needed to extend the Adobe Bridge node model.",
        "elementCount": 1,
        "propertyCount": 15,
        "methodCount": 0,
        "properties": [
            {
                "@name": "infosets",
                "@rwaccess": "readonly",
                "shortdesc": "A collection of Infoset objects defining node data managed by this handler.",
                "description": "The data members of the managed sets are reflected in handler-defined Thumbnail object properties. Modify the list with app.registerInfoset() and app.unregisterInfoset().",
                "datatype": {
                    "type": "Array"
                }
            },
            {
                "@name": "methods",
                "shortdesc": "New methods that are defined on Thumbnail objects that are managed by this handler.",
                "description": {
                    "font": [
                        {
                            "@face": "typewriter",
                            "@": "ext.methods.fnName = function(arg1, arg2){body}"
                        },
                        {
                            "@face": "typewriter",
                            "@": "Thumbnail.fnName()"
                        }
                    ],
                    "@": "Each object property is a function definition; for example: . Each method can be accessed at run time through ."
                },
                "datatype": {
                    "type": "Object"
                }
            },
            {
                "@name": "name",
                "@rwaccess": "readonly",
                "shortdesc": "The unique identifying name of this node-handling extension.",
                "description": "Must be a valid JavaScript identifier (containing no colons or special characters, and beginning with a lowercase letter).",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "prefixes",
                "@rwaccess": "readonly",
                "shortdesc": "A collection of lexical prefix strings for Bridge URIs.",
                "description": "Prefixes identify node types for which this handler supplies a model. Modify the list with app.registerPrefix() and app.unregisterPrefix().",
                "datatype": {
                    "type": "Array"
                }
            },
            {
                "@name": "duplicate",
                "shortdesc": "Implement a function that duplicates a set of nodes that are handled by this handler.",
                "description": "This function creates and returns a ModalOperator or ProgressOperator to perform the long-running operation.",
                "datatype": {
                    "type": "Function"
                }
            },
            {
                "@name": "getBridgeUriForPath",
                "shortdesc": "Implement a function that converts a path string to a canonical Bridge URI.",
                "description": {
                    "br": [
                        "",
                        ""
                    ],
                    "@": "A canonical URI includes the node-type identifying prefix. The function takes one argument, the path string to process. If the path is already in the form of a canonical Bridge URI, the method should simply return it.Return the Bridge URI string for the path, or undefined if the path cannot be parsed."
                },
                "datatype": {
                    "type": "Function"
                }
            },
            {
                "@name": "getBridgeUriForSearch",
                "shortdesc": "Implement a function that executes an extension-defined search among Adobe Bridge nodes of an extension-defined node type.",
                "description": {
                    "br": [
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""
                    ],
                    "@": "The Find dialog calls this method in response to a click on Find, if the dialog has been invoked for a node handled by this extension, or for a container that contains a handled node type.  The function takes two arguments, the target Thumbnail for the search (a ), and the SearchSpecification returned by the Find dialog. Your method can store the parameters such that they can be retrieved by the ExtensionModel.getSearchDetails() method for the returned container node, or that method can recreate the specification and target by some other means. Return the search result, a Bridge URI for a container node that contains the matching nodes."
                },
                "datatype": {
                    "type": "Function"
                }
            },
            {
                "@name": "getSidecars",
                "shortdesc": "Implement a function that retrieves existing sidecar files for a set of nodes.",
                "description": "See Adobe Bridge JavaScript Reference for details.",
                "datatype": {
                    "type": "Function"
                }
            },
            {
                "@name": "makeModel",
                "shortdesc": "Implement a function that creates a model instance that implements node handling.",
                "description": "Adobe Bridge calls this each time it needs to display a handled node.Return the new ExtensionModel object.",
                "datatype": {
                    "type": "Function"
                }
            },
            {
                "@name": "rotate",
                "shortdesc": "Implement a function that sets the rotation setting in metadata for a set of thumbnails to the same value for all. Does not rotate image bits.",
                "description": "This function creates and returns a ModalOperator or ProgressOperator to perform the long-running operation.",
                "datatype": {
                    "type": "Function"
                }
            },
            {
                "@name": "setLabels",
                "shortdesc": "Implement a function that sets the labels for a set of thumbnails.",
                "description": "This function creates and returns a ModalOperator or ProgressOperator to perform the long-running operation.",
                "datatype": {
                    "type": "Function"
                }
            },
            {
                "@name": "setRatings",
                "shortdesc": "Implement a function that sets the ratings for a set of thumbnails.",
                "description": "This function creates and returns a ModalOperator or ProgressOperator to perform the long-running operation.",
                "datatype": {
                    "type": "Function"
                }
            },
            {
                "@name": "setXmp",
                "shortdesc": "Implement a function that embeds XMP file metadata packets in a set of files.",
                "description": "This function creates and returns a ModalOperator or ProgressOperator to perform the long-running operation.",
                "datatype": {
                    "type": "Function"
                }
            },
            {
                "@name": "acquirePhysicalFiles",
                "shortdesc": "Implement a function that  acquires actual file data for a set of placeholder nodes.",
                "description": "This function creates and returns a ModalOperator or ProgressOperator to perform the long-running operation.",
                "datatype": {
                    "type": "Function"
                }
            },
            {
                "@name": "moveToTrash",
                "shortdesc": "Implement a function that deletes a set of nodes, marking the associated files for deletion on disc by moving them to the system trash or recycle bin.",
                "description": "This function creates and returns a ModalOperator or ProgressOperator to perform the long-running operation.",
                "datatype": {
                    "type": "Function"
                }
            }
        ],
        "methods": []
    },
    "ExtensionModel": {
        "class": "ExtensionModel",
        "superClass": null,
        "shortdesc": "Supports the basic framework for Adobe Bridge node-handling extensions by tracking the connection between your display model and the file or page sources.",
        "elementCount": 1,
        "propertyCount": 37,
        "methodCount": 0,
        "properties": [
            {
                "@name": "privateData"
            },
            {
                "@name": "authenticate"
            },
            {
                "@name": "addToDrag"
            },
            {
                "@name": "cancelRefresh"
            },
            {
                "@name": "copyFrom"
            },
            {
                "@name": "createNewContainer"
            },
            {
                "@name": "doLosslessRotate"
            },
            {
                "@name": "eject"
            },
            {
                "@name": "exists"
            },
            {
                "@name": "getCacheStatus"
            },
            {
                "@name": "getDisplayName"
            },
            {
                "@name": "getFilterCriteria"
            },
            {
                "@name": "getParent"
            },
            {
                "@name": "getPhysicalFileName"
            },
            {
                "@name": "getSearchDefinition"
            },
            {
                "@name": "getSearchDetails"
            },
            {
                "@name": "getSortCriteria"
            },
            {
                "@name": "getUserSortOrder"
            },
            {
                "@name": "initialize"
            },
            {
                "@name": "lock"
            },
            {
                "@name": "moveFrom"
            },
            {
                "@name": "needAuthentication"
            },
            {
                "@name": "physicalFileExists"
            },
            {
                "@name": "refreshInfoset"
            },
            {
                "@name": "registerInterest"
            },
            {
                "@name": "registerStructuralInterest"
            },
            {
                "@name": "resolveLink"
            },
            {
                "@name": "setName"
            },
            {
                "@name": "setUserSortOrder"
            },
            {
                "@name": "supportsLosslessRotate"
            },
            {
                "@name": "supportsUserSortOrder"
            },
            {
                "@name": "terminate"
            },
            {
                "@name": "unlock"
            },
            {
                "@name": "unregisterInterest"
            },
            {
                "@name": "unregisterStructuralInterest"
            },
            {
                "@name": "verifyExternalChanges"
            },
            {
                "@name": "wouldAcceptDrop"
            }
        ],
        "methods": []
    },
    "FilterDescription": {
        "class": "FilterDescription",
        "superClass": null,
        "shortdesc": "Provides programmatic control and customization of the Filter Panel, which allows the user to organize and filter the display of thumbnails in the Content pane.",
        "elementCount": 1,
        "propertyCount": 8,
        "methodCount": 0,
        "properties": [
            {
                "@name": "name",
                "shortdesc": "The unique identifying name of the filter.",
                "description": "If there is no displayName, this is shown in the heading line for this filter in the Filter pane.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "displayName",
                "shortdesc": "A localized name for this filter, shown in the heading line for this filter in the Filter pane.",
                "description": "If not supplied, the name value is used.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "xmpNamespace",
                "shortdesc": "The namespace of the XMP property used as a filter.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "xmpProperty",
                "shortdesc": "The key name of the XMP property used as a filter.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "infosetMember",
                "shortdesc": "The name of the node property to use as a filter, as defined in the InfosetMemberDescription object.",
                "description": "The filter property must be either an XMP metadata property or an Infoset object node-data property; if both are defined, the XMP property takes precedence and the node-data property is ignored.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "isExclusive",
                "shortdesc": "When true, only one of the filter values can be set at a time.",
                "description": "When true, selecting one value in the Filter pane automatically deselects other values.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "closedValueList",
                "shortdesc": "The set of allowed values for the XMP property, if it has a closed value list.",
                "description": {
                    "br": [
                        "",
                        ""
                    ],
                    "@": "An array of string values. When a property has a closed value list, the Filter palette does not count nodes that have no value for the property. You can cause it to do so by adding the empty string to this list. Empty for properties with open value types. In this case, the Filter palette displays all values found in nodes in the current scope."
                },
                "datatype": {
                    "type": "Array"
                }
            },
            {
                "@name": "filterType",
                "shortdesc": "The data type of filter-property value, used in sorting the list of values.",
                "description": "String comparisons are case-insensitive. One of: date, dimensions, label, number, orientation, rating, string, stringList",
                "datatype": {
                    "type": "String"
                }
            }
        ],
        "methods": []
    },
    "globals": {
        "class": "globals",
        "superClass": null,
        "shortdesc": "Properties and methods available in the global namespace.",
        "elementCount": 1,
        "propertyCount": 1,
        "methodCount": 3,
        "properties": [
            {
                "@name": "app",
                "shortdesc": "The application object.",
                "datatype": {
                    "type": {
                        "@href": "#\/App",
                        "@": "App"
                    }
                }
            }
        ],
        "methods": [
            {
                "@name": "alert",
                "shortdesc": "Displays a platform-standard dialog containing a short message and an OK button.",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "message",
                            "shortdesc": "TThe string for the displayed message.",
                            "datatype": {
                                "type": "String"
                            }
                        },
                        {
                            "@name": "title",
                            "@optional": "true",
                            "shortdesc": "A string to appear as the title of the dialog, if the platform supports a title.",
                            "description": "Ignored in Mac OS, which does not support titles for alert dialogs. The default title string is \"Script Alert\".",
                            "datatype": {
                                "type": "String"
                            }
                        },
                        {
                            "@name": "errorIcon",
                            "shortdesc": "When true, the platform-standard alert icon is replaced by the platform-standard error icon in the dialog.",
                            "description": "Ignored in Mac OS, which does not support icons for alert dialogs.",
                            "datatype": {
                                "type": "Boolean",
                                "value": "false"
                            }
                        }
                    ]
                }
            },
            {
                "@name": "confirm",
                "shortdesc": "Displays a platform-standard dialog containing a short message and two buttons labeled Yes and No.",
                "description": "Returns true if the user clicked Yes, false if the user clicked No.",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "message",
                            "shortdesc": "The string for the displayed message.",
                            "datatype": {
                                "type": "String"
                            }
                        },
                        {
                            "@name": "noAsDefault",
                            "shortdesc": "When true, the No button is the default choice, selected when the user types Enter.",
                            "description": "Default is false, meaning that Yes is the default choice.",
                            "datatype": {
                                "type": "Boolean",
                                "value": "false"
                            }
                        },
                        {
                            "@name": "title",
                            "@optional": "true",
                            "shortdesc": "A string to appear as the title of the dialog, if the platform supports a title.",
                            "description": "Ignored in Mac OS, which does not support titles for alert dialogs. The default title string is \"Script Alert\".",
                            "datatype": {
                                "type": "String"
                            }
                        }
                    ]
                },
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "prompt",
                "shortdesc": "Displays a modal dialog that returns the user\u2019s text input.",
                "description": "Returns the value of the text edit field if the user clicked OK, null if the user clicked Cancel.",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "prompt",
                            "shortdesc": "The string for the displayed message.",
                            "datatype": {
                                "type": "String"
                            }
                        },
                        {
                            "@name": "default",
                            "@optional": "true",
                            "shortdesc": "The initial value to be displayed in the text edit field.",
                            "datatype": {
                                "type": "String"
                            }
                        },
                        {
                            "@name": "title",
                            "@optional": "true",
                            "shortdesc": "A string to appear as the title of the dialog.",
                            "description": "In Windows, this appears in the window\u2019s frame; in Mac OS it appears above the message. The default title string is \"Script Prompt\".",
                            "datatype": {
                                "type": "String"
                            }
                        }
                    ]
                },
                "datatype": {
                    "type": "String"
                }
            }
        ]
    },
    "Infoset": {
        "class": "Infoset",
        "superClass": null,
        "shortdesc": "Represents Adobe Bridge-defined or script-defined data for Adobe Bridge nodes.",
        "elementCount": 1,
        "propertyCount": 4,
        "methodCount": 2,
        "properties": [
            {
                "@name": "cacheData",
                "shortdesc": "The CacheData object containing cache status for this set.",
                "description": "The status reflects whether any associated values have changed such that the set needs to be refreshed in the CacheElement object that collects all node data for this node.",
                "datatype": {
                    "type": {
                        "@href": "#\/CacheData",
                        "@": "CacheData"
                    }
                }
            },
            {
                "@name": "description",
                "shortdesc": "The descriptions of the members of this set.",
                "description": "A collection of InfosetMemberDescription objects containing the member names and data types of data values contained in this set.",
                "datatype": {
                    "type": "Array"
                }
            },
            {
                "@name": "extension",
                "@rwaccess": "readonly",
                "shortdesc": "The name of the ExtensionHandler object that manages this data.",
                "description": "Available after this set has been registered with app.registerInfoset().",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "infosetName",
                "shortdesc": "The name of this set.",
                "description": "Must be a valid JavaScript identifier. This becomes a property of the ExtensionModel object for the managing extension.",
                "datatype": {
                    "type": "String"
                }
            }
        ],
        "methods": [
            {
                "@name": "addChild",
                "shortdesc": "Adds a child node to the core data set children.",
                "description": "Use this in the model's refreshInfoset() method to add any children of a handled container node.",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "path",
                            "shortdesc": "The Bridge URI (path and file name) of the child node",
                            "datatype": {
                                "type": "String"
                            }
                        },
                        {
                            "@name": "model",
                            "@optional": "true",
                            "shortdesc": "An ExtensionModel  object that manages the new child.",
                            "description": "Can be undefined (the default).",
                            "datatype": {
                                "type": {
                                    "@href": "#\/ExtensionModel",
                                    "@": "ExtensionModel"
                                }
                            }
                        },
                        {
                            "@name": "containerHint",
                            "@optional": "true",
                            "shortdesc": "Whether the new child is a container.",
                            "description": "Either \"container\" or \"notContainer\" (the default). Ignored if model is provided; otherwise, controls which icon is used for the child.",
                            "datatype": {
                                "type": "String"
                            }
                        }
                    ]
                }
            },
            {
                "@name": "initializeMembersToDefaultValues",
                "shortdesc": "Sets all members of this set to the default value for the data type.",
                "description": "Default value are: String: \"\" (empty string), Boolean: false, Number: 0, SizeIn Bytes: 0"
            }
        ]
    },
    "InfosetMemberDescription": {
        "class": "InfosetMemberDescription",
        "superClass": null,
        "shortdesc": "Associates a data type with a single node-data value for Adobe Bridge nodes.",
        "elementCount": 1,
        "propertyCount": 2,
        "methodCount": 0,
        "properties": [
            {
                "@name": "name",
                "shortdesc": "The name of this value, which becomes a property of the parent Infoset object.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "type",
                "shortdesc": "The data type for values accessed through the name property of the parent Infoset object.",
                "description": "One of: Boolean, String, Number, Icon (16x16), BitmapData (a BitmapData object), SizeInBytes, Date, Array (an array of type for any of these types: nested arrays are not allowed).",
                "datatype": {
                    "type": "String"
                }
            }
        ],
        "methods": []
    },
    "ManageCache": {
        "class": "ManageCache",
        "superClass": null,
        "shortdesc": "Manages Bridge cache.",
        "elementCount": 1,
        "propertyCount": 0,
        "methodCount": 4,
        "properties": [],
        "methods": [
            {
                "@name": "buildAndExportSharedCache",
                "shortdesc": "Builds cache for a folder and all subfolders.",
                "description": "Exports cache to the folder(s) itself. Returns true or false according to the operation completion status.",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "path",
                            "shortdesc": "Platform path of the folder for which cache export needs to be done.",
                            "description": "Cache is exported for all subfolders in the specified path.",
                            "datatype": {
                                "type": "String"
                            }
                        },
                        {
                            "@name": "buildFullPreviews",
                            "@optional": "true",
                            "shortdesc": "Specifies whether you want to build and export full-size previews.",
                            "description": "The full-size previews may result in a slower export operation.",
                            "datatype": {
                                "type": "Boolean"
                            }
                        }
                    ]
                },
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "importSharedCache",
                "shortdesc": "Imports the already exported cache.",
                "description": "The cache is imported for the selected folder and all subfolders, which avoids the need to build the new cache. Returns true or false according to the operation completion status.",
                "parameters": {
                    "parameter": {
                        "@name": "path",
                        "shortdesc": "Platform path of the folder for which cache export needs to be done.",
                        "description": "Cache is imported for all the subfolders in this path.",
                        "datatype": {
                            "type": "String"
                        }
                    }
                },
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "purgeAllLocalCache",
                "shortdesc": "Purges all local (thumbnail) cache for all the folders.",
                "description": ""
            },
            {
                "@name": "purgeCacheForLocation",
                "shortdesc": "Purges all cache for input folder.",
                "description": "You can choose to include all subfolders for purging. If the chosen path already has the exported cache, you can choose to delete the cache via this method.",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "path",
                            "shortdesc": "Platform path of the folder for which cache export needs to be done.",
                            "description": "",
                            "datatype": {
                                "type": "String"
                            }
                        },
                        {
                            "@name": "includeSubFolders",
                            "@optional": "true",
                            "shortdesc": "Specifies if the cache is to be purged for all the subfolders on the selected path.",
                            "description": "",
                            "datatype": {
                                "type": "Boolean"
                            }
                        },
                        {
                            "@name": "purgeForAllUsers",
                            "@optional": "true",
                            "shortdesc": "",
                            "description": "Specifies if the exported cache is to be purged for everyone.",
                            "datatype": {
                                "type": "Boolean"
                            }
                        }
                    ]
                }
            }
        ]
    },
    "EditCaptureTime": {
        "class": "EditCaptureTime",
        "superClass": null,
        "shortdesc": "Provides ways to edit the capture time of .jpeg and .raw files.",
        "elementCount": 1,
        "propertyCount": 0,
        "methodCount": 3,
        "properties": [],
        "methods": [
            {
                "@name": "setToCorrectedTime",
                "shortdesc": "Sets the capture time of all files to a specified time.",
                "description": "Returns true or false according to the operation completion status",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "date",
                            "shortdesc": "Date to be set for the selected files.",
                            "description": "Valid values for date are from 1 to 31, depending upon the month and the year.",
                            "datatype": {
                                "type": "Number"
                            }
                        },
                        {
                            "@name": "month",
                            "shortdesc": "Month to be set for the selected files.",
                            "description": "Valid values for month are from 1 to 12.",
                            "datatype": {
                                "type": "Number"
                            }
                        },
                        {
                            "@name": "year",
                            "shortdesc": "Year to be set for the selected files.",
                            "description": "Year should be valid.",
                            "datatype": {
                                "type": "Number"
                            }
                        },
                        {
                            "@name": "hour",
                            "shortdesc": "Hour to be set for the selected files.",
                            "description": "Valid values for hour are from 1 to 24.",
                            "datatype": {
                                "type": "Number"
                            }
                        },
                        {
                            "@name": "minute",
                            "shortdesc": "Minute to be set for the selected files.",
                            "description": "Valid values for minute are from 1 to 60.",
                            "datatype": {
                                "type": "Number"
                            }
                        },
                        {
                            "@name": "second",
                            "shortdesc": "Second to be set for the selected files.",
                            "description": "Valid values for second are from 1 to 60.",
                            "datatype": {
                                "type": "Number"
                            }
                        }
                    ]
                },
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "shiftBySetTime",
                "shortdesc": "Shift capture time by set time.",
                "description": "Shifts the capture time of all the selected files by the set amount of hours, minutes or seconds.",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "sign",
                            "shortdesc": "Signifies whether you want to add or subtract the set time.",
                            "description": "Valid values for sign are + or - .",
                            "datatype": {
                                "type": "String"
                            }
                        },
                        {
                            "@name": "Shiftedhour",
                            "shortdesc": "Shifts the capture time of the selected files by a specified number of hours.",
                            "description": "Valid values for hour are from 1 to 24.",
                            "datatype": {
                                "type": "Number"
                            }
                        },
                        {
                            "@name": "ShiftedMinute",
                            "@optional": "true",
                            "shortdesc": "Shifts the capture time of the selected files by a specified number of minutes.",
                            "description": "Valid values for minute are from 1 to 60.",
                            "datatype": {
                                "type": "Number"
                            }
                        },
                        {
                            "@name": "ShiftedSecond",
                            "@optional": "true",
                            "shortdesc": "Shifts the capture time of the selected files by a specified number of seconds.",
                            "description": "Valid values for second are from 1 to 60.",
                            "datatype": {
                                "type": "Number"
                            }
                        }
                    ]
                },
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "revertToOriginalTime",
                "shortdesc": "Reverts the capture time of all selected files to the original capture time.",
                "description": ""
            }
        ]
    },
    "MenuElement": {
        "class": "MenuElement",
        "superClass": null,
        "shortdesc": "Represents the application menu bar, menus and submenus, and individual items or commands.",
        "elementCount": 2,
        "propertyCount": 14,
        "methodCount": 3,
        "properties": [
            {
                "@name": "id",
                "@rwaccess": "readonly",
                "shortdesc": "A unique identifier for the element.",
                "description": "Identifiers take the form: \/app\/menu\/submenu\/command. They are not localized, and are case sensitive. Predefined identifiers are listed in the Adobe Bridge JavaScript Reference.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "location",
                "@rwaccess": "readonly",
                "shortdesc": "A string describing the location of the new menu element, with respect to existing menu elements.",
                "description": "Set on creation; see create() method.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "separatorAfter",
                "shortdesc": "Whether there is a separator after this item.",
                "description": "Set on creation; see create() method.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "separatorBefore",
                "shortdesc": "Whether there is a separator before this item.",
                "description": "Set on creation; see create() method.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "canBeChecked",
                "@rwaccess": "readonly",
                "shortdesc": "Whether the menu item can be checked.",
                "description": "When true, the menu item can be checked. Otherwise, the menu item cannot be checked.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "checked",
                "shortdesc": "Whether the item is checked.",
                "description": "When true, the command is selected. A check mark appears next to the label. When false, the item is not selected, and no check mark is shown.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "enabled",
                "shortdesc": "Whether the menu or item is enabled.",
                "description": "When true, the menu or command is selectable. When false, it is grayed out and cannot be selected. Read\/write.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "type",
                "@rwaccess": "readonly",
                "shortdesc": "The type of menu element, a menu or command.",
                "description": "Set on creation; see create() method.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "altDown",
                "@rwaccess": "readonly",
                "shortdesc": "When true, the Alt modifier key was pressed when the item was selected.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "cmdDown",
                "@rwaccess": "readonly",
                "shortdesc": "When true, the Command modifier key was pressed when the item was selected.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "ctrlDown",
                "@rwaccess": "readonly",
                "shortdesc": "When true, the Control modifier key was pressed when the item was selected.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "optionDown",
                "@rwaccess": "readonly",
                "shortdesc": "When true, the Option modifier key was pressed when the item was selected.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "shiftDown",
                "@rwaccess": "readonly",
                "shortdesc": "When true, the Shift modifier key was pressed when the item was selected.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "text",
                "shortdesc": "The displayed label text, a localizable string.",
                "datatype": {
                    "type": "String"
                }
            }
        ],
        "methods": [
            {
                "@name": "create",
                "shortdesc": "Adds a new menu to the menu bar, a new submenu to an existing menu, or a new command to an existing menu or submenu.",
                "description": "Use this function to create new menu items, rather than the new operator. This function behaves correctly if a menu item with the same name already exists.",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "type",
                            "shortdesc": "The type of menu element, a menu or command.",
                            "description": "Either  menu, a menu or submenu, or command, a menu item.",
                            "datatype": {
                                "type": "String"
                            }
                        },
                        {
                            "@name": "text",
                            "shortdesc": "The localizable string that is displayed as the label text.",
                            "description": "Script-created menu and menu commands cannot have keyboard shortcuts or icons.",
                            "datatype": {
                                "type": "String"
                            }
                        },
                        {
                            "@name": "location",
                            "shortdesc": "A string describing the location of the new menu element, with respect to existing menu elements.",
                            "description": {
                                "li": [
                                    "before identifier: Create the new element before the given menu element.",
                                    "after identifier: Create the new element before the given menu element.",
                                    "at the end of identifier: Append the new element to the given menu. The identifier must be for a menu, not a command item.",
                                    "at the beginning of identifier: Create the new element as the first item in the given menu. The identifier must be for a menu, not a command item."
                                ],
                                "br": [
                                    "",
                                    ""
                                ],
                                "@": "This can take one of the following forms:\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\tTo insert a separator before or after the new element, specify a dash (-) at the beginning or end of the location string. \n\t\t\t\t\t\tA string that does not conform to these rules causes a run-time error."
                            },
                            "datatype": {
                                "type": "String"
                            }
                        },
                        {
                            "@name": "id",
                            "@optional": "true",
                            "shortdesc": "The unique identifier for this element.",
                            "description": {
                                "li": [
                                    "If the ID of an existing menu or submenu is supplied, the call returns that menu object.",
                                    "If the ID of an existing command is supplied, the call causes a JavaScript error.",
                                    "If not supplied, the call generates a numeric value, which can be found in the id property of the returned menu object."
                                ]
                            },
                            "datatype": {
                                "type": "String"
                            }
                        }
                    ]
                },
                "datatype": {
                    "type": {
                        "@href": "#\/MenuElement",
                        "@": "MenuElement"
                    }
                }
            },
            {
                "@name": "find",
                "shortdesc": "Retrieves a menu element object using its unique identifier.",
                "description": "Returns the MenuElement object for the specified menu or menu item, or null if no such element is found.",
                "parameters": {
                    "parameter": {
                        "@name": "id",
                        "shortdesc": "The unique identifier for the menu element to find.",
                        "datatype": {
                            "type": "String"
                        }
                    }
                },
                "datatype": {
                    "type": {
                        "@href": "#\/MenuElement",
                        "@": "MenuElement"
                    }
                }
            },
            {
                "@name": "remove",
                "shortdesc": "Removes a script-defined menu or menu item.",
                "parameters": {
                    "parameter": {
                        "@name": "id",
                        "shortdesc": "The unique identifier for the menu element to remove.",
                        "datatype": {
                            "type": "String"
                        }
                    }
                }
            }
        ]
    },
    "Thumbnail": {
        "class": "Thumbnail",
        "superClass": null,
        "shortdesc": "Represents a reference to a node in the browser navigation hierarchy.",
        "elementCount": 1,
        "propertyCount": 28,
        "methodCount": 22,
        "properties": [
            {
                "@name": "aliasType",
                "@rwaccess": "readonly",
                "shortdesc": "If the value of type is alias, the kind of target this thumbnail represents.",
                "description": "Either file or folder. If type is not alias, value is undefined.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "children",
                "@rwaccess": "readonly",
                "shortdesc": "The node children of this container node.",
                "description": {
                    "br": [
                        "",
                        "",
                        "",
                        ""
                    ],
                    "@": "An array of Thumbnail objects. When this object references a folder, the children are the thumbnails that reference the contents of the folder. By default, when the thumbnail is selected in a navigation pane, its children are shown in the Content pane.This array is not populated until the loaded event has occurred for the browser.The list of children is cached on the first reference so that subsequent references do not result in further disk access. To ensure that the list is up to date (for example after you have performed operations that may have resulted in children being deleted, added, or renamed) call the refresh() method to make sure the list is updated on the next access. You do not need to refresh if you changed the content or properties of a child thumbnail."
                },
                "datatype": {
                    "type": "Array"
                }
            },
            {
                "@name": "container",
                "@rwaccess": "readonly",
                "shortdesc": "When true, the node is a container.",
                "description": "A container can have child nodes (regardless of whether it currently has any children). Only container nodes can appear in the Folders and Favorites panes. Folder thumbnails are containers; a node-handling extension can define other container node types.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "core",
                "@rwaccess": "readonly",
                "shortdesc": "Provides access to the core node-data sets defined by the default node handler.",
                "description": {
                    "font": {
                        "@face": "_typewriter",
                        "@": "myThumbSize = myThumb.core.immediate.size"
                    },
                    "@": "Refer to core node attributes through the name of the core Infoset object and InfosetMemberDescription object. For example,"
                },
                "datatype": {
                    "type": {
                        "@href": "#\/Infoset",
                        "@": "Infoset"
                    }
                }
            },
            {
                "@name": "creationDate",
                "@rwaccess": "readonly",
                "shortdesc": "Date the referenced file or folder was created, if it can be determined.",
                "datatype": {
                    "type": "Date"
                }
            },
            {
                "@name": "displayMode",
                "shortdesc": "DEPRECATED. Do not use.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "displayPath",
                "shortdesc": "DEPRECATED. Do not use.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "exists",
                "@rwaccess": "readonly",
                "shortdesc": "For a file or folder, whether the resource for this node exists on the local disk.",
                "description": "A node-handling extension can define other criteria for whether a node exists.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "extensions",
                "@rwaccess": "readonly",
                "shortdesc": "All of the ExtensionHandler objects that could handle this node.",
                "description": "The last one in the list is the one that does handle it.",
                "datatype": {
                    "type": "Array"
                }
            },
            {
                "@name": "hasMetadata",
                "@rwaccess": "readonly",
                "shortdesc": "Whether this thumbnail is associated with a file that contains embedded metadata.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "hidden",
                "@rwaccess": "readonly",
                "shortdesc": "Whether this thumbnail is displayable.",
                "description": "When true, this thumbnail is hidden. When false (the default), it is shown.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "iconPath",
                "shortdesc": "The path to the operating-system icon image file for this node, when it represents a web page.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "label",
                "shortdesc": "The label string for this thumbnail.",
                "description": {
                    "br": [
                        "",
                        ""
                    ],
                    "@": "Can be one of the predefined color strings (as seen in the Label menu) to apply one of the standard colors. Any string that does not match a predefined color is considered a label string rather than a color. The default color is White. This label is displayed for all thumbnails, regardless of whether they support embedded metadata."
                },
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "lastModifiedDate",
                "@rwaccess": "readonly",
                "shortdesc": "Date the referenced file or folder was last modified, if it can be determined.",
                "datatype": {
                    "type": "Date"
                }
            },
            {
                "@name": "location",
                "@rwaccess": "readonly",
                "shortdesc": "Whether the thumbnail is associated with a local file-system object or a Version Cue node (which can have both a local and remote replica).",
                "description": "One of: local, unknown, VersionCue",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "locked",
                "@rwaccess": "readonly",
                "shortdesc": "Whether this node represents a read-only file in Windows, or a file that has been locked in the Finder in Mac OS.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "metadata",
                "shortdesc": "The Metadata object associated with this thumbnail, if it supports embedded metadata.",
                "description": {
                    "br": [
                        "",
                        ""
                    ],
                    "@": "Some properties of this Metadata object may not be immediately available. To ensure the object contains current data, set app.synchronousMode to true, or use  Thumbnail.synchronousMetadata .If no metadata is defined for a thumbnail, and you attempt to access a metadata property through this property, the value undefined is returned. Note that this differs from the behavior in Adobe Bridge CS2, where an exception was thrown in this case."
                },
                "datatype": {
                    "type": {
                        "@href": "#\/Metadata",
                        "@": "Metadata"
                    }
                }
            },
            {
                "@name": "mimeType",
                "@rwaccess": "readonly",
                "shortdesc": "The referenced file\u2019s MIME type, if it can be determined.",
                "description": "If the type cannot be determined, returns the empty string.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "model",
                "@rwaccess": "readonly",
                "shortdesc": "The ExtensionModel object associated with this node.",
                "datatype": {
                    "type": {
                        "@href": "#\/ExtensionModel",
                        "@": "ExtensionModel"
                    }
                }
            },
            {
                "@name": "name",
                "shortdesc": "The label displayed for the thumbnail.",
                "description": "Default is the path value.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "parent",
                "@rwaccess": "readonly",
                "shortdesc": "The Thumbnail object for the parent node of this thumbnail.",
                "description": "The value is undefined for thumbnails added to the root level of app.favorites. This object is in the children array of its parent.",
                "datatype": {
                    "type": {
                        "@href": "#\/Thumbnail",
                        "@": "Thumbnail"
                    }
                }
            },
            {
                "@name": "path",
                "@rwaccess": "readonly",
                "shortdesc": "DEPRECATED. Use spec or uri instead.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "rating",
                "shortdesc": "The rating value for this thumbnail.",
                "description": "In the range [-1..5]. A negative value signifies a rejection. If set to a value that is out of range, the rating is set to 0. Applies to all thumbnails regardless of whether they support embedded metadata.",
                "datatype": {
                    "type": "Number"
                }
            },
            {
                "@name": "rotation",
                "shortdesc": "The angle of rotation for the icon image of this node, in degrees.",
                "description": "One of: 0: No rotation, 90: Rotated 90 degrees clockwise, -90: Rotated 90 degrees counterclockwise, 180: Rotated 180 degrees. All other values are ignored.",
                "datatype": {
                    "type": "Number"
                }
            },
            {
                "@name": "spec",
                "@rwaccess": "readonly",
                "shortdesc": "A  File or Folder object for this thumbnail\u2019s referenced node.",
                "description": "Set when the object is created, using the first argument to the Thumbnail object constructor. If the thumbnail does not reference a file or folder, the value is undefined.",
                "datatype": {
                    "type": "File"
                }
            },
            {
                "@name": "synchronousMetadata",
                "shortdesc": "Waits for confirmation of a valid value to return the Metadata object associated with this thumbnail, if any.",
                "description": "If the node does not support embedded metadata, returns undefined. If app.synchronousMode is true, this is the same as  Thumbnail.metadata.",
                "datatype": {
                    "type": {
                        "@href": "#\/Metadata",
                        "@": "Metadata"
                    }
                }
            },
            {
                "@name": "type",
                "@rwaccess": "readonly",
                "shortdesc": "The type of node this thumbnail references.",
                "description": "One of: file, folder, alias, package, application (an executable file), other",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "uri",
                "@rwaccess": "readonly",
                "shortdesc": "The full Bridge URI ( unique resource identifier) for this thumbnail.",
                "description": "This is the path string preceded by a registered node-type identifying prefix such as \"vc:\".",
                "datatype": {
                    "type": "String"
                }
            }
        ],
        "methods": [
            {
                "@name": "add",
                "shortdesc": "DEPRECATED. Do not use."
            },
            {
                "@name": "copyTo",
                "shortdesc": "Creates a new Thumbnail object that references the same node as this one.",
                "description": "Adds the new thumbnail to the target thumbnail's children list. Each call to this function is added to the Undo stack.",
                "parameters": {
                    "parameter": {
                        "@name": "path",
                        "shortdesc": "The parent node of the new copy.",
                        "description": "A File or Folder object, a Thumbnail object, or a Bridge URI string.",
                        "datatype": [
                            {
                                "type": "Object"
                            },
                            {
                                "type": "String"
                            }
                        ]
                    }
                },
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "insert",
                "shortdesc": "DEPRECATED. Do not use."
            },
            {
                "@name": "moveTo",
                "shortdesc": "Changes the parent of this thumbnail.",
                "description": "Removes this thumbnail from its current parent, and adds it to the target thumbnail\u2019s children list.",
                "parameters": {
                    "parameter": {
                        "@name": "path",
                        "shortdesc": "The new parent node.",
                        "description": "A File or Folder object, a Thumbnail object, or a Bridge URI string.",
                        "datatype": [
                            {
                                "type": "Object"
                            },
                            {
                                "type": "String"
                            }
                        ]
                    }
                },
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "open",
                "shortdesc": "Launches the file referenced by this thumbnail in the appropriate application (such as Photoshop for JPEG files).",
                "description": {
                    "br": [
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""
                    ],
                    "@": "This is the same as choosing Open from the File or context menu, or double-clicking the thumbnail icon in the Content pane. If this thumbnail references a JSX file, runs the script in its target application, or, if no target is specified, in the ExtendScript Toolkit. If this thumbnail references a folder, navigates to that folder in the Folders pane\u2014that is, sets Document.thumbnail to this thumbnail.Returns true on success."
                },
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "openWith",
                "shortdesc": "Launches the file referenced by this thumbnail in the specified application.",
                "parameters": {
                    "parameter": {
                        "@name": "appPath",
                        "shortdesc": "A platform-specific path string to the application.",
                        "description": {
                            "br": [
                                "",
                                ""
                            ],
                            "@": "A string as returned in the appPath property of the openWith event object when a user makes a selection of thumbnails in the Content pane, then selects an application from the Open With submenu of the File or context menu. Returns true on success."
                        },
                        "datatype": {
                            "type": "String"
                        }
                    }
                },
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "refresh",
                "shortdesc": "Refreshes an associated information set or sets to reflect the current state of this node\u2019s referenced file or folder.",
                "description": {
                    "li": [
                        "For non-container thumbnails, returns true if the node has changed since the last access.",
                        "For container thumbnails, returns true if the node has been renamed since the last access."
                    ],
                    "@": "For container thumbnails, marks the Thumbnail object so that the next access to the children property causes a disk access to update the cached list of children.\n\t\t\t\n\t\t\t\n\t\t\tReturns true on success."
                },
                "parameters": {
                    "parameter": {
                        "@name": "infosetName",
                        "@optional": "true",
                        "shortdesc": "The data sets to refresh.",
                        "description": "An array of Infoset object names, or the string all (the default), which refreshes all information sets associated with this thumbnail.",
                        "datatype": [
                            {
                                "type": "Array"
                            },
                            {
                                "type": "String"
                            }
                        ]
                    }
                },
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "registerInterest",
                "shortdesc": "Registers a callback function that is executed whenever a node-data value in this thumbnail changes.",
                "parameters": {
                    "parameter": {
                        "@name": "callback",
                        "shortdesc": "A developer-defined callback function.",
                        "description": {
                            "font": {
                                "@face": "_typewriter",
                                "@": "function interestCallback (thumb, message)"
                            },
                            "br": [
                                "",
                                ""
                            ],
                            "li": [
                                "thumb is this Thumbnail object.",
                                "message is a string, the name of the Infoset object whose update triggered the call."
                            ],
                            "@": "Must conform to the prototype"
                        }
                    }
                }
            },
            {
                "@name": "remove",
                "shortdesc": "Deletes this Thumbnail object.",
                "description": "Also deletes the file or folder associated with the thumbnail from the disk."
            },
            {
                "@name": "resolve",
                "shortdesc": "If the value of type is alias, retrieves a Thumbnail object for the target of the alias.",
                "description": {
                    "li": [
                        "If the alias can be resolved, returns the Thumbnail object for the target.",
                        "If the alias cannot be resolved, returns undefined.",
                        "If the type is not alias, returns this Thumbnail object."
                    ]
                },
                "datatype": {
                    "type": {
                        "@href": "#\/Thumbnail",
                        "@": "Thumbnail"
                    }
                }
            },
            {
                "@name": "revealInSystemBrowser",
                "shortdesc": "Opens the platform-specific native file browser, displays and selects the file or folder for this thumbnail."
            },
            {
                "@name": "unregisterInterest",
                "shortdesc": "Removes a callback function from the list of callbacks registered for this thumbnail.",
                "parameters": {
                    "parameter": {
                        "@name": "callback",
                        "shortdesc": "A developer-defined callback function, previously registered with registerInterest().",
                        "datatype": {
                            "type": "Function"
                        }
                    }
                }
            },
            {
                "@name": "verifyExternalChanges",
                "shortdesc": "Re-enumerates the children of a container node.",
                "description": "Has no effect if the node is not a container."
            },
            {
                "@name": "isDynamicMedia",
                "shortdesc": "Returns true if the Thumbnail object can be played in Bridge.",
                "description": "Returns true if the Thumbnail object can be played in the Preview panel in Bridge, such as a video or an audio file. Returns false if the Thumbnail object cannot be played."
            },
            {
                "@name": "togglePlayPause",
                "shortdesc": "Toggles the state of the Play or Pause button in Preview panel for the selected item.",
                "description": "Toggles the state of the Play or Pause button in Preview panel for the selected item. This button is enabled when a playable item is selected in the Content panel."
            },
            {
                "@name": "isPlaying",
                "shortdesc": "Returns true if selected file is already playing in the Preview panel.",
                "description": "Returns true if the selected file is already playing in the Preview panel. Returns false if the file is paused, a thumbnail is not selected, or the selected item cannot be played."
            },
            {
                "@name": "toggleAutoLoop",
                "shortdesc": "Toggles the state of the Auto-Loop button in Preview panel for the selected item.",
                "description": "Toggles the state of the Auto-Loop button in Preview panel for the selected item. This button is enabled when a playable item is selected in the Content panel."
            },
            {
                "@name": "isAutoLoopOn",
                "shortdesc": "Returns true if the auto-loop is enabled in the Preview panel.",
                "description": "Returns true if the auto-loop is enabled in the Preview panel. Returns false if the file is paused, thumbnail is not selected, or the selected item cannot be played."
            },
            {
                "@name": "setPosition",
                "shortdesc": "Sets seek position of playback slider in the Preview panel.",
                "description": "Sets seek position of the playback slider in the Preview panel for the selected file. This function expects two numbers as arguments.",
                "parameter": [
                    {
                        "@name": "nPosition",
                        "shortdesc": "The part of nTotal where one wants to sets seek position in the playback slider.",
                        "datatype": {
                            "type": "Number"
                        }
                    },
                    {
                        "@name": "nTotal",
                        "shortdesc": "Max value for your seek scale. For precise results, keep this value less than or equal to 255. For values greater than 255, Bridge will scale down these values.",
                        "datatype": {
                            "type": "Number"
                        }
                    }
                ]
            },
            {
                "@name": "getPosition",
                "shortdesc": "Returns the position of playback slider from Preview panel.",
                "description": "Returns the position of playback slider from Preview panel. This function returns an array of two numbers, which are nPosition and nTotal, as defined in the setPosition method."
            },
            {
                "@name": "setVolume",
                "shortdesc": "Sets position of the volume slider in the Preview panel.",
                "description": "Sets position of the volume slider in the Preview panel for the selected file. This function expects two numbers as arguments.",
                "parameter": [
                    {
                        "@name": "nPosition",
                        "shortdesc": "The part of nTotal where one wants to set the slider.",
                        "datatype": {
                            "type": "Number"
                        }
                    },
                    {
                        "@name": "nTotal",
                        "shortdesc": "Max value for your volume scale. For precise results, keep this value less than or equal to 255. For values greater than 255, Bridge will scale down these values.",
                        "datatype": {
                            "type": "Number"
                        }
                    }
                ]
            },
            {
                "@name": "getVolume",
                "shortdesc": "Returns the position of volume slider for the item being previewed in Bridge.",
                "description": "Returns the position of volume slider for the item being previewed in Bridge. This function returns an array of two numbers, which are nPosition and nTotal, as defined in the setVolume method."
            }
        ]
    },
    "Metadata": {
        "class": "Metadata",
        "superClass": null,
        "shortdesc": "Allows you to access the Extensible Metadata Platform (XMP) metadata associated with the file node of a Thumbnail object.",
        "elementCount": 1,
        "propertyCount": 1,
        "methodCount": 3,
        "properties": [
            {
                "@name": "namespace",
                "shortdesc": "The current XMP namespace, used to search for XMP properties.",
                "description": "Default is the root namespace. Assigning a new namespace creates that namespace in the XMP metadata. To access values in a specific schema, the namespace for that schema must be set before referencing the properties in the schema.",
                "datatype": {
                    "type": "String"
                }
            }
        ],
        "methods": [
            {
                "@name": "applyMetadataTemplate",
                "shortdesc": "Adds metadata properties to this object that were saved to an XMP template from the FileInfo dialog.",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "templateName",
                            "shortdesc": "The name of the XMP template.",
                            "description": {
                                "li": [
                                    "(Windows) %APPDATA%\/Adobe\/XMP\/Metadata Templates\/",
                                    "(Mac OS) \/Users\/username\/Library\/Application Support\/Adobe\/XMP\/\nMetadata Templates\/"
                                ],
                                "@": "Templates are stored for each user in:"
                            },
                            "datatype": {
                                "type": "String"
                            }
                        },
                        {
                            "@name": "modType",
                            "shortdesc": "The modification type.",
                            "description": {
                                "li": [
                                    "append: Adds to the metadata any property that is in the template but not in the source. If a property in the template already exists in the source, its value is not changed, unless it is an array. For an array, adds members that are in the template but not in the source. If an array member already exists in the source, the value is not changed.",
                                    "replace: Adds to the metadata all properties and values that are in the template. If a property in the template already exists in the source, its value is changed to the template value."
                                ],
                                "@": "One of:"
                            },
                            "datatype": {
                                "type": "String"
                            }
                        }
                    ]
                }
            },
            {
                "@name": "read",
                "shortdesc": "Retrieves and returns the string value of a metadata property in the specified namespace.",
                "description": "Returns the string value, or an empty string if the specified property does not exist.",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "namespace",
                            "shortdesc": "The XMP namespace.",
                            "datatype": {
                                "type": "String"
                            }
                        },
                        {
                            "@name": "property",
                            "shortdesc": "The property name.",
                            "description": "To access a multivalue (complex) property, use an XPath to the individual value.",
                            "datatype": {
                                "type": "String"
                            }
                        }
                    ]
                },
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "serialize",
                "shortdesc": "Serializes the XMP packet into a string.",
                "description": "Returns the string containing the serialized metadata.",
                "datatype": {
                    "type": "String"
                }
            }
        ]
    },
    "ModalOperator": {
        "class": "ModalOperator",
        "superClass": null,
        "shortdesc": "An independant node-handling operation with its own user interface.",
        "elementCount": 1,
        "propertyCount": 28,
        "methodCount": 0,
        "properties": [
            {
                "@name": "cancelRequested",
                "shortdesc": "When true, the user has requested that the operation be canceled.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "conflictType",
                "shortdesc": "The type of the current file-system conflict encountered during the operation.",
                "description": "One of: none, userConfirmationRequired, fatal",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "conflictMessage",
                "shortdesc": "A string describing the current file-system conflict that prevents the operation from being performed.",
                "description": "Can identify one of the preset Adobe Bridge error messages, or can be an arbitrary descriptive string. Preset messages are identified by the following string values: none, deleteFile, deleteMultipleFiles, deleteReadOnlyFile, moveReadOnlyFile, readOnlyFileExists, fileExists, fileIsBusy, targetFolderExists, fatalErrorSameFile, fatalErrorSameFolder, fatalErrorMoveToChild, fatalErrorSourceNotAvailable, fatalErrorStorageFull, fatalErrorSourceAccessDenied, fatalErrorTargetAccessDenied, fatalErrorUnknown, noXMPSupport, undoDelete, messageCustom",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "description",
                "shortdesc": "A description of the operation, suitable for display.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "errorTarget",
                "shortdesc": "When operationStatus is inError, the problematic thumbnail.",
                "datatype": {
                    "type": {
                        "@href": "#\/Thumbnail",
                        "@": "Thumbnail"
                    }
                }
            },
            {
                "@name": "newNames",
                "shortdesc": "When sources has a value, an array of the same length containing the new name strings to be assigned to the source Thumbnail objects after they are transfered to the target.",
                "datatype": {
                    "type": "Array"
                }
            },
            {
                "@name": "operationStatus",
                "shortdesc": "The status of the operation with respect to the immediate action.",
                "description": "Also returned by getOperationStatus(). One of: incomplete, inCancellation, inConflict, inError, succeeded, cancelled, failed",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "percentageComplete",
                "shortdesc": "How much of the operation has currently been completed, in the range [0..100].",
                "datatype": {
                    "type": "Number"
                }
            },
            {
                "@name": "processingStatus",
                "shortdesc": "The current overall status of the operation with respect to Adobe Bridge.",
                "description": "Reports whether the operation has begun, is still going on, has been paused by the user, or has finished. Also returned by the getProcessingStatus(). One of: notStarted, inProgress, awaitingResume, completed",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "progressMessage",
                "shortdesc": "A description of the current state of the operation, suitable for display.",
                "description": "Also returned by getProgressMessage()..",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "resolvePolicy",
                "shortdesc": "How to apply the conflict-resolution method, applyForOneConflictOnly or applyToAllConflicts",
                "description": "This is for the developer's information in a ModalOperator or when UI is suppressed; Adobe Bridge does not check it.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "resolveMethod",
                "shortdesc": "How to resolve file-system conflicts.",
                "description": "This is for the developer's information in a ModalOperator or when UI is suppressed; Adobe Bridge does not check it. One of: abort, noOverride, override, overrideConditionally",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "result",
                "shortdesc": "An optional result for an operation, such as the path that results from a createNewContainer() operation.",
                "datatype": {
                    "type": "Object"
                }
            },
            {
                "@name": "sources",
                "shortdesc": "A set of Thumbnail objects that the operation acts upon.",
                "datatype": {
                    "type": "Array"
                }
            },
            {
                "@name": "target",
                "shortdesc": "A target Thumbnail object for the operation.",
                "datatype": {
                    "type": {
                        "@href": "#\/Thumbnail",
                        "@": "Thumbnail"
                    }
                }
            },
            {
                "@name": "timeout",
                "shortdesc": "A number of milliseconds to wait before aborting the operation.",
                "description": "Default is 0, meaning that the operation does not time out.",
                "datatype": {
                    "type": "Number"
                }
            },
            {
                "@name": "getPercentageComplete",
                "shortdesc": "Implement a method that returns the percentage of the operation that has currently been completed, for use in displaying the Progress dialog.",
                "description": "Adobe Bridge invokes this when it needs to update the Progress bar. Return a number in the range [0..100].",
                "datatype": {
                    "type": "Function"
                }
            },
            {
                "@name": "getProcessingStatus",
                "shortdesc": "Implement a method that returns the current overall status of the operation with respect to Adobe Bridge.",
                "description": "Describes whether the operation has begun, is still going on, has been paused by the user, or has finished. Return one of the following string values: notStarted, inProgress, awaitingResume, completed",
                "datatype": {
                    "type": "Function"
                }
            },
            {
                "@name": "getProgressMessage",
                "shortdesc": "Implement a method that returns a message suitable for display in the Progress dialog.",
                "description": "Return a string.",
                "datatype": {
                    "type": "Function"
                }
            },
            {
                "@name": "getTotalBytesTransferred",
                "shortdesc": "Implement a method that returns the current number of bytes that have been transferred to the target in the course of this operation.",
                "description": "Return a number.",
                "datatype": {
                    "type": "Function"
                }
            },
            {
                "@name": "getConflictInfo",
                "shortdesc": "Implement a method that returns a description of a file-system conflict that prevents the operation from being performed on the current thumbnail.",
                "description": "The string can identify one of the preset Adobe Bridge error messages, or can be an arbitrary descriptive string suitable for display in a conflict-resolution dialog. Preset messages are identified by the following string values: readOnlyFile, readOnlyFileExists, targetFolderExists, fileExists, sameFile, sameFolder, moveToChild, sourceNotAvailable, storageFull, sourceAccessDenied, targetAccessDenied, unknown",
                "datatype": {
                    "type": "Function"
                }
            },
            {
                "@name": "getTotalNodeCount",
                "shortdesc": "Implement a method that returns the total number of source nodes to be operated on.",
                "description": "Return a number.",
                "datatype": {
                    "type": "Function"
                }
            },
            {
                "@name": "getProcessedNodeCount",
                "shortdesc": "Implement a method that returns the number of source nodes that have been processed so far.",
                "description": "Return a number.",
                "datatype": {
                    "type": "Function"
                }
            },
            {
                "@name": "getType",
                "shortdesc": "Implement a method that returns the subclass type of this operator.",
                "description": "Return a string, modal or progress.",
                "datatype": {
                    "type": "Function"
                }
            },
            {
                "@name": "start",
                "shortdesc": "Implement a method that initiates the operation.",
                "description": {
                    "li": [
                        "For a modal operator, the method should return when the operation is complete.",
                        "For a progress operator, the method should begin the background task and return."
                    ],
                    "@": "Adobe Bridge invokes this after the operator has been enqueued.\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tReturn undefined."
                },
                "datatype": {
                    "type": "Function"
                }
            },
            {
                "@name": "stop",
                "shortdesc": "Implement a method that terminates the operation.",
                "description": "Adobe Bridge invokes this after the operation has been stopped by user interaction. Return undefined.",
                "datatype": {
                    "type": "Function"
                }
            },
            {
                "@name": "resume",
                "shortdesc": "Implement a method that restarts the operation after it has been stopped by user interaction.",
                "description": "Return true if the operation has been successfully restarted.",
                "datatype": {
                    "type": "Function"
                }
            },
            {
                "@name": "resolveConflict",
                "shortdesc": "Implement a method that resolves a file-system conflict, as identified by the conflictType and conflictMessage values.",
                "description": "Adobe Bridge invokes this after the user makes selections in a conflict-resolution dialog, passing in the user\u2019s choices. See Adobe Bridge JavaScript Reference for additional details.",
                "datatype": {
                    "type": "Function"
                }
            }
        ],
        "methods": []
    },
    "ProgressOperator": {
        "class": "ProgressOperator",
        "superClass": null,
        "shortdesc": "A lengthy node-handling operation that can report its progress and be interrupted or canceled.",
        "elementCount": 1,
        "propertyCount": 28,
        "methodCount": 0,
        "properties": [
            {
                "@name": "cancelRequested",
                "shortdesc": "When true, the user has requested that the operation be canceled.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "conflictType",
                "shortdesc": "The type of the current file-system conflict encountered during the operation.",
                "description": "One of: none, userConfirmationRequired, fatal",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "conflictMessage",
                "shortdesc": "A string describing the current file-system conflict that prevents the operation from being performed.",
                "description": "Can identify one of the preset Adobe Bridge error messages, or can be an arbitrary descriptive string. Preset messages are identified by the following string values: none, deleteFile, deleteMultipleFiles, deleteReadOnlyFile, moveReadOnlyFile, readOnlyFileExists, fileExists, fileIsBusy, targetFolderExists, fatalErrorSameFile, fatalErrorSameFolder, fatalErrorMoveToChild, fatalErrorSourceNotAvailable, fatalErrorStorageFull, fatalErrorSourceAccessDenied, fatalErrorTargetAccessDenied, fatalErrorUnknown, noXMPSupport, undoDelete, messageCustom",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "description",
                "shortdesc": "A description of the operation, suitable for display.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "errorTarget",
                "shortdesc": "When operationStatus is inError, the problematic thumbnail.",
                "datatype": {
                    "type": {
                        "@href": "#\/Thumbnail",
                        "@": "Thumbnail"
                    }
                }
            },
            {
                "@name": "newNames",
                "shortdesc": "When sources has a value, an array of the same length containing the new name strings to be assigned to the source Thumbnail objects after they are transfered to the target.",
                "datatype": {
                    "type": "Array"
                }
            },
            {
                "@name": "operationStatus",
                "shortdesc": "The status of the operation with respect to the immediate action.",
                "description": "Also returned by getOperationStatus(). One of: incomplete, inCancellation, inConflict, inError, succeeded, cancelled, failed",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "percentageComplete",
                "shortdesc": "How much of the operation has currently been completed, in the range [0..100].",
                "datatype": {
                    "type": "Number"
                }
            },
            {
                "@name": "processingStatus",
                "shortdesc": "The current overall status of the operation with respect to Adobe Bridge.",
                "description": "Reports whether the operation has begun, is still going on, has been paused by the user, or has finished. Also returned by the getProcessingStatus(). One of: notStarted, inProgress, awaitingResume, completed",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "progressMessage",
                "shortdesc": "A description of the current state of the operation, suitable for display.",
                "description": "Also returned by getProgressMessage()..",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "resolvePolicy",
                "shortdesc": "How to apply the conflict-resolution method, applyForOneConflictOnly or applyToAllConflicts",
                "description": "This is for the developer's information in a ModalOperator or when UI is suppressed; Adobe Bridge does not check it.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "resolveMethod",
                "shortdesc": "How to resolve file-system conflicts.",
                "description": "This is for the developer's information in a ModalOperator or when UI is suppressed; Adobe Bridge does not check it. One of: abort, noOverride, override, overrideConditionally",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "result",
                "shortdesc": "An optional result for an operation, such as the path that results from a createNewContainer() operation.",
                "datatype": {
                    "type": "Object"
                }
            },
            {
                "@name": "sources",
                "shortdesc": "A set of Thumbnail objects that the operation acts upon.",
                "datatype": {
                    "type": "Array"
                }
            },
            {
                "@name": "target",
                "shortdesc": "A target Thumbnail object for the operation.",
                "datatype": {
                    "type": {
                        "@href": "#\/Thumbnail",
                        "@": "Thumbnail"
                    }
                }
            },
            {
                "@name": "timeout",
                "shortdesc": "A number of milliseconds to wait before aborting the operation.",
                "description": "Default is 0, meaning that the operation does not time out.",
                "datatype": {
                    "type": "Number"
                }
            },
            {
                "@name": "getPercentageComplete",
                "shortdesc": "Implement a method that returns the percentage of the operation that has currently been completed, for use in displaying the Progress dialog.",
                "description": "Adobe Bridge invokes this when it needs to update the Progress bar. Return a number in the range [0..100].",
                "datatype": {
                    "type": "Function"
                }
            },
            {
                "@name": "getProcessingStatus",
                "shortdesc": "Implement a method that returns the current overall status of the operation with respect to Adobe Bridge.",
                "description": "Describes whether the operation has begun, is still going on, has been paused by the user, or has finished. Return one of the following string values: notStarted, inProgress, awaitingResume, completed",
                "datatype": {
                    "type": "Function"
                }
            },
            {
                "@name": "getProgressMessage",
                "shortdesc": "Implement a method that returns a message suitable for display in the Progress dialog.",
                "description": "Return a string.",
                "datatype": {
                    "type": "Function"
                }
            },
            {
                "@name": "getTotalBytesTransferred",
                "shortdesc": "Implement a method that returns the current number of bytes that have been transferred to the target in the course of this operation.",
                "description": "Return a number.",
                "datatype": {
                    "type": "Function"
                }
            },
            {
                "@name": "getConflictInfo",
                "shortdesc": "Implement a method that returns a description of a file-system conflict that prevents the operation from being performed on the current thumbnail.",
                "description": "The string can identify one of the preset Adobe Bridge error messages, or can be an arbitrary descriptive string suitable for display in a conflict-resolution dialog. Preset messages are identified by the following string values: readOnlyFile, readOnlyFileExists, targetFolderExists, fileExists, sameFile, sameFolder, moveToChild, sourceNotAvailable, storageFull, sourceAccessDenied, targetAccessDenied, unknown",
                "datatype": {
                    "type": "Function"
                }
            },
            {
                "@name": "getTotalNodeCount",
                "shortdesc": "Implement a method that returns the total number of source nodes to be operated on.",
                "description": "Return a number.",
                "datatype": {
                    "type": "Function"
                }
            },
            {
                "@name": "getProcessedNodeCount",
                "shortdesc": "Implement a method that returns the number of source nodes that have been processed so far.",
                "description": "Return a number.",
                "datatype": {
                    "type": "Function"
                }
            },
            {
                "@name": "getType",
                "shortdesc": "Implement a method that returns the subclass type of this operator.",
                "description": "Return a string, modal or progress.",
                "datatype": {
                    "type": "Function"
                }
            },
            {
                "@name": "start",
                "shortdesc": "Implement a method that initiates the operation.",
                "description": {
                    "li": [
                        "For a modal operator, the method should return when the operation is complete.",
                        "For a progress operator, the method should begin the background task and return."
                    ],
                    "@": "Adobe Bridge invokes this after the operator has been enqueued.\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tReturn undefined."
                },
                "datatype": {
                    "type": "Function"
                }
            },
            {
                "@name": "stop",
                "shortdesc": "Implement a method that terminates the operation.",
                "description": "Adobe Bridge invokes this after the operation has been stopped by user interaction. Return undefined.",
                "datatype": {
                    "type": "Function"
                }
            },
            {
                "@name": "resume",
                "shortdesc": "Implement a method that restarts the operation after it has been stopped by user interaction.",
                "description": "Return true if the operation has been successfully restarted.",
                "datatype": {
                    "type": "Function"
                }
            },
            {
                "@name": "resolveConflict",
                "shortdesc": "Implement a method that resolves a file-system conflict, as identified by the conflictType and conflictMessage values.",
                "description": "Adobe Bridge invokes this after the user makes selections in a conflict-resolution dialog, passing in the user\u2019s choices. See Adobe Bridge JavaScript Reference for additional details.",
                "datatype": {
                    "type": "Function"
                }
            }
        ],
        "methods": []
    },
    "TextPanelette": {
        "class": "TextPanelette",
        "superClass": null,
        "shortdesc": "Represents a member subpanel of an InspectorPanel object that displays textual information about a set of thumbnails.",
        "elementCount": 1,
        "propertyCount": 4,
        "methodCount": 0,
        "properties": [
            {
                "@name": "keyValuePairs",
                "shortdesc": "A set of two-element arrays in the format [key, value].",
                "description": {
                    "br": [
                        "",
                        "",
                        "",
                        ""
                    ],
                    "@": "The array corresponds to the thumbnails array, each pair describing the text for the corresponding thumbnail.The key is shown on the left of each field in bold, and the value on the right in plain text.The fields contains string literals combined with panelette markup elements, which specify the text to be displayed."
                },
                "datatype": {
                    "type": "Array"
                }
            },
            {
                "@name": "thumbnails",
                "shortdesc": "The nodes corresponding to the key-value pairs.",
                "description": "An array of Thumbnail objects or node URI strings for which to display descriptive text; or the special markup [[this]] to indicate the currently selected thumbnail in the Content pane.",
                "datatype": {
                    "type": "Array"
                }
            },
            {
                "@name": "titleMarkup",
                "shortdesc": "Localizable text shown in the subpanel header bar.",
                "description": "Can include panelette markup elements. If not supplied, the name string appears as the  header.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "name",
                "shortdesc": "The unique, identifying name of this subpanel.",
                "datatype": {
                    "type": "String"
                }
            }
        ],
        "methods": []
    },
    "ThumbnailPanelette": {
        "class": "ThumbnailPanelette",
        "superClass": null,
        "shortdesc": "Represents a member subpanel of an InspectorPanel object that displays resizeable thumbnail icons, with corresponding text labels for each thumbnail.",
        "elementCount": 1,
        "propertyCount": 5,
        "methodCount": 0,
        "properties": [
            {
                "@name": "keyValuePairs",
                "shortdesc": "A set of two-element arrays in the format [key, value].",
                "description": {
                    "br": [
                        "",
                        "",
                        "",
                        ""
                    ],
                    "@": "The array corresponds to the thumbnails array, each pair describing the text for the corresponding thumbnail.The key is shown on the left of each field in bold, and the value on the right in plain text.The fields contains string literals combined with panelette markup elements, which specify the text to be displayed."
                },
                "datatype": {
                    "type": "Array"
                }
            },
            {
                "@name": "textPosition",
                "shortdesc": "The placement of the displayed text in the horizontal presentation mode.",
                "description": {
                    "li": [
                        "below: (Default) Displays text below the thumbnail icon.",
                        "right: Displays text to the right of the thumbnail icon."
                    ],
                    "@": "One of:"
                },
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "thumbnails",
                "shortdesc": "The nodes corresponding to the key-value pairs.",
                "description": "An array of Thumbnail objects or node URI strings for which to display descriptive text; or the special markup [[this]] to indicate the currently selected thumbnail in the Content pane.",
                "datatype": {
                    "type": "Array"
                }
            },
            {
                "@name": "titleMarkup",
                "shortdesc": "Localizable text shown in the subpanel header bar.",
                "description": "Can include panelette markup elements. If not supplied, the name string appears as the  header.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "name",
                "shortdesc": "The unique, identifying name of this subpanel.",
                "datatype": {
                    "type": "String"
                }
            }
        ],
        "methods": []
    },
    "IconListPanelette": {
        "class": "IconListPanelette",
        "superClass": null,
        "shortdesc": "Represents a member subpanel of an InspectorPanel object that displays two columns for an icon and text.",
        "elementCount": 1,
        "propertyCount": 3,
        "methodCount": 0,
        "properties": [
            {
                "@name": "rows",
                "shortdesc": "A collection of two-member arrays describing the rows to display in the panelette.",
                "description": {
                    "li": [
                        "The first member of each member array specifies the icon displayed in the first column, as a Thumbnail Object or a 16x16 pixel JPG, PNG, or system icon.",
                        "The second member, displayed in the second column, is a string that can contain markup elements to access dynamic data."
                    ],
                    "@": "Each member of the member arrays corresponds to a column."
                },
                "datatype": {
                    "type": "Array"
                }
            },
            {
                "@name": "titleMarkup",
                "shortdesc": "Localizable text shown in the subpanel header bar.",
                "description": "Can include panelette markup elements. If not supplied, the name string appears as the  header.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "name",
                "shortdesc": "The unique, identifying name of this subpanel.",
                "datatype": {
                    "type": "String"
                }
            }
        ],
        "methods": []
    },
    "InspectorPanel": {
        "class": "InspectorPanel",
        "superClass": null,
        "shortdesc": "Represents an object-inspection panel, a special type of tabbed palette that displays contextual information for a selected thumbnail.",
        "elementCount": 1,
        "propertyCount": 9,
        "methodCount": 2,
        "properties": [
            {
                "@name": "displayInInspector",
                "shortdesc": "Whether to display this panel.",
                "description": {
                    "br": [
                        "",
                        ""
                    ],
                    "@": "When true, this panel is displayed when Document.displayInspectorView is true, and if the  script-defined callback hidePanelForThumbnail returns true or is not implemented for this panel.When false, this panel is never displayed, and is also hidden in the Inspector page of the Preferences dialog."
                },
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "displayTitle",
                "@rwaccess": "readonly",
                "shortdesc": "The localized title string to display in the panel's tab header.",
                "description": {
                    "br": [
                        "",
                        ""
                    ],
                    "@": "The string can include values derived dynamically at display time, using panelette markup elements.Supplying this value allows you to use the same panel object with different titles for different node types. If this value is not supplied, the title value is displayed."
                },
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "flyoutMenuId",
                "@rwaccess": "readonly",
                "shortdesc": "The unique menu identifier of a script-defined flyout menu for this panel.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "minimized",
                "shortdesc": "When true, the panel is minimized or iconified.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "panelettes",
                "@rwaccess": "readonly",
                "shortdesc": "A collection of panelettes contained in this panel, in display order.",
                "description": "Use registerPanelette() and unregisterPanelette() to manage the list. Contains instances of the type-specific panelette subclasses:IconListPanelette, TextPanelette, ThumbnailPanelette.",
                "datatype": {
                    "type": "Array"
                }
            },
            {
                "@name": "sortPosition",
                "shortdesc": "The preferred default position of this tabbed panel in the Inspector, relative to other panels.",
                "description": "In the range [1..100]. Panels with lower values are above and to the left.",
                "datatype": {
                    "type": "Number"
                }
            },
            {
                "@name": "title",
                "shortdesc": "The title text of this panel, displayed in the tab header.",
                "description": "See also displayTitle.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "visible",
                "@rwaccess": "readonly",
                "shortdesc": "When true, the majority of this panel is visible on the screen.",
                "description": "When false, the panel is minimized or iconified, or most of it is positioned off the screen.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "wide",
                "shortdesc": "When true, this panel occupies the entire available horizontal space.",
                "description": "When false, the default, the panel occupies one third of available space.",
                "datatype": {
                    "type": "Boolean"
                }
            }
        ],
        "methods": [
            {
                "@name": "registerPanelette",
                "shortdesc": "Registers a script-defined panelette as a member of this panel, adding it to panelettes list.",
                "description": "Returns true on success, false if the panelette is already registered or the operation fails.",
                "parameters": {
                    "parameter": {
                        "@name": "panelette",
                        "shortdesc": "The panelette object.",
                        "description": "One of the type-specific panelette subclasses:IconListPanelette, TextPanelette, ThumbnailPanelette.",
                        "datatype": {
                            "type": "Object"
                        }
                    }
                },
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "unregisterPanelette",
                "shortdesc": "Removes a member panelette from this panel.",
                "parameters": {
                    "parameter": {
                        "@name": "panelette",
                        "shortdesc": "The panelette object.",
                        "datatype": {
                            "type": "Object"
                        }
                    }
                }
            }
        ]
    },
    "Preferences": {
        "class": "Preferences",
        "superClass": null,
        "shortdesc": "Allows access to the Adobe Bridge application preferences.",
        "elementCount": 1,
        "propertyCount": 30,
        "methodCount": 3,
        "properties": [
            {
                "@name": "extraMetadata",
                "shortdesc": "A set of metadata properties to be displayed beneath a thumbnail icon.",
                "description": {
                    "br": [
                        "",
                        ""
                    ],
                    "@": "Sets this style for a specific Content pane view. Does not change the related global preference, and the changes do not persist beyond the current view.\n\t\t\t\tAn array of up to four string values; the first value in the array sets the first line of additional metadata, the second value sets the second line, and so on. An array value of undefined turns off the display of metadata for that line. Allowed values are: author, bit-depth, color-mode, color-profile, copyright, date-created, date-modified, description, dimensions, document-creator, document-kind, exposure, file-size, focal-length, keywords, label, opening-application"
                },
                "datatype": {
                    "type": "Array"
                }
            },
            {
                "@name": "showName",
                "shortdesc": "Whether to show thumbnail name beneath thumbnail icons.",
                "description": {
                    "br": [
                        "",
                        ""
                    ],
                    "@": "Sets this style for a specific Content pane view. Does not change the related global preference, and the changes do not persist beyond the current view.\n\t\t\t\tWhen true, the names of thumbnails are displayed beneath the icon in this view. When false, they are not. (This is overridden by the document.showThumbnailName value.)"
                },
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "AccentColor",
                "shortdesc": "In the General page of the Preferences dialog, the preference associated with the AccentColor menu.",
                "description": "One of: System, Crystal, Obsidian, Sapphire, Lapis Lazuli, Amber, Ruby, Emerald.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "AutoExportCaches",
                "shortdesc": "In the Cache page of the Preferences dialog, the preference associated with Cache choices.",
                "description": "True when Automatically Export Caches to Folders When Possible is selected. Default false.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "CacheDirectory",
                "shortdesc": "In the Cache page of the Preferences dialog, the preference associated with the Cache Location.",
                "description": "The location of the centralized cache. A folder path, specified as a string or ExtendScript Folder object.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "Favorites",
                "shortdesc": "In the General page of the Preferences dialog, the preference associated with Favorite Items choices.",
                "description": "A collection of Bridge URI strings for checked nodes, which are displayed in the Favorites palette.",
                "datatype": {
                    "type": "Array"
                }
            },
            {
                "@name": "FavoritesDisplayNames",
                "shortdesc": "A collection of localized display names for the nodes displayed in the Favorites palette.",
                "description": "Each member corresponds to URI member of the Favorites array.",
                "datatype": {
                    "type": "Array"
                }
            },
            {
                "@name": "FileSize",
                "shortdesc": "In the Thumbnails page of the Preferences dialog, the preference associated with \"Do not process files larger than: nnn MB\".",
                "description": "Default 1000.",
                "datatype": {
                    "type": "Number"
                }
            },
            {
                "@name": "HideEmptyFields",
                "shortdesc": "In the Metadata page of the Preferences dialog, the preference associated with the \"Hide Empty Fields\" checkbox.",
                "description": "True when checked. Default true.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "HideUnknownOpeners",
                "shortdesc": "In the File Type Associations page of the Preferences dialog, the preference associated with the \"Hide Undefined File Associations\" checkbox.",
                "description": "True when checked. Default false.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "ImageBackdrop",
                "shortdesc": "In the General page of the Preferences dialog, the preference associated with the \"Image Backdrop\" slide bar.",
                "description": "Sets background of the Content pane.The background color is set in the range of 0 - 255, where 0 is black, and 255 is white. Default 186.",
                "datatype": {
                    "type": "Number"
                }
            },
            {
                "@name": "Keyboard",
                "shortdesc": "In the Advanced page of the Preferences dialog, the preference associated with Keyboard.",
                "description": "Takes effect on restart.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "Label1",
                "shortdesc": "In the Labels page of the Preferences dialog, the preferences associated with the label colors and their keyboard shortcuts.",
                "description": "These preferences control the choices that appear in the Label menu in the menu bar and in the right-click context menu for image thumbnails.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "Label2",
                "shortdesc": "In the Labels page of the Preferences dialog, the preferences associated with the label colors and their keyboard shortcuts.",
                "description": "These preferences control the choices that appear in the Label menu in the menu bar and in the right-click context menu for image thumbnails.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "Label3",
                "shortdesc": "In the Labels page of the Preferences dialog, the preferences associated with the label colors and their keyboard shortcuts.",
                "description": "These preferences control the choices that appear in the Label menu in the menu bar and in the right-click context menu for image thumbnails.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "Label4",
                "shortdesc": "In the Labels page of the Preferences dialog, the preferences associated with the label colors and their keyboard shortcuts.",
                "description": "These preferences control the choices that appear in the Label menu in the menu bar and in the right-click context menu for image thumbnails.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "Label5",
                "shortdesc": "In the Labels page of the Preferences dialog, the preferences associated with the label colors and their keyboard shortcuts.",
                "description": "These preferences control the choices that appear in the Label menu in the menu bar and in the right-click context menu for image thumbnails.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "LabelCtrlKey",
                "shortdesc": "In the Labels page of the Preferences dialog, the preference associated with the \"Require the Control Key to Apply Labels and Ratings\" checkbox.",
                "description": "True when checked. Default true.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "Language",
                "shortdesc": "In the Advanced page of the Preferences dialog, the preference associated with Language.",
                "description": "",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "MRUCount",
                "shortdesc": "In the General page of the Preferences dialog, the preference associated with \"Number of Recent Items to Display\".",
                "description": "",
                "datatype": {
                    "type": "Number"
                }
            },
            {
                "@name": "MRUFolders",
                "shortdesc": "The set of absolute path strings for recently-visited folders, displayed when the MRUCount is greater than 0.",
                "description": "",
                "datatype": {
                    "type": "Array"
                }
            },
            {
                "@name": "PermittedStartupScripts",
                "shortdesc": "In the Startup Scripts the Preferences dialog, the script names associated with selected script checkboxes.",
                "description": "This is the set of scripts that load automatically on startup.",
                "datatype": {
                    "type": "Array"
                }
            },
            {
                "@name": "ShowCameraRawInterface",
                "shortdesc": "In the General page of the Preferences dialog, the preference associated with the \"Double-Click Edits Camera Raw Settings in Bridge\" checkbox.",
                "description": "True when checked. Default false.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "ShowPlacard",
                "shortdesc": "In the Metadata page of the Preferences dialog, the preference associated with the \"Show Metadata Placard\" checkbox.",
                "description": "True when checked. Default is true.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "ShowTooltips",
                "shortdesc": "In the Thumbnails page of the Preferences dialog, the preference associated with \"Show Tooltips\".",
                "description": "True when checked. Default is false.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "StackFrameRate",
                "shortdesc": "In the Playback page of the Preferences dialog, the preference associated with \"Stack Playback Frame Rate\".",
                "description": "One of: 2, 4, 6, 10, 12, 15, 24, 25, 30, 50, 60.",
                "datatype": {
                    "type": "Number"
                }
            },
            {
                "@name": "StartupScriptsShouldLoad",
                "shortdesc": "In the Startup Scripts the Preferences dialog, setting to true is the equivalent of clicking Enable All, setting to false is the equivalent of clicking Disable All.",
                "description": "",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "ThumbnailQuality",
                "shortdesc": "The quality of thumbnail image to generate.",
                "description": "One of: Draft: Quick Thumbnails, Proof: High Quality Thumbnails, DraftToProof: Convert To Hight Quality When Previewed",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "UIBrightness",
                "shortdesc": "In the General page of the Preferences dialog, the preference associated with the \"User Interface Brightness\" slide bar.",
                "description": "Sets background of all parts of the browser window except the Content pane. The background color is set in the range of [0..255], where 0 is black, and 255 is white.",
                "datatype": {
                    "type": "Number"
                }
            },
            {
                "@name": "UseSoftwareRendering",
                "shortdesc": "In the Advanced page of the Preferences dialog, the preference associated with the \"Use Software Rendering\" checkbox.",
                "description": "True when checked. Takes effect on restart. When true, hardware acceleration is disabled for the Preview panel and slideshows. Default is false.",
                "datatype": {
                    "type": "Boolean"
                }
            }
        ],
        "methods": [
            {
                "@name": "clear",
                "shortdesc": "Removes script-created keys and values from the Adobe Bridge preferences, or resets preferences.",
                "description": {
                    "li": [
                        "If one or more preference names is passed, each is removed. If you try to access the property for a preference that has been removed, the property returns undefined.",
                        "If no preference names are passed, removes all script-defined preferences, and resets all Adobe Bridge application preferences to their default values."
                    ]
                },
                "parameters": {
                    "parameter": {
                        "@name": "name",
                        "@optional": "true",
                        "shortdesc": "One or more names of preferences to remove."
                    }
                }
            },
            {
                "@name": "resetWarningDialogs",
                "shortdesc": "Resets \"Do not show again\" settings to false for all warning dialogs.",
                "description": "Corresponds to the Reset button in the General page of the Preferences dialog."
            },
            {
                "@name": "resetFileAssociations",
                "shortdesc": "Resets file type associations to their default values.",
                "description": "Corresponds to the \"Reset to Default Associatetions\" button in the File Type Associations page of the Preferences dialog."
            }
        ]
    },
    "PreferencesDialog": {
        "class": "PreferencesDialog",
        "superClass": null,
        "shortdesc": null,
        "elementCount": 1,
        "propertyCount": 0,
        "methodCount": 2,
        "properties": [],
        "methods": [
            {
                "@name": "addPanel",
                "shortdesc": "Creates and returns a ScriptUI Window object to be used as a new page in the Preferences dialog.",
                "description": "You can add ScriptUI controls to the window to allow users to access and set preferences that you provide. Returns the new Window object.",
                "parameters": {
                    "parameter": {
                        "@name": "name",
                        "shortdesc": "The name of the new page, used as the title of the new Window object.",
                        "datatype": {
                            "type": "String"
                        }
                    }
                }
            },
            {
                "@name": "close",
                "shortdesc": "Closes the Preferences dialog.",
                "description": "Returns undefined.",
                "parameters": {
                    "parameter": {
                        "@name": "isOK",
                        "shortdesc": "Pass true to simulate the user clicking OK to close the dialog, false for Cancel.",
                        "datatype": {
                            "type": "Boolean"
                        }
                    }
                }
            }
        ]
    },
    "Favorites": {
        "class": "Favorites",
        "superClass": null,
        "shortdesc": "Represents the navigation nodes that appear in the Favorites pane in the Adobe Bridge browser.",
        "elementCount": 1,
        "propertyCount": 1,
        "methodCount": 10,
        "properties": [
            {
                "@name": "section",
                "shortdesc": "Sets the section of the Favorites pane for the next node operations in the immediate scope.",
                "description": {
                    "li": [
                        "standard (default): The top section of the Favorites pane containing predefined nodes.",
                        "user: The bottom section of the Favorites pane containing user-selected nodes."
                    ],
                    "@": "One of:"
                },
                "datatype": {
                    "type": "String"
                }
            }
        ],
        "methods": [
            {
                "@name": "add",
                "shortdesc": "Appends a new node into the current section of the favorites array.",
                "description": {
                    "br": [
                        "",
                        ""
                    ],
                    "@": "Updates the Favorites pane to show the new node at the root level.Returns true on success. If the referenced node is already in the array, returns false and does not change the array."
                },
                "parameters": {
                    "parameter": {
                        "@name": "thumbnail",
                        "shortdesc": "The Thumbnail object for the node to add.",
                        "datatype": {
                            "type": {
                                "@href": "#\/Thumbnail",
                                "@": "Thumbnail"
                            }
                        }
                    }
                },
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "addChild",
                "shortdesc": "Inserts a new node into favorites.",
                "description": {
                    "br": [
                        "",
                        ""
                    ],
                    "@": "Inserts a new subnode into the current section of the favorites array, and updates the Favorites pane to show the new node below its parent when the parent is selected. Returns true on success. If the specified parent node is not in favorites array, returns false and does not add the subnode."
                },
                "parameters": {
                    "parameter": [
                        {
                            "@name": "parent",
                            "shortdesc": "The Thumbnail object for the parent node.",
                            "description": "Must be a root node in the favorites array.",
                            "datatype": {
                                "type": {
                                    "@href": "#\/Thumbnail",
                                    "@": "Thumbnail"
                                }
                            }
                        },
                        {
                            "@name": "child",
                            "shortdesc": "The Thumbnail object for the new subnode.",
                            "description": "This node can be, but does not need not to be a child of the parent Thumbnail. It is not added to the parent\u2019s children array.",
                            "datatype": {
                                "type": {
                                    "@href": "#\/Thumbnail",
                                    "@": "Thumbnail"
                                }
                            }
                        }
                    ]
                },
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "associateWorkspace",
                "shortdesc": "Associates a named workspace with a thumbnail in the standard section of the Favorites pane.",
                "description": {
                    "br": [
                        "",
                        ""
                    ],
                    "@": "When the user clicks this thumbnail, this workspace becomes current.Returns true on success. If the thumbnail is in the user section, or is not in the Favorites pane, returns false and does nothing."
                },
                "parameters": {
                    "parameter": [
                        {
                            "@name": "thumb",
                            "shortdesc": "The Thumbnail object.",
                            "datatype": {
                                "type": {
                                    "@href": "#\/Thumbnail",
                                    "@": "Thumbnail"
                                }
                            }
                        },
                        {
                            "@name": "workspace",
                            "shortdesc": "The workspace name.",
                            "description": "See  Document.workspace.",
                            "datatype": {
                                "type": "String"
                            }
                        }
                    ]
                },
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "clearAll",
                "shortdesc": "Deletes all the nodes from the current section of the favorites array and updates the Favorites pane."
            },
            {
                "@name": "contains",
                "shortdesc": "Reports whether the list of favorites currently contains a specific node, either in the standard or user sections.",
                "description": "Returns true if the node is in the current favorites list, false otherwise.",
                "parameters": {
                    "parameter": {
                        "@name": "uri",
                        "shortdesc": "The Bridge URI string for the node.",
                        "datatype": {
                            "type": "String"
                        }
                    }
                },
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "disable",
                "shortdesc": "Disables a node from the standard section.",
                "description": "Removes the node from display in the browser, but leaves it as an unchecked option in the General page of the Preferences dialog.",
                "parameters": {
                    "parameter": {
                        "@name": "uri",
                        "shortdesc": "The Bridge URI string for the node.",
                        "datatype": {
                            "type": "String"
                        }
                    }
                }
            },
            {
                "@name": "enable",
                "shortdesc": "Enables a node from the standard section.",
                "description": "Displays the node in the browser, and checks the corresponding option in the General page of the Preferences dialog.",
                "parameters": {
                    "parameter": {
                        "@name": "uri",
                        "shortdesc": "The Bridge URI string for the node.",
                        "datatype": {
                            "type": "String"
                        }
                    }
                }
            },
            {
                "@name": "getChildren",
                "shortdesc": "Retrieves the children of a node in the Standard section of the Favorites pane.",
                "description": {
                    "br": [
                        "",
                        ""
                    ],
                    "@": "The node can be in either the enabled or disabled state. Returns an array of URI strings for the child nodes, or undefined if the node is not in the Standard section or not in the Favorites pane."
                },
                "parameters": {
                    "parameter": {
                        "@name": "uri",
                        "shortdesc": "The Bridge URI string for the node.",
                        "datatype": {
                            "type": "String"
                        }
                    }
                },
                "datatype": {
                    "type": "Array"
                }
            },
            {
                "@name": "insert",
                "shortdesc": "Inserts a new node into the current section of the favorites array.",
                "description": {
                    "br": [
                        "",
                        ""
                    ],
                    "@": "Updates the Favorites pane to show the new node at the root level.Returns true on success. If the referenced node is already in the array, returns false and does not change the array."
                },
                "parameters": {
                    "parameter": [
                        {
                            "@name": "thumbnail",
                            "shortdesc": "The Thumbnail object for the node to add.",
                            "datatype": {
                                "type": {
                                    "@href": "#\/Thumbnail",
                                    "@": "Thumbnail"
                                }
                            }
                        },
                        {
                            "@name": "index",
                            "@optional": "true",
                            "shortdesc": "A 0-based index into the existing node array at which to insert the new node, or an object reference for a node in the existing node array.",
                            "description": "The node is inserted before this existing node. If the value is beyond the end, is not in the existing node array, or is not supplied, the new node is appended to the end of the array."
                        }
                    ]
                },
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "remove",
                "shortdesc": "Removes the specified script-defined node from the favorites array and updates the Favorites pane.",
                "description": "Scripts cannot access predefined nodes.",
                "parameters": {
                    "parameter": {
                        "@name": "thumbnail",
                        "shortdesc": "The Thumbnail object for the node to remove.",
                        "datatype": {
                            "type": {
                                "@href": "#\/Thumbnail",
                                "@": "Thumbnail"
                            }
                        }
                    }
                },
                "datatype": {
                    "type": "Boolean"
                }
            }
        ]
    },
    "SearchCriteria": {
        "class": "SearchCriteria",
        "superClass": null,
        "shortdesc": "Defines one possible search criterion for a search among handled nodes.",
        "elementCount": 1,
        "propertyCount": 6,
        "methodCount": 0,
        "properties": [
            {
                "@name": "operands",
                "shortdesc": "One or more Operand objects used to populate the drop-down list for the right-side field of this line in the Find dialog.",
                "description": "This allows you to specify a closed list of possible values to match against in the search field.",
                "datatype": {
                    "type": "Array"
                }
            },
            {
                "@name": "operandType",
                "shortdesc": "The data type of the operand values.",
                "description": "Determines the description that appears in the operand field in the absence of a closed list of operands. The description is the expected format for Date values, otherwise generally \"Enter text\". One of: String, Number, Float, Date, Boolean",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "operatorTypesToDisable",
                "shortdesc": "A set of predefined operator strings that are not displayed for selection.",
                "description": "An array of strings. Predefined operators are: exists, doesNotExist, equals, doesNotEqual, less, lessThanOrEqual, greater, greaterThanOrEqual, contains, doesNotContain, startsWith, endsWith",
                "datatype": {
                    "type": "Array"
                }
            },
            {
                "@name": "searchField",
                "shortdesc": "A search field, the name of some property associated with the search node.",
                "description": "Typically a metadata property or a member of an Infoset associated with handled nodes. The value of the selected search field is compared to the selected operand, using the selected comparison operator.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "searchFieldDisplay",
                "shortdesc": "A localized display name for the search field, displayed in the Find dialog. .",
                "description": "Default is the searchField value",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "searchFieldSort",
                "shortdesc": "Whether searchfield display names are sorted alphabetically in the Find dialog.",
                "description": "When true, search field display names are sorted alphabetically. Default is false.",
                "datatype": {
                    "type": "Boolean"
                }
            }
        ],
        "methods": []
    },
    "SearchDefinition": {
        "class": "SearchDefinition",
        "superClass": null,
        "shortdesc": "Defines a set of search criteria for a search amond handled nodes.",
        "elementCount": 1,
        "propertyCount": 5,
        "methodCount": 0,
        "properties": [
            {
                "@name": "criteriaList",
                "shortdesc": "A collection of possible SearchCriteria objects to use for this search.",
                "description": "Used to populate the Criteria box in the Find dialog.",
                "datatype": {
                    "type": "Array"
                }
            },
            {
                "@name": "defaultResultsLimit",
                "shortdesc": "If non-zero, the Find dialog offers choices to limit the result set to certain sizes, and the choice defaults to this value.",
                "datatype": {
                    "type": "Number"
                }
            },
            {
                "@name": "ranks",
                "shortdesc": "A set of Rank objects to use only if the search can limit results.",
                "datatype": {
                    "type": "Array"
                }
            },
            {
                "@name": "scopeSpecifiers",
                "shortdesc": "A set of scopes used to extend or limit the scope of the search.",
                "description": "One or more Scope objects. The Results box of the Find dialog displays a check box for each scope modifier.",
                "datatype": {
                    "type": "Array"
                }
            },
            {
                "@name": "quickSearchMenuItems",
                "datatype": {
                    "type": "Array"
                }
            }
        ],
        "methods": []
    },
    "SearchDetails": {
        "class": "SearchDetails",
        "superClass": null,
        "shortdesc": "Utility class for searches in handled nodes.",
        "elementCount": 1,
        "propertyCount": 2,
        "methodCount": 0,
        "properties": [
            {
                "@name": "searchSpecification",
                "shortdesc": "A SearchSpecification object that was used to generate this search result.",
                "datatype": {
                    "type": {
                        "@href": "#\/SearchSpecification",
                        "@": "SearchSpecification"
                    }
                }
            },
            {
                "@name": "searchTargetUri",
                "shortdesc": "The Bridge URI for the search target node that was used to generate this search result.",
                "datatype": {
                    "type": "String"
                }
            }
        ],
        "methods": []
    },
    "SearchCondition": {
        "class": "SearchCondition",
        "superClass": null,
        "shortdesc": "Defines a specific condition that must be met for a handled node to match a search.",
        "elementCount": 1,
        "propertyCount": 3,
        "methodCount": 0,
        "properties": [
            {
                "@name": "searchField",
                "shortdesc": "The name of some property associated with the search node.",
                "description": "Typically a metadata property or a member of an Infoset object associated with handled nodes. This corresponds to the left side of a line in the Criteria box of the Find dialog. Read\/write.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "operand",
                "shortdesc": "The value to compare against the value of the search field in each node.",
                "description": "This corresponds to the right side of a line in the Criteria box of the Find dialog.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "operatorType",
                "shortdesc": "The comparison operator for the search.",
                "description": "This corresponds to the middle field of a line in the Criteria box of the Find dialog. One of: exists , doesNotExist, equals, notEquals, less, lessThanOrEqual, greater, greaterThanOrEqual, contains, doesNotContain, startsWith, endsWith",
                "datatype": {
                    "type": "String"
                }
            }
        ],
        "methods": []
    },
    "SearchSpecification": {
        "class": "SearchSpecification",
        "superClass": null,
        "shortdesc": "Defines a specific search among handled nodes.",
        "elementCount": 1,
        "propertyCount": 8,
        "methodCount": 0,
        "properties": [
            {
                "@name": "conditionList",
                "shortdesc": "A collection of SearchCondition objects to use for this search.",
                "description": "Each object specifies a search field, which identifies a property associated with a node, a comparison operator, such as \"exists\" or \"equals\", and an operand, the value to compare with the search field value (if the operator requires a comparison value).",
                "datatype": {
                    "type": "Array"
                }
            },
            {
                "@name": "conjunction",
                "shortdesc": "The search conjunction, and or or, as selected in the Find dialog.",
                "description": "When it is and, all conditions must succeed for a node to match. When it is or, the success of any condition results in a match.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "maximumResults",
                "shortdesc": "The maximum number of result nodes to return from the search.",
                "description": "The search halts after this number of matches are found.",
                "datatype": {
                    "type": "Number"
                }
            },
            {
                "@name": "rankField",
                "shortdesc": "The name of a Rank object, as specified for a SearchDefinition object.",
                "description": "If the number of results are limited, results are sorted on the named attribute value, and the maximum number of result nodes with the highest rank values are returned. \nThe returned results are again sorted by the view's sorting criteria upon display.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "rankOrdering",
                "shortdesc": "The ordering style, one of ascending (the default) or descending.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "scopeSpecifiers",
                "shortdesc": "One or more Scope object name strings, as specified for a SearchDefinition object.",
                "description": "Each scope modifier can expand or limit the original scope defined by the target node. The scope value and usage is defined entirely by your ExtensionModel.getSearchDefinition() method implementation.",
                "datatype": {
                    "type": "Array"
                }
            },
            {
                "@name": "quickSearchItem",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "quickSearchValue",
                "datatype": {
                    "type": "String"
                }
            }
        ],
        "methods": []
    },
    "Operand": {
        "class": "Operand",
        "superClass": null,
        "shortdesc": "A helper object for node searches.",
        "elementCount": 1,
        "propertyCount": 2,
        "methodCount": 0,
        "properties": [
            {
                "@name": "valueName",
                "shortdesc": "The operand value.",
                "description": "A possible value of SearchCriteria.searchField.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "displayName",
                "shortdesc": "The localized display name for the corresponding field in the Find dialog.",
                "description": "If not supplied, the valueName is used.",
                "datatype": {
                    "type": "String"
                }
            }
        ],
        "methods": []
    },
    "Rank": {
        "class": "Rank",
        "superClass": null,
        "shortdesc": "A helper object for node searches.",
        "elementCount": 1,
        "propertyCount": 2,
        "methodCount": 0,
        "properties": [
            {
                "@name": "valueName",
                "shortdesc": "The property name for the ranking property.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "displayName",
                "shortdesc": "The localized display name for the corresponding field in the Find dialog.",
                "description": "If not supplied, the valueName is used.",
                "datatype": {
                    "type": "String"
                }
            }
        ],
        "methods": []
    },
    "Scope": {
        "class": "Scope",
        "superClass": null,
        "shortdesc": "A helper object for node searches.",
        "elementCount": 1,
        "propertyCount": 2,
        "methodCount": 0,
        "properties": [
            {
                "@name": "valueName",
                "shortdesc": "The unique identifying name for the scope modifier.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "displayName",
                "shortdesc": "The localized display name for the corresponding field in the Find dialog.",
                "description": "If not supplied, the valueName is used.",
                "datatype": {
                    "type": "String"
                }
            }
        ],
        "methods": []
    },
    "QuickSearchItem": {
        "class": "QuickSearchItem",
        "superClass": null,
        "shortdesc": null,
        "elementCount": 1,
        "propertyCount": 2,
        "methodCount": 0,
        "properties": [
            {
                "@name": "valueName",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "displayName",
                "datatype": {
                    "type": "String"
                }
            }
        ],
        "methods": []
    },
    "SortCriterion": {
        "class": "SortCriterion",
        "superClass": null,
        "shortdesc": "Provides a way for Adobe Bridge extensions to specify how handled nodes can be sorted.",
        "elementCount": 1,
        "propertyCount": 6,
        "methodCount": 0,
        "properties": [
            {
                "@name": "displayName",
                "shortdesc": "A localized display name for this sorting criterion.",
                "description": "Used as a label for the Sort menu and Filter palette flyout menu. If not assigned, name is displayed.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "infosetMember",
                "shortdesc": "The name of an Infoset property by which to sort.",
                "description": "A string in the form infosetName.memberName, as defined by an Infoset and an InfosetMemberDescription object.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "name",
                "shortdesc": "The unique identifying name of this sort criterion.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "type",
                "shortdesc": "The data type of the criterion property.",
                "description": "One of: date, string, number, dimensions, rating, resolution, colorProfile",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "xmpNamespace",
                "shortdesc": "The namespace portion of an XMP property by which to sort.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "xmpUri",
                "shortdesc": "The URI key portion of an XMP property by which to sort.",
                "datatype": {
                    "type": "String"
                }
            }
        ],
        "methods": []
    },
    "TabbedPalette": {
        "class": "TabbedPalette",
        "superClass": null,
        "shortdesc": "Represents a  tabbed palette in the Adobe Bridge browser window.",
        "elementCount": 1,
        "propertyCount": 7,
        "methodCount": 2,
        "properties": [
            {
                "@name": "content",
                "@rwaccess": "readonly",
                "shortdesc": "When type is script, the ScriptUI Window object to display.",
                "datatype": {
                    "type": "Object"
                }
            },
            {
                "@name": "title",
                "shortdesc": "The localized string to display as the palette title.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "id",
                "shortdesc": "A non-localized unique identifier for the palette.",
                "description": "The identifiers for the built-in palettes are:favoritesTab, foldersTab, filterTab, metadataTab, keywordsTab, contentTab, cinemaPreviewTab, inspectorTab",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "showMenuItem",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "type",
                "@rwaccess": "readonly",
                "shortdesc": "The type of content displayed in the palette; script (ScriptUI) or web (HTML).",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "url",
                "shortdesc": "When type is web, the path to the page to display.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "visible",
                "shortdesc": "When true, this palette is visible, when false it is hidden.",
                "datatype": {
                    "type": "Boolean"
                }
            }
        ],
        "methods": [
            {
                "@name": "remove",
                "shortdesc": "Removes this palette from the list of available palettes and destroys it."
            },
            {
                "@name": "setLocation",
                "shortdesc": "Moves this palette to a specific docking location in the browser.",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "paletteColumn",
                            "shortdesc": "The horizontal location of the palette in the browser.",
                            "description": "One of \"left\" (the leftmost column), \"center\" (the middle column), or \"right\" (the rightmost column).",
                            "datatype": {
                                "type": "String"
                            }
                        },
                        {
                            "@name": "paletteRow",
                            "@optional": "true",
                            "shortdesc": "The vertical location of the palette in the browser.",
                            "description": {
                                "li": [
                                    "\"top\": The topmost row (the default)",
                                    "\"middle\": The middle row (or close to the middle, if there are an even number)",
                                    "\"bottom\": The bottommost row"
                                ],
                                "br": "",
                                "@": "The number of rows can vary according to the current workspace configuration. This function cannot create new rows. A string or number, one of: \n\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\tCan be a number, the 0-based index of the row, where 0 is the topmost row. If the index is out of range, the palette is placed in the closest existing row."
                            },
                            "datatype": [
                                {
                                    "type": "String"
                                },
                                {
                                    "type": "Number"
                                }
                            ]
                        }
                    ]
                }
            }
        ]
    }
}