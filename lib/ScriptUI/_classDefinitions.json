{
    "ScriptUI": {
        "class": "ScriptUI",
        "superClass": null,
        "shortdesc": "A global class containing central information about ScriptUI. Not instantiable.",
        "elementCount": 1,
        "propertyCount": 9,
        "methodCount": 3,
        "properties": [
            {
                "@name": "applicationFonts",
                "@rwaccess": "readonly",
                "shortdesc": "The font constants defined by the host application.",
                "datatype": {
                    "type": "Object"
                }
            },
            {
                "@name": "compatibility",
                "@rwaccess": "readonly",
                "shortdesc": "An object whose properties are the names of compatability modes supported by the host application.",
                "description": "The presence of ScriptUI.compatability.su1PanelCoordinates means that the application allows backward compatibility with the coordinate system of Panel elements in ScriptUI version 1.",
                "datatype": {
                    "type": "Object"
                }
            },
            {
                "@name": "coreVersion",
                "@rwaccess": "readonly",
                "shortdesc": "A string containing the internal version number of the ScriptUI module.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "environment",
                "@rwaccess": "readonly",
                "shortdesc": "An object whose properties define attributes of the environment in which ScriptUI operates.",
                "datatype": {
                    "type": {
                        "@href": "#\/Environment",
                        "@": "Environment"
                    }
                }
            },
            {
                "@name": "events",
                "@rwaccess": "readonly",
                "shortdesc": "An object whose properties and methods provide access to objects used in the ScriptUI event system.",
                "description": "It contains one function, createEvent(), which allows you to create event objects in order to simulate user-interaction event",
                "datatype": {
                    "type": {
                        "@href": "#\/Events",
                        "@": "Events"
                    }
                }
            },
            {
                "@name": "frameworkName",
                "@rwaccess": "readonly",
                "shortdesc": "A string containing the name of the UI component framework with which this version of ScriptUI is compatible.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "version",
                "@rwaccess": "readonly",
                "shortdesc": "A string containing the version number of the ScriptUI component framework",
                "datatype": {
                    "type": "Any"
                }
            },
            {
                "@name": "Alignment",
                "@rwaccess": "readonly",
                "shortdesc": "Collects the enumerated values that can be used in the alignment and alignChildren properties of controls and containers.",
                "description": "Predefined alignment values are: TOP, BOTTOM, LEFT, RIGHT, FILL, CENTER",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "FontStyle",
                "@rwaccess": "readonly",
                "shortdesc": "Collects the enumerated values that can be used as the style argument to the ;ScriptUI.newFont() ;method.",
                "description": "Predefined styles are REGULAR, BOLD, ITALIC, BOLDITALIC.",
                "datatype": {
                    "type": "Object"
                }
            }
        ],
        "methods": [
            {
                "@name": "getResourceText",
                "shortdesc": "Finds and returns the resource for a given text string from the host application's resource data.",
                "description": "If no string resource matches the given text, the text itself is returned.",
                "parameters": {
                    "parameter": {
                        "@name": "text",
                        "shortdesc": "The text to match.",
                        "datatype": {
                            "type": "String"
                        }
                    }
                },
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "newImage",
                "shortdesc": "Loads a new image from resources or disk files into an image object.",
                "description": "Creates a new global image object for use in controls that can display images, loading the associated images from the specified resources or image files.",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "normal",
                            "shortdesc": "The resource name or the disk file path to the image used for the normal state.",
                            "datatype": {
                                "type": "String"
                            }
                        },
                        {
                            "@name": "disabled",
                            "@optional": "true",
                            "shortdesc": "The resource name, or the disk file path to the image used for the disabled state.",
                            "datatype": {
                                "type": "String"
                            }
                        },
                        {
                            "@name": "pressed",
                            "@optional": "true",
                            "shortdesc": "The resource name, or the file-system path to the image used for the pressed state.",
                            "datatype": {
                                "type": "String"
                            }
                        },
                        {
                            "@name": "rollover",
                            "@optional": "true",
                            "shortdesc": "The resource name, or the file-system path to the image used for the rollover state.",
                            "datatype": {
                                "type": "String"
                            }
                        }
                    ]
                },
                "datatype": {
                    "type": {
                        "@href": "#\/ScriptUIImage",
                        "@": "ScriptUIImage"
                    }
                }
            },
            {
                "@name": "newFont",
                "shortdesc": "Creates a new font object for use in text controls and titles.",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "name",
                            "shortdesc": "The font name, or the font family name.",
                            "datatype": {
                                "type": "String"
                            }
                        },
                        {
                            "@name": "style",
                            "shortdesc": "The font style; can be string, or one of the values of ;ScriptUI.FontStyle.",
                            "datatype": [
                                {
                                    "type": "String"
                                },
                                {
                                    "type": "Number"
                                }
                            ]
                        },
                        {
                            "@name": "size",
                            "shortdesc": "The font size in points.",
                            "datatype": {
                                "type": "Number"
                            }
                        }
                    ]
                },
                "datatype": {
                    "type": {
                        "@href": "#\/ScriptUIFont",
                        "@": "ScriptUIFont"
                    }
                }
            }
        ]
    },
    "Window": {
        "class": "Window",
        "superClass": null,
        "shortdesc": "The instance represents a top-level window or dialog box, which contains user-interface elements.",
        "elementCount": 4,
        "propertyCount": 38,
        "methodCount": 14,
        "properties": [
            {
                "@name": "frameworkName",
                "@rwaccess": "readonly",
                "shortdesc": "Deprecated. Use ;ScriptUI.frameworkName ;instead.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "version",
                "@rwaccess": "readonly",
                "shortdesc": "Deprecated. Use ;ScriptUI.version ;instead.",
                "datatype": {
                    "type": "Any"
                }
            },
            {
                "@name": "graphics",
                "@rwaccess": "readonly",
                "shortdesc": "The graphics object that can be used to customize the window\u2019s appearance, in response to the onDraw event.",
                "datatype": {
                    "type": {
                        "@href": "#\/ScriptUIGraphics",
                        "@": "ScriptUIGraphics"
                    }
                }
            },
            {
                "@name": "visible",
                "shortdesc": "When true, the element is shown, when false it is hidden.",
                "description": "When a container is hidden, its children are also hidden, but they retain their own visibility values, and are shown or hidden accordingly when the parent is next shown.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "bounds",
                "shortdesc": "The bounds of the window's drawable area, excluding the frame, in screen coordinates.",
                "datatype": {
                    "type": {
                        "@href": "#\/Bounds",
                        "@": "Bounds"
                    }
                }
            },
            {
                "@name": "frameBounds",
                "@rwaccess": "readonly",
                "shortdesc": "The bounds of the window frame in screen coordinates.",
                "description": "The frame consists of the title bar and borders that enclose the content region of a window, depending on the windowing system.",
                "datatype": {
                    "type": {
                        "@href": "#\/Bounds",
                        "@": "Bounds"
                    }
                }
            },
            {
                "@name": "frameLocation",
                "shortdesc": "The top left corner of the window frame in screen coordinates.",
                "description": "The same as [frameBounds.x, frameBounds.y]. Set this value to move the window frame to the specified location on the screen. The ;frameBounds ;value changes accordingly.",
                "datatype": {
                    "type": {
                        "@href": "#\/Point",
                        "@": "Point"
                    }
                }
            },
            {
                "@name": "frameSize",
                "@rwaccess": "readonly",
                "shortdesc": "The size and location of the window's frame in screen coordinates.",
                "datatype": {
                    "type": {
                        "@href": "#\/Dimension",
                        "@": "Dimension"
                    }
                }
            },
            {
                "@name": "location",
                "shortdesc": "The upper left corner of the window's drawable area.",
                "description": "The same as [bounds.x, bounds.y].",
                "datatype": {
                    "type": {
                        "@href": "#\/Point",
                        "@": "Point"
                    }
                }
            },
            {
                "@name": "maximumSize",
                "shortdesc": "The largest rectangle to which the window can be resized.",
                "datatype": {
                    "type": {
                        "@href": "#\/Dimension",
                        "@": "Dimension"
                    }
                }
            },
            {
                "@name": "minimumSize",
                "shortdesc": "The smallest rectangle to which the window can be resized.",
                "datatype": {
                    "type": {
                        "@href": "#\/Dimension",
                        "@": "Dimension"
                    }
                }
            },
            {
                "@name": "preferredSize",
                "shortdesc": "The preferred size of the window.",
                "description": "Used in automatic layout and resizing. To set a specific value for only one dimension, specify the other dimension as -1.",
                "datatype": {
                    "type": {
                        "@href": "#\/Dimension",
                        "@": "Dimension"
                    }
                }
            },
            {
                "@name": "size",
                "shortdesc": "The current size and location of the content area of the window in screen coordinates.",
                "datatype": {
                    "type": {
                        "@href": "#\/Dimension",
                        "@": "Dimension"
                    }
                }
            },
            {
                "@name": "windowBounds",
                "@rwaccess": "readonly",
                "shortdesc": "The bounds of this window relative to the top-level parent window.",
                "datatype": {
                    "type": {
                        "@href": "#\/Bounds",
                        "@": "Bounds"
                    }
                }
            },
            {
                "@name": "characters",
                "shortdesc": "A number of characters for which to reserve space when calculating the preferred size of the window.",
                "datatype": {
                    "type": "Number",
                    "min": "0"
                }
            },
            {
                "@name": "justify",
                "shortdesc": "The default text justification style for child text elements.",
                "description": "One of left, center, or right. Justification only works if this value is set on creation of the element.",
                "datatype": {
                    "type": "String",
                    "value": "left"
                }
            },
            {
                "@name": "text",
                "shortdesc": "The title, label, or displayed text, a localizeable string.",
                "description": "Does not apply to containers of type group.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "active",
                "shortdesc": "Set to true to make this window active.",
                "description": {
                    "li": [
                        "A modal dialog that is visible is by definition the active dialog.",
                        "An active palette is the front-most window.",
                        "An active control is the one with focus\u2014that is, the one that accepts keystrokes, or in the case of a ;Button, be selected when the user types  Return or Enter."
                    ]
                },
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "shortcutKey",
                "shortdesc": "The keypress combination that invokes this element's ;onShortcutKey() ;callback.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "cancelElement",
                "shortdesc": "For windows of type dialog, the UI element to notify when the user presses a cancellation key combination.",
                "description": "The cancellation key is the Esc key. By default, looks for a button whose name or text is \"cancel\" (case disregarded).",
                "datatype": {
                    "type": "Object"
                }
            },
            {
                "@name": "defaultElement",
                "shortdesc": "For windows of type dialog, the UI element to notify when the user presses a Enter key.",
                "description": "By default, looks for a button whose name or text is \"ok\" (case disregarded).",
                "datatype": {
                    "type": "Object"
                }
            },
            {
                "@name": "maximized",
                "shortdesc": "True if the window is expanded.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "minimized",
                "shortdesc": "True if the window is minimized or iconified.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "alignChildren",
                "shortdesc": "Tells the layout manager how unlike-sized children of this container should be aligned within a column or row.",
                "description": "Order of creation determines which children are at the top of a column or the left of a row; the earlier a child is created, the closer it is to the top or left of its column or row. If defined, alignment for a child element overrides the alignChildren setting for the parent container. See alignment property for values.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "children",
                "@rwaccess": "readonly",
                "shortdesc": "The collection of UI elements that have been added to this container.",
                "description": "An array indexed by number or by a string containing an element's name. The length property of this array is the number of child elements for container elements, and is zero for controls.",
                "datatype": {
                    "type": "Object",
                    "array": ""
                }
            },
            {
                "@name": "layout",
                "shortdesc": "The layout manager for this container.",
                "description": "The first time a container object is made visible, ScriptUI invokes this layout manager by calling its ;layout() ;function. Default is an instance of the ;LayoutManager ;class that is automatically created when the container element is created.",
                "datatype": {
                    "type": {
                        "@href": "#\/LayoutManager",
                        "@": "LayoutManager"
                    }
                }
            },
            {
                "@name": "margins",
                "shortdesc": "The number of pixels between the edges of a container and the outermost child elements.",
                "description": "You can specify different margins for each edge of the container. The default value is based on the type of container, and is chosen to match the standard Adobe UI guidelines.",
                "datatype": {
                    "type": "Number"
                }
            },
            {
                "@name": "orientation",
                "shortdesc": "The layout orientation of children in a container.",
                "description": "Interpreted by the layout manager for the container. The default ;LayoutManager ; Object accepts the (case-insensitive) values row, column, or stack.  For window and panel, the default is column, and for group the default is row. The allowed values for the container\u2019s alignChildren and its children\u2019s alignment properties depend on the orientation.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "spacing",
                "shortdesc": "The number of pixels separating one child element from its adjacent sibling element.",
                "description": "Because each container holds only a single row or column of children, only a single spacing value is needed for a container. The default value is based on the type of container, and is chosen to match standard Adobe UI guidelines.",
                "datatype": {
                    "type": "Number"
                }
            },
            {
                "@name": "alignment",
                "shortdesc": "The alignment style for child elements of a container. If defined, this value overrides the alignChildren setting for the parent container.",
                "description": {
                    "li": [
                        "For orientation=row:top, bottom, fill",
                        "For orientation=column: left, right, fill",
                        "For orientation=stack:top, bottom, left, right, fill"
                    ],
                    "@": "This can be a single string, which indicates the alignment for the orientation specified in the parent container, or an array of two strings, indicating both the horizontal and vertical alignment (in that order). Allowed values depend on the orientation value of the parent container. They are not case sensitive."
                },
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "properties",
                "shortdesc": "An object that contains one or more creation properties of the container (properties used only when the element is created).",
                "description": {
                    "li": [
                        "resizeable: When true, the window can be resized by the user. Default is false.",
                        "su1PanelCoordinates: Photoshop only. When true, the child panels of this window automatically adjust the positions of their children for compatability with Photoshop CS (in which the vertical coordinate was measured from outside the frame). Default is false. Individual panels can override the parent window\u2019s setting.",
                        "closeButton: Bridge only. When true, the title bar includes a button to close the window, if the platform and window type allow it. When false, it does not. Default is true. Not used for dialogs.",
                        "maximizeButton: Bridge only. When true, the title bar includes a button to expand the window to its maximum size (typically, the entire screen), if the platform and window type allow it. When false, it does not. Default is false for type palette, true for type window. Not used for dialogs."
                    ],
                    "@": "Creation properties of a Window object can include:"
                },
                "datatype": {
                    "type": "Object"
                }
            },
            {
                "@name": "enabled",
                "shortdesc": "True if this element is enabled.",
                "description": "An enabled element can accept input, according to its type. When false, control elements do not accept input, and all types of elements have a dimmed appearance.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "helpTip",
                "shortdesc": "The help text that is displayed when the mouse hovers over the element.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "indent",
                "shortdesc": "The number of pixels to indent the element.",
                "datatype": {
                    "type": "Number",
                    "min": "0"
                }
            },
            {
                "@name": "parent",
                "@rwaccess": "readonly",
                "shortdesc": "The immediate parent element.",
                "datatype": {
                    "type": "Object"
                }
            },
            {
                "@name": "window",
                "@rwaccess": "readonly",
                "shortdesc": "The window that this element belongs to.",
                "datatype": {
                    "type": {
                        "@href": "#\/Window",
                        "@": "Window"
                    }
                }
            },
            {
                "@name": "type",
                "@rwaccess": "readonly",
                "shortdesc": "The element type; \"dialog\", \"palette\", or \"window\".",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "opacity",
                "shortdesc": "The opacity of the window, in the range [0..1].",
                "description": "A value of 1.0 (the default) makes the window completely opaque, a value of 0 makes it completely transparent. Intermediate values make it partially transparent to any degree.",
                "datatype": {
                    "type": "Number",
                    "value": "1.0"
                }
            }
        ],
        "methods": [
            {
                "@name": "find",
                "shortdesc": "Use this method to find an existing window.",
                "description": "This includes windows defined by ScriptUI resource strings, windows already created by a script, and windows created by the application (if the application supports this case). This function is not supported by all applications. Returns a ;Window ;object found or generated from the resource, or null if no such window or resource exists.",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "type",
                            "shortdesc": "The name of a predefined resource available to JavaScript in the current application; or the window type.",
                            "description": "If a title is specified, the type is used if more than one window with that title is found. Can be null or the empty string.",
                            "datatype": {
                                "type": "String"
                            }
                        },
                        {
                            "@name": "title",
                            "shortdesc": "The window title.",
                            "datatype": {
                                "type": "String"
                            }
                        }
                    ]
                },
                "datatype": {
                    "type": {
                        "@href": "#\/Window",
                        "@": "Window"
                    }
                }
            },
            {
                "@name": "alert",
                "shortdesc": "Displays a platform-standard dialog containing a short message and an OK button.",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "message",
                            "shortdesc": "TThe string for the displayed message.",
                            "datatype": {
                                "type": "String"
                            }
                        },
                        {
                            "@name": "title",
                            "@optional": "true",
                            "shortdesc": "A string to appear as the title of the dialog, if the platform supports a title.",
                            "description": "Ignored in Mac OS, which does not support titles for alert dialogs. The default title string is \"Script Alert\".",
                            "datatype": {
                                "type": "String"
                            }
                        },
                        {
                            "@name": "errorIcon",
                            "shortdesc": "When true, the platform-standard alert icon is replaced by the platform-standard error icon in the dialog.",
                            "description": "Ignored in Mac OS, which does not support icons for alert dialogs.",
                            "datatype": {
                                "type": "Boolean",
                                "value": "false"
                            }
                        }
                    ]
                }
            },
            {
                "@name": "confirm",
                "shortdesc": "Displays a platform-standard dialog containing a short message and two buttons labeled Yes and No.",
                "description": "Returns true if the user clicked Yes, false if the user clicked No.",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "message",
                            "shortdesc": "The string for the displayed message.",
                            "datatype": {
                                "type": "String"
                            }
                        },
                        {
                            "@name": "noAsDefault",
                            "shortdesc": "When true, the No button is the default choice, selected when the user types Enter.",
                            "description": "Default is false, meaning that Yes is the default choice.",
                            "datatype": {
                                "type": "Boolean",
                                "value": "false"
                            }
                        },
                        {
                            "@name": "title",
                            "@optional": "true",
                            "shortdesc": "A string to appear as the title of the dialog, if the platform supports a title.",
                            "description": "Ignored in Mac OS, which does not support titles for alert dialogs. The default title string is \"Script Alert\".",
                            "datatype": {
                                "type": "String"
                            }
                        }
                    ]
                },
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "prompt",
                "shortdesc": "Displays a modal dialog that returns the user\u2019s text input.",
                "description": "Returns the value of the text edit field if the user clicked OK, null if the user clicked Cancel.",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "prompt",
                            "shortdesc": "The string for the displayed message.",
                            "datatype": {
                                "type": "String"
                            }
                        },
                        {
                            "@name": "default",
                            "@optional": "true",
                            "shortdesc": "The initial value to be displayed in the text edit field.",
                            "datatype": {
                                "type": "String"
                            }
                        },
                        {
                            "@name": "title",
                            "@optional": "true",
                            "shortdesc": "A string to appear as the title of the dialog.",
                            "description": "In Windows, this appears in the window\u2019s frame; in Mac OS it appears above the message. The default title string is \"Script Prompt\".",
                            "datatype": {
                                "type": "String"
                            }
                        }
                    ]
                },
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "show",
                "shortdesc": "Makes this window visible.",
                "description": {
                    "li": "For a modal dialog, opens the dialog and does not return until the dialog is dismissed. If it is dismissed via the close() method, this method returns any result value passed to that method. Otherwise, returns 0.",
                    "@": "If an ;onShow() ;callback is defined for a window, calls that function before showing the window.When a window or container is hidden, its children are also hidden, but when it is shown again, the children retain their own visibility states."
                }
            },
            {
                "@name": "hide",
                "shortdesc": "Hides this windows.",
                "description": {
                    "li": "For a modal dialog, closes the dialog and sets its result to 0.",
                    "@": "When a window is hidden, its children are also hidden, but when it is shown again, the children retain their own visibility states."
                }
            },
            {
                "@name": "notify",
                "shortdesc": "Sends a notification message to all listeners, simulating the specified user interaction event.",
                "parameters": {
                    "parameter": {
                        "@name": "eventName",
                        "@optional": "true",
                        "shortdesc": "The event name; if omitted, the default event is sent.",
                        "description": "One of: onClose, onMove, onMoving, onResize, onResizing, onShow",
                        "datatype": {
                            "type": "String"
                        }
                    }
                }
            },
            {
                "@name": "center",
                "shortdesc": "Centers this window on screen or with repect to another window.",
                "parameters": {
                    "parameter": {
                        "@name": "window",
                        "@optional": "true",
                        "shortdesc": "The relative window. If not specified, centers on the screen.",
                        "datatype": {
                            "type": {
                                "@href": "#\/Window",
                                "@": "Window"
                            }
                        }
                    }
                }
            },
            {
                "@name": "close",
                "shortdesc": "Closes this window.",
                "description": ". If an ;onClose() ;callback is defined for the window, calls that function before closing the window.",
                "parameters": {
                    "parameter": {
                        "@name": "return",
                        "@optional": "true",
                        "shortdesc": "A number to be returned from the show() method that invoked this window as a modal dialog.",
                        "datatype": {
                            "type": "Any"
                        }
                    }
                }
            },
            {
                "@name": "add",
                "shortdesc": "Creates and returns a new control or container object and adds it to the children of this window.",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "type",
                            "shortdesc": "The type of the child element, as specified for the type property.",
                            "description": "Control types are listed in the JavaScript Tools Guide.",
                            "datatype": {
                                "type": "String"
                            }
                        },
                        {
                            "@name": "bounds",
                            "@optional": "true",
                            "shortdesc": "A bounds specification that describes the size and position of the new control or container, relative to its parent.",
                            "description": "If supplied, this value creates a new ;Bounds ;object which is assigned to the new object\u2019s bounds property.",
                            "datatype": {
                                "type": {
                                    "@href": "#\/Bounds",
                                    "@": "Bounds"
                                }
                            }
                        },
                        {
                            "@name": "text",
                            "@optional": "true",
                            "shortdesc": "The text or label, a localizable string.",
                            "description": "Initial text to be displayed in the control as the title, label, or contents, depending on the control type. If supplied, this value is assigned to the new object\u2019s text property.",
                            "datatype": {
                                "type": "String"
                            }
                        },
                        {
                            "@name": "properties",
                            "@optional": "true",
                            "shortdesc": "An object that contains one or more creation properties of the new child (properties used only when the element is created).",
                            "description": {
                                "br": "properties",
                                "@": "The creation properties depend on the element type. See  property of each control type."
                            },
                            "datatype": {
                                "type": "Object"
                            }
                        }
                    ]
                },
                "datatype": {
                    "type": "Object"
                }
            },
            {
                "@name": "remove",
                "shortdesc": "Removes the specified child control from this window\u2019s children array.",
                "description": "No error results if the child does not exist.",
                "parameters": {
                    "parameter": {
                        "@name": "what",
                        "shortdesc": "The child control to remove, specified by 0-based index, text property value, or as a control object.",
                        "datatype": {
                            "type": "Any"
                        }
                    }
                }
            },
            {
                "@name": "addEventListener",
                "shortdesc": "Registers an event handler for a particular type of event occuring in this window.",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "eventName",
                            "shortdesc": "The name of the event.",
                            "description": "Predefined event names are: change, changing, move, moving, resize, resizing, show , enterKey, focus, blur, keydown, keyup, mousedown, mouseup, mousemove, mouseover, mouseout, click (detail = 1 for single, 2 for double).",
                            "datatype": {
                                "type": "String"
                            }
                        },
                        {
                            "@name": "handler",
                            "shortdesc": "The function that handles the event.",
                            "description": "This can be the name of a function defined in the extension, or a locally defined handler function to be executed when the event occurs. A handler function takes one argument, the ;UIEvent ;object.",
                            "datatype": {
                                "type": {
                                    "@href": "$COMMON\/javascript.xml#\/Function",
                                    "@": "Function"
                                }
                            }
                        },
                        {
                            "@name": "capturePhase",
                            "@optional": "true",
                            "shortdesc": "When true, the handler is called only in the capturing phase of the event propagation.",
                            "description": "Default is false, meaning that the handler is called in the bubbling phase if this object is an ancestor of the target, or in the at-target phase if this object is itself the target.",
                            "datatype": {
                                "type": "Boolean",
                                "value": "false"
                            }
                        }
                    ]
                },
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "removeEventListener",
                "shortdesc": "Unregisters an event handler for a particular type of event occuring in this window.",
                "description": "All arguments must be identical to those that were used to register the event handler.",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "eventName",
                            "shortdesc": "The name of the event.",
                            "datatype": {
                                "type": "String"
                            }
                        },
                        {
                            "@name": "handler",
                            "shortdesc": "The function that handles the event.",
                            "datatype": {
                                "type": {
                                    "@href": "$COMMON\/javascript.xml#\/Function",
                                    "@": "Function"
                                }
                            }
                        },
                        {
                            "@name": "capturePhase",
                            "shortdesc": "Whether to call the handler only in the capturing phase of the event propagation.",
                            "datatype": {
                                "type": "Boolean",
                                "value": "false"
                            }
                        }
                    ]
                },
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "dispatchEvent",
                "shortdesc": "Simulates the occurrence of an event in this target.",
                "description": "A script can create a ;UIEvent ;object for a specific event and pass it to this method to start the event propagation for the event.",
                "datatype": {
                    "type": {
                        "@href": "#\/UIEvent",
                        "@": "UIEvent"
                    }
                }
            }
        ]
    },
    "LayoutManager": {
        "class": "LayoutManager",
        "superClass": null,
        "shortdesc": "Controls the automatic layout behavior for a window or container.",
        "elementCount": 1,
        "propertyCount": 0,
        "methodCount": 2,
        "properties": [],
        "methods": [
            {
                "@name": "layout",
                "shortdesc": "Invokes the automatic layout behavior for the managed container.",
                "description": "Adjusts sizes and positions of the child elements of this window or container according to the placement and alignment property values in the parent and children.\n            Invoked automatically the first time the window is displayed. Thereafter, the script must invoke it explicitly to change the layout in case of changes in the size or position of the parent or children."
            },
            {
                "@name": "resize",
                "shortdesc": "Performs a layout after a Window is resized, based on the new size.",
                "description": "Resizes the child elements of the managed container with a given alignment type, after the window has been resized by the user."
            }
        ]
    },
    "ScriptUIPen": {
        "class": "ScriptUIPen",
        "superClass": null,
        "shortdesc": "A drawing pen that defines a color and line width used to stroke paths.",
        "elementCount": 1,
        "propertyCount": 4,
        "methodCount": 0,
        "properties": [
            {
                "@name": "color",
                "@rwaccess": "readonly",
                "shortdesc": "The pen color.",
                "description": "The paint color to use when the type is SOLID_COLOR. An array in the form [R, B, G, A] specifying the red, green, blue values of the color and the opacity (alpha channel) value as numbers in the range [0.0..1.0]. An opacity of 0 is fully transparent, and an opacity of 1 is fully opaque.",
                "datatype": {
                    "type": "Number",
                    "array": {
                        "@size": "4"
                    }
                }
            },
            {
                "@name": "theme",
                "@rwaccess": "readonly",
                "shortdesc": "The theme name.",
                "description": "The name of a color theme to use for drawing when the type is THEME_COLOR. Theme colors are defined by the host application.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "type",
                "@rwaccess": "readonly",
                "shortdesc": "The pen type, solid or theme.",
                "description": "One of these constants: ScriptUIGraphics.PenType.SOLID_COLOR or ScriptUIGraphics.PenType.THEME_COLOR",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "lineWidth",
                "shortdesc": "The pixel width of the drawing line.",
                "datatype": {
                    "type": "Number",
                    "min": "1"
                }
            }
        ],
        "methods": []
    },
    "ScriptUIBrush": {
        "class": "ScriptUIBrush",
        "superClass": null,
        "shortdesc": "A painting brush that encapsulates a color or pattern used to fill paths.",
        "elementCount": 1,
        "propertyCount": 3,
        "methodCount": 0,
        "properties": [
            {
                "@name": "color",
                "@rwaccess": "readonly",
                "shortdesc": "The brush color.",
                "description": "The paint color to use when the type is SOLID_COLOR. An array in the form [R, B, G, A] specifying the red, green, blue values of the color and the opacity (alpha channel) value as numbers in the range [0.0..1.0]. An opacity of 0 is fully transparent, and an opacity of 1 is fully opaque.",
                "datatype": {
                    "type": "Number",
                    "array": {
                        "@size": "4"
                    }
                }
            },
            {
                "@name": "theme",
                "@rwaccess": "readonly",
                "shortdesc": "The theme name.",
                "description": "The name of a color theme to use for drawing when the type is THEME_COLOR. Theme colors are defined by the host application.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "type",
                "@rwaccess": "readonly",
                "shortdesc": "The brush type, solid or theme.",
                "description": "One of these constants: ScriptUIGraphics.BrushType.SOLID_COLOR or ScriptUIGraphics.BrushType.THEME_COLOR",
                "datatype": {
                    "type": "Number"
                }
            }
        ],
        "methods": []
    },
    "ScriptUIGraphics": {
        "class": "ScriptUIGraphics",
        "superClass": null,
        "shortdesc": "An object used to draw custom graphics, found in the graphics property of window, container, and control objects.",
        "elementCount": 2,
        "propertyCount": 9,
        "methodCount": 15,
        "properties": [
            {
                "@name": "BrushType",
                "@rwaccess": "readonly",
                "shortdesc": "Contains the enumerated constants for the type argument of ;newBrush().",
                "description": "Type constants are: SOLID_COLOR, THEME_COLOR.",
                "datatype": {
                    "type": "Object"
                }
            },
            {
                "@name": "PenType",
                "@rwaccess": "readonly",
                "shortdesc": "Contains the enumerated constants for the type argument of ;newPen().",
                "description": "Type constants are: SOLID_COLOR, THEME_COLOR.",
                "datatype": {
                    "type": "Object"
                }
            },
            {
                "@name": "backgroundColor",
                "shortdesc": "The background color for containers; for non-containers, the parent background color.",
                "description": "The paint color and style is defined in this brush object.This property is only supported for controls like  dropdownlist, edittext, and listbox.",
                "datatype": {
                    "type": {
                        "@href": "#\/ScriptUIBrush",
                        "@": "ScriptUIBrush"
                    }
                }
            },
            {
                "@name": "disabledBackgroundColor",
                "shortdesc": "The background color for containers when disabled or inactive; for non-containers, the parent background color.",
                "description": "The paint color and style is defined in this brush object.This property is only supported for controls like  dropdownlist, edittext, and listbox.",
                "datatype": {
                    "type": {
                        "@href": "#\/ScriptUIBrush",
                        "@": "ScriptUIBrush"
                    }
                }
            },
            {
                "@name": "disabledForegroundColor",
                "shortdesc": "The text color when the element is disabled or inactive.",
                "description": "The paint color and style is defined in this pen object.",
                "datatype": {
                    "type": {
                        "@href": "#\/ScriptUIPen",
                        "@": "ScriptUIPen"
                    }
                }
            },
            {
                "@name": "font",
                "shortdesc": "The default font to use for displaying text.",
                "datatype": {
                    "type": {
                        "@href": "#\/ScriptUIFont",
                        "@": "ScriptUIFont"
                    }
                }
            },
            {
                "@name": "foregroundColor",
                "shortdesc": "The text color.",
                "description": "The paint color and style is defined in this pen object.",
                "datatype": {
                    "type": {
                        "@href": "#\/ScriptUIPen",
                        "@": "ScriptUIPen"
                    }
                }
            },
            {
                "@name": "currentPath",
                "@rwaccess": "readonly",
                "shortdesc": "The current drawing path, encapsulated in a path object.",
                "datatype": {
                    "type": {
                        "@href": "#\/ScriptUIPath",
                        "@": "ScriptUIPath"
                    }
                }
            },
            {
                "@name": "currentPoint",
                "@rwaccess": "readonly",
                "shortdesc": "The current position in the current drawing path.",
                "datatype": {
                    "type": {
                        "@href": "#\/Point",
                        "@": "Point"
                    }
                }
            }
        ],
        "methods": [
            {
                "@name": "newBrush",
                "shortdesc": "Creates a new painting brush object.",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "type",
                            "shortdesc": "The brush type, solid or theme.",
                            "description": "One of the constants ScriptUIGraphics.BrushType.SOLID_COLOR or ScriptUIGraphics.BrushType.THEME_COLOR.",
                            "datatype": {
                                "type": "Number"
                            }
                        },
                        {
                            "@name": "color",
                            "shortdesc": "The brush color.",
                            "description": {
                                "li": [
                                    "If type is SOLID_COLOR, the color expressed as an array of three or four values, in the form [R, B, G, A] specifying the red, green, and blue values of the color and, optionally, the opacity (alpha channel). All values are numbers in the range [0.0..1.0]. An opacity of 0 is fully transparent, and an opacity of 1 is fully opaque.",
                                    "If the type is THEME_COLOR, the name string of the theme. Theme colors are defined by the host application."
                                ]
                            },
                            "datatype": [
                                {
                                    "type": "Number",
                                    "array": {
                                        "@size": "4"
                                    }
                                },
                                {
                                    "type": "String"
                                }
                            ]
                        }
                    ]
                },
                "datatype": {
                    "type": {
                        "@href": "#\/ScriptUIBrush",
                        "@": "ScriptUIBrush"
                    }
                }
            },
            {
                "@name": "newPen",
                "shortdesc": "Creates a new drawing pen object.",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "type",
                            "shortdesc": "The pen type, solid or theme.",
                            "description": "One of the constants ScriptUIGraphics.PenType.SOLID_COLOR or ScriptUIGraphics.PenType.THEME_COLOR.",
                            "datatype": {
                                "type": "Number"
                            }
                        },
                        {
                            "@name": "color",
                            "shortdesc": "The pen color.",
                            "description": {
                                "li": [
                                    "If type is SOLID_COLOR, the color expressed as an array of three or four values, in the form [R, B, G, A] specifying the red, green, and blue values of the color and, optionally, the opacity (alpha channel). All values are numbers in the range [0.0..1.0]. An opacity of 0 is fully transparent, and an opacity of 1 is fully opaque.",
                                    "If the type is THEME_COLOR, the name string of the theme. Theme colors are defined by the host application."
                                ]
                            },
                            "datatype": [
                                {
                                    "type": "Number",
                                    "array": {
                                        "@size": "4"
                                    }
                                },
                                {
                                    "type": "String"
                                }
                            ]
                        },
                        {
                            "@name": "width",
                            "shortdesc": "The width of the pen line in pixels.",
                            "description": "The line is centered around the current point. For example, if the value is 2, drawing a line from (0, 10) to (5, 10) paints the two rows of pixels directly above and below y-position 10.",
                            "datatype": {
                                "type": "Number"
                            }
                        }
                    ]
                },
                "datatype": {
                    "type": {
                        "@href": "#\/ScriptUIPen",
                        "@": "ScriptUIPen"
                    }
                }
            },
            {
                "@name": "newPath",
                "shortdesc": "Creates a new, empty path object.",
                "description": "Replaces any existing path in ;currentPath.",
                "datatype": {
                    "type": {
                        "@href": "#\/ScriptUIPath",
                        "@": "ScriptUIPath"
                    }
                }
            },
            {
                "@name": "closePath",
                "shortdesc": "Closes the current path.",
                "description": "Defines a line from the current postion (currentPoint) to the start point of the current path (the value of ;currentPath)."
            },
            {
                "@name": "moveTo",
                "shortdesc": "Adds a given point to the ;currentPath, and makes it the current drawing position.",
                "description": "Returns the ;Point ;object which is the new value of ;currentPoint.",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "x",
                            "shortdesc": "The X coordinate for the new point, relative to the origin of this element.",
                            "datatype": {
                                "type": "Number"
                            }
                        },
                        {
                            "@name": "y",
                            "shortdesc": "The Y coordinate for the new point, relative to the origin of this element.",
                            "datatype": {
                                "type": "Number"
                            }
                        }
                    ]
                },
                "datatype": {
                    "type": {
                        "@href": "#\/Point",
                        "@": "Point"
                    }
                }
            },
            {
                "@name": "lineTo",
                "shortdesc": "Adds a path segment to the ;currentPath.",
                "description": "The line is defined from the ;currentPoint ;to the specified destination point. Returns the ;Point ;object  for the destination point, which becomes the new value of ;currentPoint.",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "x",
                            "shortdesc": "The X coordinate for the destination point, relative to the origin of this element.",
                            "datatype": {
                                "type": "Number"
                            }
                        },
                        {
                            "@name": "y",
                            "shortdesc": "The Y coordinate for the destination point, relative to the origin of this element.",
                            "datatype": {
                                "type": "Number"
                            }
                        }
                    ]
                },
                "datatype": {
                    "type": {
                        "@href": "#\/Point",
                        "@": "Point"
                    }
                }
            },
            {
                "@name": "rectPath",
                "shortdesc": "Defines a rectangular path in the ;currentPath ;object.",
                "description": {
                    "br": "",
                    "@": "The rectangle can be filled using ;fillPath() ;or stroked using ;strokePath().Returns the ;Point ;object  for the upper left corner of the rectangle, which becomes the new value of ;currentPoint."
                },
                "parameters": {
                    "parameter": [
                        {
                            "@name": "left",
                            "shortdesc": "The left coordinate relative to the origin of this element.",
                            "datatype": {
                                "type": "Number"
                            }
                        },
                        {
                            "@name": "top",
                            "shortdesc": "The top coordinate relative to the origin of this element.",
                            "datatype": {
                                "type": "Number"
                            }
                        },
                        {
                            "@name": "width",
                            "shortdesc": "The width in pixels.",
                            "datatype": {
                                "type": "Number"
                            }
                        },
                        {
                            "@name": "height",
                            "shortdesc": "The height in pixels.",
                            "datatype": {
                                "type": "Number"
                            }
                        }
                    ]
                },
                "datatype": {
                    "type": {
                        "@href": "#\/Point",
                        "@": "Point"
                    }
                }
            },
            {
                "@name": "ellipsePath",
                "shortdesc": "Defines an elliptical path within a given rectangular area in the ;currentPath ;object, which can be filled using ;fillPath() ;or stroked using ;strokePath().",
                "description": "Returns a ;Point ;object for the upper left corner of the area, which is the new ;currentPoint.",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "left",
                            "shortdesc": "The left coordinate of the region, relative to the origin of this element.",
                            "datatype": {
                                "type": "Number"
                            }
                        },
                        {
                            "@name": "top",
                            "shortdesc": "The top coordinate of the region, relative to the origin of this element.",
                            "datatype": {
                                "type": "Number"
                            }
                        },
                        {
                            "@name": "width",
                            "shortdesc": "The width of the region in pixels.",
                            "datatype": {
                                "type": "Number"
                            }
                        },
                        {
                            "@name": "height",
                            "shortdesc": "The height of the region in pixels.",
                            "datatype": {
                                "type": "Number"
                            }
                        }
                    ]
                },
                "datatype": {
                    "type": {
                        "@href": "#\/Point",
                        "@": "Point"
                    }
                }
            },
            {
                "@name": "strokePath",
                "shortdesc": "Strokes the path segments of a path with a given drawing pen.",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "pen",
                            "shortdesc": "The drawing pen that defines the color and line width.",
                            "datatype": {
                                "type": {
                                    "@href": "#\/ScriptUIPen",
                                    "@": "ScriptUIPen"
                                }
                            }
                        },
                        {
                            "@name": "path",
                            "@optional": "true",
                            "shortdesc": "The path object. Default is the ;currentPath.",
                            "datatype": {
                                "type": {
                                    "@href": "#\/ScriptUIPath",
                                    "@": "ScriptUIPath"
                                }
                            }
                        }
                    ]
                }
            },
            {
                "@name": "fillPath",
                "shortdesc": "Fills a path using a given painting brush.",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "brush",
                            "shortdesc": "The brush object that defines the fill color.",
                            "datatype": {
                                "type": {
                                    "@href": "#\/ScriptUIBrush",
                                    "@": "ScriptUIBrush"
                                }
                            }
                        },
                        {
                            "@name": "path",
                            "@optional": "true",
                            "shortdesc": "The path object. Default is the ;currentPath.",
                            "datatype": {
                                "type": {
                                    "@href": "#\/ScriptUIPath",
                                    "@": "ScriptUIPath"
                                }
                            }
                        }
                    ]
                }
            },
            {
                "@name": "drawFocusRing",
                "shortdesc": "Draws a focus ring within a region of this element.",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "left",
                            "shortdesc": "The left coordinate of the region.",
                            "description": "Value is relative to the origin of this element.",
                            "datatype": {
                                "type": "Number"
                            }
                        },
                        {
                            "@name": "top",
                            "shortdesc": "The top coordinate of the region.",
                            "description": "Value is relative to the origin of this element.",
                            "datatype": {
                                "type": "Number"
                            }
                        },
                        {
                            "@name": "width",
                            "shortdesc": "The width of the region in pixels.",
                            "datatype": {
                                "type": "Number"
                            }
                        },
                        {
                            "@name": "height",
                            "shortdesc": "The height of the region in pixels.",
                            "datatype": {
                                "type": "Number"
                            }
                        }
                    ]
                }
            },
            {
                "@name": "drawImage",
                "shortdesc": "Draws an image within a given region of the element.",
                "description": "Uses the version of the image that is appropriate to the element's current state.",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "image",
                            "shortdesc": "The image to draw.",
                            "description": "This object contains different versions of an image appropriate to various element states, such as a dimmed version for the disabled state.",
                            "datatype": {
                                "type": {
                                    "@href": "#\/ScriptUIImage",
                                    "@": "ScriptUIImage"
                                }
                            }
                        },
                        {
                            "@name": "left",
                            "shortdesc": "The left coordinate of the region, relative to the origin of this element.",
                            "datatype": {
                                "type": "Number"
                            }
                        },
                        {
                            "@name": "top",
                            "shortdesc": "The top coordinate of the region, relative to the origin of this element.",
                            "datatype": {
                                "type": "Number"
                            }
                        },
                        {
                            "@name": "width",
                            "@optional": "true",
                            "shortdesc": "The width in pixels. If provided, the image is stretched or shrunk to fit. If omitted, uses the original image width.",
                            "datatype": {
                                "type": "Number"
                            }
                        },
                        {
                            "@name": "height",
                            "@optional": "true",
                            "shortdesc": "The height in pixels. If provided, the image is stretched or shrunk to fit. If omitted, uses the original image height.",
                            "datatype": {
                                "type": "Number"
                            }
                        }
                    ]
                }
            },
            {
                "@name": "drawOSControl",
                "shortdesc": "Draw the platform-specific control associated with this element."
            },
            {
                "@name": "drawString",
                "shortdesc": "Draw a string of text starting at a given point in this element, using a given drawing pen and font.",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "text",
                            "shortdesc": "The text string.",
                            "datatype": {
                                "type": "String"
                            }
                        },
                        {
                            "@name": "pen",
                            "shortdesc": "The drawing pen to use.",
                            "datatype": {
                                "type": {
                                    "@href": "#\/ScriptUIPen",
                                    "@": "ScriptUIPen"
                                }
                            }
                        },
                        {
                            "@name": "x",
                            "shortdesc": "The left coordinate, relative to the origin of this element.",
                            "datatype": {
                                "type": "Number"
                            }
                        },
                        {
                            "@name": "y",
                            "shortdesc": "The top coordinate, relative to the origin of this element.",
                            "datatype": {
                                "type": "Number"
                            }
                        },
                        {
                            "@name": "font",
                            "@optional": "true",
                            "shortdesc": "The font to use. Default is the  ;font ;value in this object.",
                            "datatype": {
                                "type": {
                                    "@href": "#\/ScriptUIFont",
                                    "@": "ScriptUIFont"
                                }
                            }
                        }
                    ]
                }
            },
            {
                "@name": "measureString",
                "shortdesc": "Calculates the size needed to display a string using the given font.",
                "description": "Returns a ;Dimension ;object that contains the height and width of the string in pixels.",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "text",
                            "shortdesc": "The text string to measure.",
                            "datatype": {
                                "type": "String"
                            }
                        },
                        {
                            "@name": "font",
                            "@optional": "true",
                            "shortdesc": "The font to use. Default is the ;font ;value in this object.",
                            "datatype": {
                                "type": {
                                    "@href": "#\/ScriptUIFont",
                                    "@": "ScriptUIFont"
                                }
                            }
                        },
                        {
                            "@name": "boundingWidth",
                            "@optional": "true",
                            "shortdesc": "The bounding width.",
                            "datatype": {
                                "type": "Number"
                            }
                        }
                    ]
                },
                "datatype": {
                    "type": {
                        "@href": "#\/Dimension",
                        "@": "Dimension"
                    }
                }
            }
        ]
    },
    "DrawState": {
        "class": "DrawState",
        "superClass": null,
        "shortdesc": "Describes an input state at the time of the triggering  ;ScriptUIGraphics.onDraw() ;event.",
        "elementCount": 1,
        "propertyCount": 12,
        "methodCount": 0,
        "properties": [
            {
                "@name": "mouseOver",
                "@rwaccess": "readonly",
                "shortdesc": "True if the cursor is hovering over this element.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "leftButtonPressed",
                "@rwaccess": "readonly",
                "shortdesc": "True if the left mouse button is being pressed.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "middleButtonPressed",
                "@rwaccess": "readonly",
                "shortdesc": "True if the middle mouse button is being pressed.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "rightButtonPressed",
                "@rwaccess": "readonly",
                "shortdesc": "True if the right mouse button is being pressed.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "hasFocus",
                "@rwaccess": "readonly",
                "shortdesc": "True if the element has the input focus.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "shiftKeyPressed",
                "@rwaccess": "readonly",
                "shortdesc": "True if the Shift key is being pressed.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "ctrlKeyPressed",
                "@rwaccess": "readonly",
                "shortdesc": "True if the Ctrl key is being pressed.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "cmdKeyPressed",
                "@rwaccess": "readonly",
                "shortdesc": "True if the Command key is being pressed (in Mac OS only).",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "optKeyPressed",
                "@rwaccess": "readonly",
                "shortdesc": "True if the Option key is being pressed (in Mac OS only).",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "altKeyPressed",
                "@rwaccess": "readonly",
                "shortdesc": "True if the Alt key is being pressed (in Windows only).",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "numLockKeyPressed",
                "@rwaccess": "readonly",
                "shortdesc": "True if the Num Lock key is being pressed.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "capsLockKeyPressed",
                "@rwaccess": "readonly",
                "shortdesc": "True if the Caps Lock key is being pressed.",
                "datatype": {
                    "type": "Boolean"
                }
            }
        ],
        "methods": []
    },
    "ScriptUIFont": {
        "class": "ScriptUIFont",
        "superClass": null,
        "shortdesc": "Encapsulates the qualities of a font used to draw text into a control.",
        "elementCount": 1,
        "propertyCount": 5,
        "methodCount": 0,
        "properties": [
            {
                "@name": "family",
                "@rwaccess": "readonly",
                "shortdesc": "The font family name.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "name",
                "@rwaccess": "readonly",
                "shortdesc": "The complete font name, consisting of the family and style, if specified.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "size",
                "@rwaccess": "readonly",
                "shortdesc": "The font point size.",
                "datatype": {
                    "type": "Number"
                }
            },
            {
                "@name": "style",
                "@rwaccess": "readonly",
                "shortdesc": "The font style. One of the constants in ;ScriptUIGraphics.FontStyle.",
                "datatype": {
                    "type": "Object"
                }
            },
            {
                "@name": "substitute",
                "@rwaccess": "readonly",
                "shortdesc": "The name of a substitution font, a fallback font to substitute for this font if the requested font family or style is not available.",
                "datatype": {
                    "type": "String"
                }
            }
        ],
        "methods": []
    },
    "ScriptUIImage": {
        "class": "ScriptUIImage",
        "superClass": null,
        "shortdesc": "Encapsulates a set of images that can be drawn into a control.",
        "elementCount": 1,
        "propertyCount": 4,
        "methodCount": 0,
        "properties": [
            {
                "@name": "format",
                "@rwaccess": "readonly",
                "shortdesc": "The image format. One of: resource, JPEG, GIF, TIFF, PNG, or PICT (Macintosh).",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "name",
                "@rwaccess": "readonly",
                "shortdesc": "The image name. Either the file name, or the resource name.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "pathname",
                "@rwaccess": "readonly",
                "shortdesc": "The full path to the file that contains the image.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "size",
                "@rwaccess": "readonly",
                "shortdesc": "The image size in pixels.",
                "datatype": {
                    "type": {
                        "@href": "#\/Dimension",
                        "@": "Dimension"
                    }
                }
            }
        ],
        "methods": []
    },
    "StaticText": {
        "class": "StaticText",
        "superClass": null,
        "shortdesc": "A text label that the user cannot change.",
        "elementCount": 2,
        "propertyCount": 23,
        "methodCount": 6,
        "properties": [
            {
                "@name": "characters",
                "shortdesc": "A number of characters for which to reserve space when calculating the preferred size of the element.",
                "datatype": {
                    "type": "Number",
                    "min": "0"
                }
            },
            {
                "@name": "justify",
                "shortdesc": "The text justification style.",
                "description": "One of left, center, or right. Justification only works if this value is set on creation of the element.",
                "datatype": {
                    "type": "String",
                    "value": "left"
                }
            },
            {
                "@name": "text",
                "shortdesc": "The text to display, a localizable string.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "active",
                "shortdesc": "Always false. This element cannot have input focus.",
                "description": "An active control is the one with keyboard focus\u2014that is, the one that accepts keystrokes, or in the case of a ;Button, is selected when the user types Return or Enter in Windows, or the space bar in Mac OS.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "shortcutKey",
                "shortdesc": "The key sequence that invokes the ;onShortcutKey() ;callback for this element (in Windows only).",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "graphics",
                "@rwaccess": "readonly",
                "shortdesc": "The graphics object that can be used to customize the element's appearance, in response to the ;onDraw() ;event.",
                "datatype": {
                    "type": {
                        "@href": "#\/ScriptUIGraphics",
                        "@": "ScriptUIGraphics"
                    }
                }
            },
            {
                "@name": "visible",
                "shortdesc": "True if this element is shown, false if it is hidden.",
                "description": "When a container is hidden, its children are also hidden, but they retain their own visibility values, and are shown or hidden accordingly when the parent is next shown.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "bounds",
                "shortdesc": "The boundaries of the element, in parent-relative coordinates.",
                "description": "Setting an element's size or location changes its bounds property, and vice-versa.",
                "datatype": {
                    "type": {
                        "@href": "#\/Bounds",
                        "@": "Bounds"
                    }
                }
            },
            {
                "@name": "location",
                "shortdesc": "The upper left corner of this element relative to its parent.",
                "description": "The location is defined as [bounds.x, bounds.y]. Setting an element's location changes its bounds property, and vice-versa.",
                "datatype": {
                    "type": {
                        "@href": "#\/Point",
                        "@": "Point"
                    }
                }
            },
            {
                "@name": "maximumSize",
                "shortdesc": "The maximum height and width to which the element can be resized.",
                "datatype": {
                    "type": {
                        "@href": "#\/Dimension",
                        "@": "Dimension"
                    }
                }
            },
            {
                "@name": "minimumSize",
                "shortdesc": "The minimum height and width to which the element can be resized.",
                "datatype": {
                    "type": {
                        "@href": "#\/Dimension",
                        "@": "Dimension"
                    }
                }
            },
            {
                "@name": "preferredSize",
                "shortdesc": "The preferred size, used by layout managers to determine the best size for each element.",
                "description": "If not explicitly set by a script, value is established by the UI framework in which ScriptUI is employed, and is based on such attributes of the element as its text, font, font size, icon size, and other UI framework-specific attributes.A script can explicitly set this value before the layout manager is invoked in order to establish an element size other than the default.",
                "datatype": {
                    "type": {
                        "@href": "#\/Dimension",
                        "@": "Dimension"
                    }
                }
            },
            {
                "@name": "size",
                "shortdesc": "The current dimensions of this element.",
                "description": "Initially undefined, and unless explicitly set by a script, it is defined by a ;LayoutManager ;. A script can explicitly set size before the layout manager is invoked to establish an element size other than the preferredSize or the default size, but this is not recommended. Defined as [bounds.width, bounds.height]. Setting an element's size changes its bounds property, and vice-versa.",
                "datatype": {
                    "type": {
                        "@href": "#\/Dimension",
                        "@": "Dimension"
                    }
                }
            },
            {
                "@name": "windowBounds",
                "@rwaccess": "readonly",
                "shortdesc": "The bounds of this element relative to the top-level parent window.",
                "datatype": {
                    "type": {
                        "@href": "#\/Bounds",
                        "@": "Bounds"
                    }
                }
            },
            {
                "@name": "alignment",
                "shortdesc": "The alignment style for this element. If defined, this value overrides the alignChildren setting for the parent container.",
                "description": {
                    "li": [
                        "For orientation=row:top, bottom, fill",
                        "For orientation=column: left, right, fill",
                        "For orientation=stack:top, bottom, left, right, fill"
                    ],
                    "@": "This can be a single string, which indicates the alignment for the orientation specified in the parent container, or an array of two strings, indicating both the horizontal and vertical alignment (in that order). Allowed values depend on the orientation value of the parent container. They are not case sensitive."
                },
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "children",
                "@rwaccess": "readonly",
                "shortdesc": "An array of child elements.",
                "datatype": {
                    "type": "Object",
                    "array": ""
                }
            },
            {
                "@name": "properties",
                "shortdesc": "An object that contains one or more creation properties of the container (properties used only when the element is created).",
                "description": {
                    "li": [
                        "multiline: When false (the default), the control displays a single line of text. When true, the control displays multiple lines, in which case the text wraps within the width of the control.",
                        "scrolling: When false (the default), the displayed text cannot be scrolled. When true, the displayed text can be vertically scrolled using the Up Arrow and Down Arrow; this case implies multiline=true."
                    ],
                    "@": "Creation properties of a StaticText object can include:"
                },
                "datatype": {
                    "type": "Object"
                }
            },
            {
                "@name": "enabled",
                "shortdesc": "True if this element is enabled.",
                "description": "An enabled element can accept input, according to its type. When false, control elements do not accept input, and all types of elements have a dimmed appearance.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "helpTip",
                "shortdesc": "The help text that is displayed when the mouse hovers over the element.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "indent",
                "shortdesc": "The number of pixels to indent the element during automatic layout.",
                "description": "Applies for column orientation and left alignment, or row orientation and top alignment.",
                "datatype": {
                    "type": "Number",
                    "min": "0"
                }
            },
            {
                "@name": "parent",
                "@rwaccess": "readonly",
                "shortdesc": "The parent element.",
                "datatype": {
                    "type": "Object"
                }
            },
            {
                "@name": "window",
                "@rwaccess": "readonly",
                "shortdesc": "The window that this element belongs to.",
                "datatype": {
                    "type": {
                        "@href": "#\/Window",
                        "@": "Window"
                    }
                }
            },
            {
                "@name": "type",
                "@rwaccess": "readonly",
                "shortdesc": "The element type, \"statictext\".",
                "datatype": {
                    "type": "String"
                }
            }
        ],
        "methods": [
            {
                "@name": "notify",
                "shortdesc": "Sends a notification message, simulating the specified user interaction event.",
                "parameters": {
                    "parameter": {
                        "@name": "eventName",
                        "@optional": "true",
                        "shortdesc": "The name of the control event handler to call.",
                        "description": "One of: onClick, onChange, onChanging. By default, simulates the onChange event for an edittext control, an onClick event for controls that support that event.",
                        "datatype": {
                            "type": "String"
                        }
                    }
                }
            },
            {
                "@name": "show",
                "shortdesc": "Shows this element.",
                "description": "When a window or container is hidden, its children are also hidden, but when it is shown again, the children retain their own visibility states."
            },
            {
                "@name": "hide",
                "shortdesc": "Hides this element."
            },
            {
                "@name": "addEventListener",
                "shortdesc": "Registers an event handler for a particular type of event occuring in this element.",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "eventName",
                            "shortdesc": "The name of the event.",
                            "description": "Event names are listed in the JavaScript Tools Guide.",
                            "datatype": {
                                "type": "String"
                            }
                        },
                        {
                            "@name": "handler",
                            "shortdesc": "The function that handles the event.",
                            "description": "This can be the name of a function defined in the extension, or a locally defined handler function to be executed when the event occurs. A handler function takes one argument, the ;UIEvent ;object.",
                            "datatype": {
                                "type": {
                                    "@href": "$COMMON\/javascript.xml#\/Function",
                                    "@": "Function"
                                }
                            }
                        },
                        {
                            "@name": "capturePhase",
                            "shortdesc": "When true, the handler is called only in the capturing phase of the event propagation.",
                            "description": "Default is false, meaning that the handler is called in the bubbling phase if this object is an ancestor of the target, or in the at-target phase if this object is itself the target.",
                            "datatype": {
                                "type": "Boolean",
                                "value": "false"
                            }
                        }
                    ]
                },
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "removeEventListener",
                "shortdesc": "Unregisters an event handler for a particular type of event occuring in this element.",
                "description": "All arguments must be identical to those that were used to register the event handler.",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "eventName",
                            "shortdesc": "The name of the event.",
                            "datatype": {
                                "type": "String"
                            }
                        },
                        {
                            "@name": "handler",
                            "shortdesc": "The function that handles the event.",
                            "datatype": {
                                "type": {
                                    "@href": "$COMMON\/javascript.xml#\/Function",
                                    "@": "Function"
                                }
                            }
                        },
                        {
                            "@name": "capturePhase",
                            "shortdesc": "Whether to call the handler only in the capturing phase of the event propagation.",
                            "datatype": {
                                "type": "Boolean",
                                "value": "false"
                            }
                        }
                    ]
                },
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "dispatchEvent",
                "shortdesc": "Simulates the occurrence of an event in this target.",
                "description": "A script can create a ;UIEvent ;object for a specific event and pass it to this method to start the event propagation for the event.",
                "datatype": {
                    "type": {
                        "@href": "#\/Event",
                        "@": "Event"
                    }
                }
            }
        ]
    },
    "Button": {
        "class": "Button",
        "superClass": null,
        "shortdesc": "A pushbutton element containing a mouse-sensitive text string.",
        "elementCount": 2,
        "propertyCount": 23,
        "methodCount": 6,
        "properties": [
            {
                "@name": "characters",
                "shortdesc": "A number of characters for which to reserve space when calculating the preferred size of the element.",
                "datatype": {
                    "type": "Number",
                    "min": "0"
                }
            },
            {
                "@name": "justify",
                "shortdesc": "The text justification style.",
                "description": "One of left, center, or right. Justification only works if this value is set on creation of the element.",
                "datatype": {
                    "type": "String",
                    "value": "left"
                }
            },
            {
                "@name": "text",
                "shortdesc": "The text to display, a localizable string.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "active",
                "shortdesc": "True if this element is active.",
                "description": "An active control is the one with keyboard focus\u2014that is, the one that accepts keystrokes, or in the case of a ;Button, is selected when the user types Return or Enter in Windows, or the space bar in Mac OS.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "shortcutKey",
                "shortdesc": "The key sequence that invokes the ;onShortcutKey() ;callback for this element (in Windows only).",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "graphics",
                "@rwaccess": "readonly",
                "shortdesc": "The graphics object that can be used to customize the element's appearance, in response to the ;onDraw() ;event.",
                "datatype": {
                    "type": {
                        "@href": "#\/ScriptUIGraphics",
                        "@": "ScriptUIGraphics"
                    }
                }
            },
            {
                "@name": "visible",
                "shortdesc": "True if this element is shown, false if it is hidden.",
                "description": "When a container is hidden, its children are also hidden, but they retain their own visibility values, and are shown or hidden accordingly when the parent is next shown.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "bounds",
                "shortdesc": "The boundaries of the element, in parent-relative coordinates.",
                "description": "Setting an element's size or location changes its bounds property, and vice-versa.",
                "datatype": {
                    "type": {
                        "@href": "#\/Bounds",
                        "@": "Bounds"
                    }
                }
            },
            {
                "@name": "location",
                "shortdesc": "The upper left corner of this element relative to its parent.",
                "description": "The location is defined as [bounds.x, bounds.y]. Setting an element's location changes its bounds property, and vice-versa.",
                "datatype": {
                    "type": {
                        "@href": "#\/Point",
                        "@": "Point"
                    }
                }
            },
            {
                "@name": "maximumSize",
                "shortdesc": "The maximum height and width to which the element can be resized.",
                "datatype": {
                    "type": {
                        "@href": "#\/Dimension",
                        "@": "Dimension"
                    }
                }
            },
            {
                "@name": "minimumSize",
                "shortdesc": "The minimum height and width to which the element can be resized.",
                "datatype": {
                    "type": {
                        "@href": "#\/Dimension",
                        "@": "Dimension"
                    }
                }
            },
            {
                "@name": "preferredSize",
                "shortdesc": "The preferred size, used by layout managers to determine the best size for each element.",
                "description": "If not explicitly set by a script, value is established by the UI framework in which ScriptUI is employed, and is based on such attributes of the element as its text, font, font size, icon size, and other UI framework-specific attributes.A script can explicitly set this value before the layout manager is invoked in order to establish an element size other than the default.",
                "datatype": {
                    "type": {
                        "@href": "#\/Dimension",
                        "@": "Dimension"
                    }
                }
            },
            {
                "@name": "size",
                "shortdesc": "The current dimensions of this element.",
                "description": "Initially undefined, and unless explicitly set by a script, it is defined by a ;LayoutManager ;. A script can explicitly set size before the layout manager is invoked to establish an element size other than the preferredSize or the default size, but this is not recommended. Defined as [bounds.width, bounds.height]. Setting an element's size changes its bounds property, and vice-versa.",
                "datatype": {
                    "type": {
                        "@href": "#\/Dimension",
                        "@": "Dimension"
                    }
                }
            },
            {
                "@name": "windowBounds",
                "@rwaccess": "readonly",
                "shortdesc": "The bounds of this element relative to the top-level parent window.",
                "datatype": {
                    "type": {
                        "@href": "#\/Bounds",
                        "@": "Bounds"
                    }
                }
            },
            {
                "@name": "alignment",
                "shortdesc": "The alignment style for this element. If defined, this value overrides the alignChildren setting for the parent container.",
                "description": {
                    "li": [
                        "For orientation=row:top, bottom, fill",
                        "For orientation=column: left, right, fill",
                        "For orientation=stack:top, bottom, left, right, fill"
                    ],
                    "@": "This can be a single string, which indicates the alignment for the orientation specified in the parent container, or an array of two strings, indicating both the horizontal and vertical alignment (in that order). Allowed values depend on the orientation value of the parent container. They are not case sensitive."
                },
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "children",
                "@rwaccess": "readonly",
                "shortdesc": "An array of child elements.",
                "datatype": {
                    "type": "Object",
                    "array": ""
                }
            },
            {
                "@name": "properties",
                "shortdesc": "An object that contains one or more creation properties of the container (properties used only when the element is created).",
                "description": "A Button object has no creation properties, but the third argument to the add() method that creates it can be the initial text value.",
                "datatype": {
                    "type": "Object"
                }
            },
            {
                "@name": "enabled",
                "shortdesc": "True if this element is enabled.",
                "description": "An enabled element can accept input, according to its type. When false, control elements do not accept input, and all types of elements have a dimmed appearance.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "helpTip",
                "shortdesc": "The help string that is displayed when the mouse hovers over the element.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "indent",
                "shortdesc": "The number of pixels to indent the element during automatic layout.",
                "description": "Applies for column orientation and left alignment, or row orientation and top alignment.",
                "datatype": {
                    "type": "Number",
                    "min": "0"
                }
            },
            {
                "@name": "parent",
                "@rwaccess": "readonly",
                "shortdesc": "The parent element.",
                "datatype": {
                    "type": "Object"
                }
            },
            {
                "@name": "window",
                "@rwaccess": "readonly",
                "shortdesc": "The window that this element belongs to.",
                "datatype": {
                    "type": {
                        "@href": "#\/Window",
                        "@": "Window"
                    }
                }
            },
            {
                "@name": "type",
                "@rwaccess": "readonly",
                "shortdesc": "The element type; \"button\".",
                "datatype": {
                    "type": "String"
                }
            }
        ],
        "methods": [
            {
                "@name": "notify",
                "shortdesc": "Sends a notification message, simulating the specified user interaction event.",
                "parameters": {
                    "parameter": {
                        "@name": "eventName",
                        "@optional": "true",
                        "shortdesc": "The name of the control event handler to call.",
                        "description": "One of: onClick, onChange, onChanging. By default, simulates the onChange event for an edittext control, an onClick event for controls that support that event.",
                        "datatype": {
                            "type": "String"
                        }
                    }
                }
            },
            {
                "@name": "show",
                "shortdesc": "Shows this element.",
                "description": "When a window or container is hidden, its children are also hidden, but when it is shown again, the children retain their own visibility states."
            },
            {
                "@name": "hide",
                "shortdesc": "Hides this element."
            },
            {
                "@name": "addEventListener",
                "shortdesc": "Registers an event handler for a particular type of event occuring in this element.",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "eventName",
                            "shortdesc": "The name of the event.",
                            "description": "Event names are listed in the JavaScript Tools Guide.",
                            "datatype": {
                                "type": "String"
                            }
                        },
                        {
                            "@name": "handler",
                            "shortdesc": "The function that handles the event.",
                            "description": "This can be the name of a function defined in the extension, or a locally defined handler function to be executed when the event occurs. A handler function takes one argument, the ;UIEvent ;object.",
                            "datatype": {
                                "type": {
                                    "@href": "$COMMON\/javascript.xml#\/Function",
                                    "@": "Function"
                                }
                            }
                        },
                        {
                            "@name": "capturePhase",
                            "shortdesc": "When true, the handler is called only in the capturing phase of the event propagation.",
                            "description": "Default is false, meaning that the handler is called in the bubbling phase if this object is an ancestor of the target, or in the at-target phase if this object is itself the target.",
                            "datatype": {
                                "type": "Boolean",
                                "value": "false"
                            }
                        }
                    ]
                },
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "removeEventListener",
                "shortdesc": "Unregisters an event handler for a particular type of event occuring in this element.",
                "description": "All arguments must be identical to those that were used to register the event handler.",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "eventName",
                            "shortdesc": "The name of the event.",
                            "datatype": {
                                "type": "String"
                            }
                        },
                        {
                            "@name": "handler",
                            "shortdesc": "The function that handles the event.",
                            "datatype": {
                                "type": {
                                    "@href": "$COMMON\/javascript.xml#\/Function",
                                    "@": "Function"
                                }
                            }
                        },
                        {
                            "@name": "capturePhase",
                            "shortdesc": "Whether to call the handler only in the capturing phase of the event propagation.",
                            "datatype": {
                                "type": "Boolean",
                                "value": "false"
                            }
                        }
                    ]
                },
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "dispatchEvent",
                "shortdesc": "Simulates the occurrence of an event in this target.",
                "description": "A script can create a ;UIEvent ;object for a specific event and pass it to this method to start the event propagation for the event.",
                "datatype": {
                    "type": {
                        "@href": "#\/Event",
                        "@": "Event"
                    }
                }
            }
        ]
    },
    "IconButton": {
        "class": "IconButton",
        "superClass": null,
        "shortdesc": "A  mouse-sensitive pushbutton that displays an image instead of text.",
        "elementCount": 2,
        "propertyCount": 21,
        "methodCount": 6,
        "properties": [
            {
                "@name": "image",
                "shortdesc": "The image object that defines the image to be drawn.",
                "datatype": {
                    "type": {
                        "@href": "#\/ScriptUIImage",
                        "@": "ScriptUIImage"
                    }
                }
            },
            {
                "@name": "active",
                "shortdesc": "True if this element is active.",
                "description": "An active control is the one with keyboard focus\u2014that is, the one that accepts keystrokes, or in the case of a ;Button, is selected when the user types Return or Enter in Windows, or the space bar in Mac OS.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "shortcutKey",
                "shortdesc": "The key sequence that invokes the ;onShortcutKey() ;callback for this element (in Windows only).",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "graphics",
                "@rwaccess": "readonly",
                "shortdesc": "The graphics object that can be used to customize the element's appearance, in response to the ;onDraw() ;event.",
                "datatype": {
                    "type": {
                        "@href": "#\/ScriptUIGraphics",
                        "@": "ScriptUIGraphics"
                    }
                }
            },
            {
                "@name": "visible",
                "shortdesc": "True if this element is shown, false if it is hidden.",
                "description": "When a container is hidden, its children are also hidden, but they retain their own visibility values, and are shown or hidden accordingly when the parent is next shown.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "bounds",
                "shortdesc": "The boundaries of the element, in parent-relative coordinates.",
                "description": "Setting an element's size or location changes its bounds property, and vice-versa.",
                "datatype": {
                    "type": {
                        "@href": "#\/Bounds",
                        "@": "Bounds"
                    }
                }
            },
            {
                "@name": "location",
                "shortdesc": "The upper left corner of this element relative to its parent.",
                "description": "The location is defined as [bounds.x, bounds.y]. Setting an element's location changes its bounds property, and vice-versa.",
                "datatype": {
                    "type": {
                        "@href": "#\/Point",
                        "@": "Point"
                    }
                }
            },
            {
                "@name": "maximumSize",
                "shortdesc": "The maximum height and width to which the element can be resized.",
                "datatype": {
                    "type": {
                        "@href": "#\/Dimension",
                        "@": "Dimension"
                    }
                }
            },
            {
                "@name": "minimumSize",
                "shortdesc": "The minimum height and width to which the element can be resized.",
                "datatype": {
                    "type": {
                        "@href": "#\/Dimension",
                        "@": "Dimension"
                    }
                }
            },
            {
                "@name": "preferredSize",
                "shortdesc": "The preferred size, used by layout managers to determine the best size for each element.",
                "description": "If not explicitly set by a script, value is established by the UI framework in which ScriptUI is employed, and is based on such attributes of the element as its text, font, font size, icon size, and other UI framework-specific attributes.A script can explicitly set this value before the layout manager is invoked in order to establish an element size other than the default.",
                "datatype": {
                    "type": {
                        "@href": "#\/Dimension",
                        "@": "Dimension"
                    }
                }
            },
            {
                "@name": "size",
                "shortdesc": "The current dimensions of this element.",
                "description": "Initially undefined, and unless explicitly set by a script, it is defined by a ;LayoutManager ;. A script can explicitly set size before the layout manager is invoked to establish an element size other than the preferredSize or the default size, but this is not recommended. Defined as [bounds.width, bounds.height]. Setting an element's size changes its bounds property, and vice-versa.",
                "datatype": {
                    "type": {
                        "@href": "#\/Dimension",
                        "@": "Dimension"
                    }
                }
            },
            {
                "@name": "windowBounds",
                "@rwaccess": "readonly",
                "shortdesc": "The bounds of this element relative to the top-level parent window.",
                "datatype": {
                    "type": {
                        "@href": "#\/Bounds",
                        "@": "Bounds"
                    }
                }
            },
            {
                "@name": "alignment",
                "shortdesc": "The alignment style for this element. If defined, this value overrides the alignChildren setting for the parent container.",
                "description": {
                    "li": [
                        "For orientation=row:top, bottom, fill",
                        "For orientation=column: left, right, fill",
                        "For orientation=stack:top, bottom, left, right, fill"
                    ],
                    "@": "This can be a single string, which indicates the alignment for the orientation specified in the parent container, or an array of two strings, indicating both the horizontal and vertical alignment (in that order). Allowed values depend on the orientation value of the parent container. They are not case sensitive."
                },
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "children",
                "@rwaccess": "readonly",
                "shortdesc": "An array of child elements.",
                "datatype": {
                    "type": "Object",
                    "array": ""
                }
            },
            {
                "@name": "properties",
                "shortdesc": "An object that contains one or more creation properties of the container (properties used only when the element is created).",
                "description": {
                    "li": "style:  A string for the visual style, either \"button\", which has a visible border with a raised or 3D appearance, or \"toolbutton\", which has a flat appearance, appropriate for inclusion in a toolbar.",
                    "@": "Creation properties of an IconButton object can include:"
                },
                "datatype": {
                    "type": "Object"
                }
            },
            {
                "@name": "enabled",
                "shortdesc": "True if this element is enabled.",
                "description": "An enabled element can accept input, according to its type. When false, control elements do not accept input, and all types of elements have a dimmed appearance.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "helpTip",
                "shortdesc": "The help text that is displayed when the mouse hovers over the element.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "indent",
                "shortdesc": "The number of pixels to indent the element during automatic layout.",
                "description": "Applies for column orientation and left alignment, or row orientation and top alignment.",
                "datatype": {
                    "type": "Number",
                    "min": "0"
                }
            },
            {
                "@name": "parent",
                "@rwaccess": "readonly",
                "shortdesc": "The parent element.",
                "datatype": {
                    "type": "Object"
                }
            },
            {
                "@name": "window",
                "@rwaccess": "readonly",
                "shortdesc": "The window that this element belongs to.",
                "datatype": {
                    "type": {
                        "@href": "#\/Window",
                        "@": "Window"
                    }
                }
            },
            {
                "@name": "type",
                "@rwaccess": "readonly",
                "shortdesc": "The element type; \"iconbutton\".",
                "datatype": {
                    "type": "String"
                }
            }
        ],
        "methods": [
            {
                "@name": "notify",
                "shortdesc": "Sends a notification message, simulating the specified user interaction event.",
                "parameters": {
                    "parameter": {
                        "@name": "eventName",
                        "@optional": "true",
                        "shortdesc": "The name of the control event handler to call.",
                        "description": "One of: onClick, onChange, onChanging. By default, simulates the onChange event for an edittext control, an onClick event for controls that support that event.",
                        "datatype": {
                            "type": "String"
                        }
                    }
                }
            },
            {
                "@name": "show",
                "shortdesc": "Shows this element.",
                "description": "When a window or container is hidden, its children are also hidden, but when it is shown again, the children retain their own visibility states."
            },
            {
                "@name": "hide",
                "shortdesc": "Hides this element."
            },
            {
                "@name": "addEventListener",
                "shortdesc": "Registers an event handler for a particular type of event occuring in this element.",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "eventName",
                            "shortdesc": "The name of the event.",
                            "description": "Event names are listed in the JavaScript Tools Guide.",
                            "datatype": {
                                "type": "String"
                            }
                        },
                        {
                            "@name": "handler",
                            "shortdesc": "The function that handles the event.",
                            "description": "This can be the name of a function defined in the extension, or a locally defined handler function to be executed when the event occurs. A handler function takes one argument, the ;UIEvent ;object.",
                            "datatype": {
                                "type": {
                                    "@href": "$COMMON\/javascript.xml#\/Function",
                                    "@": "Function"
                                }
                            }
                        },
                        {
                            "@name": "capturePhase",
                            "shortdesc": "When true, the handler is called only in the capturing phase of the event propagation.",
                            "description": "Default is false, meaning that the handler is called in the bubbling phase if this object is an ancestor of the target, or in the at-target phase if this object is itself the target.",
                            "datatype": {
                                "type": "Boolean",
                                "value": "false"
                            }
                        }
                    ]
                },
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "removeEventListener",
                "shortdesc": "Unregisters an event handler for a particular type of event occuring in this element.",
                "description": "All arguments must be identical to those that were used to register the event handler.",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "eventName",
                            "shortdesc": "The name of the event.",
                            "datatype": {
                                "type": "String"
                            }
                        },
                        {
                            "@name": "handler",
                            "shortdesc": "The function that handles the event.",
                            "datatype": {
                                "type": {
                                    "@href": "$COMMON\/javascript.xml#\/Function",
                                    "@": "Function"
                                }
                            }
                        },
                        {
                            "@name": "capturePhase",
                            "shortdesc": "Whether to call the handler only in the capturing phase of the event propagation.",
                            "datatype": {
                                "type": "Boolean",
                                "value": "false"
                            }
                        }
                    ]
                },
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "dispatchEvent",
                "shortdesc": "Simulates the occurrence of an event in this target.",
                "description": "A script can create a ;UIEvent ;object for a specific event and pass it to this method to start the event propagation for the event.",
                "datatype": {
                    "type": {
                        "@href": "#\/Event",
                        "@": "Event"
                    }
                }
            }
        ]
    },
    "EditText": {
        "class": "EditText",
        "superClass": null,
        "shortdesc": "An editable text field that the user can select and change.",
        "elementCount": 2,
        "propertyCount": 24,
        "methodCount": 6,
        "properties": [
            {
                "@name": "textselection",
                "shortdesc": "The currently selected text, or the empty string if there is no text selected.",
                "description": "Setting the value replaces the current text selection and modifies the value of the ;text ;property. If there is no current selection, inserts the new value into the text string at the current insertion point. The textselection value is reset to an empty string after it modifies the text value. Note that setting the textselection property before the element\u2019s parent Window exists is an undefined operation.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "characters",
                "shortdesc": "A number of characters for which to reserve space when calculating the preferred size of the element.",
                "datatype": {
                    "type": "Number",
                    "min": "0"
                }
            },
            {
                "@name": "justify",
                "shortdesc": "The text justification style.",
                "description": "One of left, center, or right. Justification only works if this value is set on creation of the element.",
                "datatype": {
                    "type": "String",
                    "value": "left"
                }
            },
            {
                "@name": "text",
                "shortdesc": "The current text displayed in the field, a localizable string.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "graphics",
                "@rwaccess": "readonly",
                "shortdesc": "The graphics object that can be used to customize the element's appearance, in response to the ;onDraw() ;event.",
                "datatype": {
                    "type": {
                        "@href": "#\/ScriptUIGraphics",
                        "@": "ScriptUIGraphics"
                    }
                }
            },
            {
                "@name": "visible",
                "shortdesc": "True if this element is shown, false if it is hidden.",
                "description": "When a container is hidden, its children are also hidden, but they retain their own visibility values, and are shown or hidden accordingly when the parent is next shown.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "bounds",
                "shortdesc": "The boundaries of the element, in parent-relative coordinates.",
                "description": "Setting an element's size or location changes its bounds property, and vice-versa.",
                "datatype": {
                    "type": {
                        "@href": "#\/Bounds",
                        "@": "Bounds"
                    }
                }
            },
            {
                "@name": "location",
                "shortdesc": "The upper left corner of this element relative to its parent.",
                "description": "The location is defined as [bounds.x, bounds.y]. Setting an element's location changes its bounds property, and vice-versa.",
                "datatype": {
                    "type": {
                        "@href": "#\/Point",
                        "@": "Point"
                    }
                }
            },
            {
                "@name": "maximumSize",
                "shortdesc": "The maximum height and width to which the element can be resized.",
                "datatype": {
                    "type": {
                        "@href": "#\/Dimension",
                        "@": "Dimension"
                    }
                }
            },
            {
                "@name": "minimumSize",
                "shortdesc": "The minimum height and width to which the element can be resized.",
                "datatype": {
                    "type": {
                        "@href": "#\/Dimension",
                        "@": "Dimension"
                    }
                }
            },
            {
                "@name": "preferredSize",
                "shortdesc": "The preferred size, used by layout managers to determine the best size for each element.",
                "description": "If not explicitly set by a script, value is established by the UI framework in which ScriptUI is employed, and is based on such attributes of the element as its text, font, font size, icon size, and other UI framework-specific attributes.A script can explicitly set this value before the layout manager is invoked in order to establish an element size other than the default.",
                "datatype": {
                    "type": {
                        "@href": "#\/Dimension",
                        "@": "Dimension"
                    }
                }
            },
            {
                "@name": "size",
                "shortdesc": "The current dimensions of this element.",
                "description": "Initially undefined, and unless explicitly set by a script, it is defined by a ;LayoutManager ;. A script can explicitly set size before the layout manager is invoked to establish an element size other than the preferredSize or the default size, but this is not recommended. Defined as [bounds.width, bounds.height]. Setting an element's size changes its bounds property, and vice-versa.",
                "datatype": {
                    "type": {
                        "@href": "#\/Dimension",
                        "@": "Dimension"
                    }
                }
            },
            {
                "@name": "windowBounds",
                "@rwaccess": "readonly",
                "shortdesc": "The bounds of this element relative to the top-level parent window.",
                "datatype": {
                    "type": {
                        "@href": "#\/Bounds",
                        "@": "Bounds"
                    }
                }
            },
            {
                "@name": "active",
                "shortdesc": "True if this element is active.",
                "description": "An active control is the one with keyboard focus\u2014that is, the one that accepts keystrokes, or in the case of a ;Button, is selected when the user types Return or Enter in Windows, or the space bar in Mac OS.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "shortcutKey",
                "shortdesc": "The key sequence that invokes the ;onShortcutKey() ;callback for this element (in Windows only).",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "alignment",
                "shortdesc": "The alignment style for this element. If defined, this value overrides the alignChildren setting for the parent container.",
                "description": {
                    "li": [
                        "For orientation=row:top, bottom, fill",
                        "For orientation=column: left, right, fill",
                        "For orientation=stack:top, bottom, left, right, fill"
                    ],
                    "@": "This can be a single string, which indicates the alignment for the orientation specified in the parent container, or an array of two strings, indicating both the horizontal and vertical alignment (in that order). Allowed values depend on the orientation value of the parent container. They are not case sensitive."
                },
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "children",
                "@rwaccess": "readonly",
                "shortdesc": "An array of child elements.",
                "datatype": {
                    "type": "Object",
                    "array": ""
                }
            },
            {
                "@name": "properties",
                "shortdesc": "An object that contains one or more creation properties of the container (properties used only when the element is created).",
                "description": {
                    "li": [
                        "multiline: When false (the default), the control displays a single line of text. When true, the control displays multiple lines, in which case the text wraps within the width of the control.",
                        "readonly: When false (the default),  the control accepts text input. When true, the control does not accept input but only displays the contents of the text property.",
                        "noecho: When false (the default), the control displays input text. When true, the control does not display input text (used for password input fields).",
                        {
                            "br": "onChange",
                            "@": "enterKeySignalsOnChange: When false (the default), the control signals an  event when the editable text is changed and the control loses the keyboard focus (that is, the user tabs to another control, clicks outside the control, or types Enter). When true, the control only signals an ;onChange() ;event when the editable text is changed and the user types Enter; other changes to the keyboard focus do not signal the event."
                        },
                        "wantReturn: Only applies to multiple line edit controls in ScriptUI Version 6.0 or later. When true the RETURN\/ENTER keystroke is considered as text-input advancing the cursor to the next line. The default value is false."
                    ],
                    "@": "Creation properties of an EditText object can include:"
                },
                "datatype": {
                    "type": "Object"
                }
            },
            {
                "@name": "enabled",
                "shortdesc": "True if this element is enabled.",
                "description": "An enabled element can accept input, according to its type. When false, control elements do not accept input, and all types of elements have a dimmed appearance.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "helpTip",
                "shortdesc": "The help text that is displayed when the mouse hovers over the element.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "indent",
                "shortdesc": "The number of pixels to indent the element during automatic layout.",
                "description": "Applies for column orientation and left alignment, or row orientation and top alignment.",
                "datatype": {
                    "type": "Number",
                    "min": "0"
                }
            },
            {
                "@name": "parent",
                "@rwaccess": "readonly",
                "shortdesc": "The parent element.",
                "datatype": {
                    "type": "Object"
                }
            },
            {
                "@name": "window",
                "@rwaccess": "readonly",
                "shortdesc": "The window that this element belongs to.",
                "datatype": {
                    "type": {
                        "@href": "#\/Window",
                        "@": "Window"
                    }
                }
            },
            {
                "@name": "type",
                "@rwaccess": "readonly",
                "shortdesc": "The element type; \"edittext\".",
                "datatype": {
                    "type": "String"
                }
            }
        ],
        "methods": [
            {
                "@name": "show",
                "shortdesc": "Shows this element.",
                "description": "When a window or container is hidden, its children are also hidden, but when it is shown again, the children retain their own visibility states."
            },
            {
                "@name": "hide",
                "shortdesc": "Hides this element."
            },
            {
                "@name": "notify",
                "shortdesc": "Sends a notification message, simulating the specified user interaction event.",
                "parameters": {
                    "parameter": {
                        "@name": "eventName",
                        "@optional": "true",
                        "shortdesc": "The name of the control event handler to call.",
                        "description": "One of: onClick, onChange, onChanging. By default, simulates the onChange event for an edittext control, an onClick event for controls that support that event.",
                        "datatype": {
                            "type": "String"
                        }
                    }
                }
            },
            {
                "@name": "addEventListener",
                "shortdesc": "Registers an event handler for a particular type of event occuring in this element.",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "eventName",
                            "shortdesc": "The name of the event.",
                            "description": "Event names are listed in the JavaScript Tools Guide.",
                            "datatype": {
                                "type": "String"
                            }
                        },
                        {
                            "@name": "handler",
                            "shortdesc": "The function that handles the event.",
                            "description": "This can be the name of a function defined in the extension, or a locally defined handler function to be executed when the event occurs. A handler function takes one argument, the ;UIEvent ;object.",
                            "datatype": {
                                "type": {
                                    "@href": "$COMMON\/javascript.xml#\/Function",
                                    "@": "Function"
                                }
                            }
                        },
                        {
                            "@name": "capturePhase",
                            "shortdesc": "When true, the handler is called only in the capturing phase of the event propagation.",
                            "description": "Default is false, meaning that the handler is called in the bubbling phase if this object is an ancestor of the target, or in the at-target phase if this object is itself the target.",
                            "datatype": {
                                "type": "Boolean",
                                "value": "false"
                            }
                        }
                    ]
                },
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "removeEventListener",
                "shortdesc": "Unregisters an event handler for a particular type of event occuring in this element.",
                "description": "All arguments must be identical to those that were used to register the event handler.",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "eventName",
                            "shortdesc": "The name of the event.",
                            "datatype": {
                                "type": "String"
                            }
                        },
                        {
                            "@name": "handler",
                            "shortdesc": "The function that handles the event.",
                            "datatype": {
                                "type": {
                                    "@href": "$COMMON\/javascript.xml#\/Function",
                                    "@": "Function"
                                }
                            }
                        },
                        {
                            "@name": "capturePhase",
                            "shortdesc": "Whether to call the handler only in the capturing phase of the event propagation.",
                            "datatype": {
                                "type": "Boolean",
                                "value": "false"
                            }
                        }
                    ]
                },
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "dispatchEvent",
                "shortdesc": "Simulates the occurrence of an event in this target.",
                "description": "A script can create a ;UIEvent ;object for a specific event and pass it to this method to start the event propagation for the event.",
                "datatype": {
                    "type": {
                        "@href": "#\/Event",
                        "@": "Event"
                    }
                }
            }
        ]
    },
    "ListBox": {
        "class": "ListBox",
        "superClass": null,
        "shortdesc": "Displays a list of choices, represented by ;ListItem ;objects.",
        "elementCount": 2,
        "propertyCount": 24,
        "methodCount": 10,
        "properties": [
            {
                "@name": "items",
                "@rwaccess": "readonly",
                "shortdesc": "The array of choice items displayed in the list.",
                "description": "Access this array with a 0-based index. To obtain the number of items in the list, use items.length.The objects are created when items are specified on creation of the parent list object, or afterward using the list control\u2019s ;add() ;method. Each item has a ;selected ;property that is true when it is in the selected state.",
                "datatype": {
                    "type": {
                        "@href": "#\/ListItem",
                        "@": "ListItem"
                    },
                    "array": ""
                }
            },
            {
                "@name": "itemSize",
                "shortdesc": "The width and height in pixels of each item in the list.",
                "description": "Used by auto-layout to determine the ;preferredSize ;of the list, if not otherwise specified. If not set explicitly, the size of each item is set to match the largest height and width among all items in the list",
                "datatype": {
                    "type": {
                        "@href": "#\/Dimension",
                        "@": "Dimension"
                    }
                }
            },
            {
                "@name": "selection",
                "shortdesc": "The currently selected item for a single-selection list, or an array of items for current selection in a multi-selection list.",
                "description": {
                    "li": [
                        "If you set the value to an array for a single-selection list, only the first item in the array is selected.",
                        "If you set the value to a single item for a multi-selection list, that item is added to the current selection."
                    ],
                    "@": "Setting this value causes the selected item to be highlighted and to be scrolled into view if necessary. If no items are selected, the value is null. Set to null to deselect all items. You can set the value using the index of an item or an array of indices, rather than object references. If set to an index value that is out of range, the operation is ignored. When set with index values, the property still returns object references."
                },
                "datatype": {
                    "type": {
                        "@href": "#\/ListItem",
                        "@": "ListItem"
                    }
                }
            },
            {
                "@name": "active",
                "shortdesc": "True if this element is active.",
                "description": "An active control is the one with keyboard focus\u2014that is, the one that accepts keystrokes, or in the case of a ;Button, is selected when the user types Return or Enter in Windows, or the space bar in Mac OS.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "shortcutKey",
                "shortdesc": "The key sequence that invokes the ;onShortcutKey() ;callback for this element (in Windows only).",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "graphics",
                "@rwaccess": "readonly",
                "shortdesc": "The graphics object that can be used to customize the element's appearance, in response to the ;onDraw() ;event.",
                "datatype": {
                    "type": {
                        "@href": "#\/ScriptUIGraphics",
                        "@": "ScriptUIGraphics"
                    }
                }
            },
            {
                "@name": "visible",
                "shortdesc": "True if this element is shown, false if it is hidden.",
                "description": "When a container is hidden, its children are also hidden, but they retain their own visibility values, and are shown or hidden accordingly when the parent is next shown.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "bounds",
                "shortdesc": "The boundaries of the element, in parent-relative coordinates.",
                "description": "Setting an element's size or location changes its bounds property, and vice-versa.",
                "datatype": {
                    "type": {
                        "@href": "#\/Bounds",
                        "@": "Bounds"
                    }
                }
            },
            {
                "@name": "location",
                "shortdesc": "The upper left corner of this element relative to its parent.",
                "description": "The location is defined as [bounds.x, bounds.y]. Setting an element's location changes its bounds property, and vice-versa.",
                "datatype": {
                    "type": {
                        "@href": "#\/Point",
                        "@": "Point"
                    }
                }
            },
            {
                "@name": "maximumSize",
                "shortdesc": "The maximum height and width to which the element can be resized.",
                "datatype": {
                    "type": {
                        "@href": "#\/Dimension",
                        "@": "Dimension"
                    }
                }
            },
            {
                "@name": "minimumSize",
                "shortdesc": "The minimum height and width to which the element can be resized.",
                "datatype": {
                    "type": {
                        "@href": "#\/Dimension",
                        "@": "Dimension"
                    }
                }
            },
            {
                "@name": "preferredSize",
                "shortdesc": "The preferred size, used by layout managers to determine the best size for each element.",
                "description": "If not explicitly set by a script, value is established by the UI framework in which ScriptUI is employed, and is based on such attributes of the element as its text, font, font size, icon size, and other UI framework-specific attributes.A script can explicitly set this value before the layout manager is invoked in order to establish an element size other than the default.",
                "datatype": {
                    "type": {
                        "@href": "#\/Dimension",
                        "@": "Dimension"
                    }
                }
            },
            {
                "@name": "size",
                "shortdesc": "The current dimensions of this element.",
                "description": "Initially undefined, and unless explicitly set by a script, it is defined by a ;LayoutManager ;. A script can explicitly set size before the layout manager is invoked to establish an element size other than the preferredSize or the default size, but this is not recommended. Defined as [bounds.width, bounds.height]. Setting an element's size changes its bounds property, and vice-versa.",
                "datatype": {
                    "type": {
                        "@href": "#\/Dimension",
                        "@": "Dimension"
                    }
                }
            },
            {
                "@name": "windowBounds",
                "@rwaccess": "readonly",
                "shortdesc": "The bounds of this element relative to the top-level parent window.",
                "datatype": {
                    "type": {
                        "@href": "#\/Bounds",
                        "@": "Bounds"
                    }
                }
            },
            {
                "@name": "alignment",
                "shortdesc": "The alignment style for this element. If defined, this value overrides the alignChildren setting for the parent container.",
                "description": {
                    "li": [
                        "For orientation=row:top, bottom, fill",
                        "For orientation=column: left, right, fill",
                        "For orientation=stack:top, bottom, left, right, fill"
                    ],
                    "@": "This can be a single string, which indicates the alignment for the orientation specified in the parent container, or an array of two strings, indicating both the horizontal and vertical alignment (in that order). Allowed values depend on the orientation value of the parent container. They are not case sensitive."
                },
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "children",
                "@rwaccess": "readonly",
                "shortdesc": "An array of child ;ListItem ;elements.",
                "datatype": {
                    "type": "Object",
                    "array": ""
                }
            },
            {
                "@name": "columns",
                "@rwaccess": "readonly",
                "shortdesc": "For a multi-column list box, the column properties.",
                "description": {
                    "li": [
                        "titles: An array of column title strings, whose length matches the number of columns specified at creation.",
                        "preferredWidths: An array of column widths, whose length matches the number of columns specified at creation.",
                        "visible: An array of boolean visible attributes, whose length matches the number of columns specified at creation.This property can be used to show\/hide a column. Avaiblable in ScriptUI Version 6.0 or later provided ScriptUI.frameworkName == 'Flex'."
                    ],
                    "@": "A JavaScript object with two read-only properties whose values are set by the creation parameters:"
                },
                "datatype": {
                    "type": "Object"
                }
            },
            {
                "@name": "properties",
                "shortdesc": "An object that contains one or more creation properties of the control (properties used only when the element is created).",
                "description": {
                    "li": [
                        "multiselect: When false (the default), only one item can be selected. When true, multiple items can be selected.",
                        "items: An array of strings for the text of each list item. An item object is created for each item. An item with the text string \"-\" creates a separator item. Supply this property, or the items argument to the ;add() ;method, not both. This form is most useful for elements defined using Resource Specifications.",
                        "numberOfColumns: A number of columns in which to display the items; default is 1. When there are multiple columns, each ;ListItem ;object represents a selectable row. Its ;text ;and ;image ;values specify the label in the first column, and the ;subitems ;property specifies the labels in the additional columns.",
                        "showHeaders: True to display column titles.",
                        "columnWidths: An array of numbers for the preferred width in pixels of each column.",
                        "columnTitles: A corresponding array of strings for the title of each column, to be shown if showHeaders is true."
                    ],
                    "@": "Creation properties of a ListBox object can include:"
                },
                "datatype": {
                    "type": "Object"
                }
            },
            {
                "@name": "enabled",
                "shortdesc": "True if this element is enabled.",
                "description": "An enabled element can accept input, according to its type. When false, control elements do not accept input, and all types of elements have a dimmed appearance.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "helpTip",
                "shortdesc": "The help text that is displayed when the mouse hovers over the element.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "indent",
                "shortdesc": "The number of pixels to indent the element during automatic layout.",
                "description": "Applies for column orientation and left alignment, or row orientation and top alignment.",
                "datatype": {
                    "type": "Number",
                    "min": "0"
                }
            },
            {
                "@name": "parent",
                "@rwaccess": "readonly",
                "shortdesc": "The parent element.",
                "datatype": {
                    "type": "Object"
                }
            },
            {
                "@name": "window",
                "@rwaccess": "readonly",
                "shortdesc": "The window that this element belongs to.",
                "datatype": {
                    "type": {
                        "@href": "#\/Window",
                        "@": "Window"
                    }
                }
            },
            {
                "@name": "type",
                "@rwaccess": "readonly",
                "shortdesc": "The element type; \"listbox\".",
                "datatype": {
                    "type": "String"
                }
            }
        ],
        "methods": [
            {
                "@name": "add",
                "shortdesc": "Adds an item to the choices in this list.",
                "description": "Returns the item control object. If this is a multi-column list box, each added ;ListItem ;represents one selectable row.  Its ;text ;and ;image ;values specify the label in the first column, and the ;subitems ;property specifies the labels in the additional columns.",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "type",
                            "shortdesc": "The type of the child element, the string \"item\".",
                            "datatype": {
                                "type": "String"
                            }
                        },
                        {
                            "@name": "text",
                            "@optional": "true",
                            "shortdesc": "The localizable text label for the item.",
                            "datatype": {
                                "type": "String"
                            }
                        }
                    ]
                },
                "datatype": {
                    "type": {
                        "@href": "#\/ListItem",
                        "@": "ListItem"
                    }
                }
            },
            {
                "@name": "find",
                "shortdesc": "Retrieves an item object from the list that has a given text label.",
                "parameters": {
                    "parameter": {
                        "@name": "text",
                        "shortdesc": "The text string to match.",
                        "datatype": {
                            "type": "String"
                        }
                    }
                },
                "datatype": {
                    "type": {
                        "@href": "#\/ListItem",
                        "@": "ListItem"
                    }
                }
            },
            {
                "@name": "remove",
                "shortdesc": "Removes a child item from the list.",
                "parameters": {
                    "parameter": {
                        "@name": "what",
                        "shortdesc": "The item or child to remove, specified by 0-based index, text value, or as a ;ListItem ;object.",
                        "datatype": {
                            "type": "Any"
                        }
                    }
                }
            },
            {
                "@name": "removeAll",
                "shortdesc": "Removes all child items from the list."
            },
            {
                "@name": "notify",
                "shortdesc": "Sends a notification message, simulating the specified user interaction event.",
                "parameters": {
                    "parameter": {
                        "@name": "eventName",
                        "@optional": "true",
                        "shortdesc": "The name of the control event handler to call.",
                        "description": "One of: onClick, onChange, onChanging. By default, simulates the onChange event for an edittext control, an onClick event for controls that support that event.",
                        "datatype": {
                            "type": "String"
                        }
                    }
                }
            },
            {
                "@name": "show",
                "shortdesc": "Shows this element.",
                "description": "When a window or container is hidden, its children are also hidden, but when it is shown again, the children retain their own visibility states."
            },
            {
                "@name": "hide",
                "shortdesc": "Hides this element."
            },
            {
                "@name": "addEventListener",
                "shortdesc": "Registers an event handler for a particular type of event occuring in this element.",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "eventName",
                            "shortdesc": "The name of the event.",
                            "description": "Event names are listed in the JavaScript Tools Guide.",
                            "datatype": {
                                "type": "String"
                            }
                        },
                        {
                            "@name": "handler",
                            "shortdesc": "The function that handles the event.",
                            "description": "This can be the name of a function defined in the extension, or a locally defined handler function to be executed when the event occurs. A handler function takes one argument, the ;UIEvent ;object.",
                            "datatype": {
                                "type": {
                                    "@href": "$COMMON\/javascript.xml#\/Function",
                                    "@": "Function"
                                }
                            }
                        },
                        {
                            "@name": "capturePhase",
                            "shortdesc": "When true, the handler is called only in the capturing phase of the event propagation.",
                            "description": "Default is false, meaning that the handler is called in the bubbling phase if this object is an ancestor of the target, or in the at-target phase if this object is itself the target.",
                            "datatype": {
                                "type": "Boolean",
                                "value": "false"
                            }
                        }
                    ]
                },
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "removeEventListener",
                "shortdesc": "Unregisters an event handler for a particular type of event occuring in this element.",
                "description": "All arguments must be identical to those that were used to register the event handler.",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "eventName",
                            "shortdesc": "The name of the event.",
                            "datatype": {
                                "type": "String"
                            }
                        },
                        {
                            "@name": "handler",
                            "shortdesc": "The function that handles the event.",
                            "datatype": {
                                "type": {
                                    "@href": "$COMMON\/javascript.xml#\/Function",
                                    "@": "Function"
                                }
                            }
                        },
                        {
                            "@name": "capturePhase",
                            "shortdesc": "Whether to call the handler only in the capturing phase of the event propagation.",
                            "datatype": {
                                "type": "Boolean",
                                "value": "false"
                            }
                        }
                    ]
                },
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "dispatchEvent",
                "shortdesc": "Simulates the occurrence of an event in this target.",
                "description": "A script can create a ;UIEvent ;object for a specific event and pass it to this method to start the event propagation for the event.",
                "datatype": {
                    "type": {
                        "@href": "#\/Event",
                        "@": "Event"
                    }
                }
            }
        ]
    },
    "DropDownList": {
        "class": "DropDownList",
        "superClass": null,
        "shortdesc": "Displays a single visible item. When you click the control, a list drops down or pops up, and allows you to select one of the other items in the list.",
        "elementCount": 2,
        "propertyCount": 23,
        "methodCount": 10,
        "properties": [
            {
                "@name": "items",
                "@rwaccess": "readonly",
                "shortdesc": "The array of choice items displayed in the drop-down or pop-up list.",
                "description": {
                    "br": "items.length",
                    "@": "Access this array with a 0-based index. To obtain the number of items in the list, use .The objects are created when items are specified on creation of the parent list object, or afterward using the list control\u2019s ;add() ;method. Items in a drop-down list can be of type separator, in which case they cannot be selected, and are shown as a horizontal line. Each item has a ;selected ;property that is true when it is in the selected state."
                },
                "datatype": {
                    "type": {
                        "@href": "#\/ListItem",
                        "@": "ListItem"
                    },
                    "array": ""
                }
            },
            {
                "@name": "itemSize",
                "shortdesc": "The width and height in pixels of each item in the list.",
                "description": "Used by auto-layout to determine the ;preferredSize ;of the list, if not otherwise specified. If not set explicitly, the size of each item is set to match the largest height and width among all items in the list",
                "datatype": {
                    "type": {
                        "@href": "#\/Dimension",
                        "@": "Dimension"
                    }
                }
            },
            {
                "@name": "selection",
                "shortdesc": "The currently selected  list item.",
                "description": "Setting this value causes the selected item to be highlighted and to be scrolled into view if necessary. If no items are selected, the value is null. Set to null to deselect all items.You can set the value using the index of an item, rather than an object reference. If set to an index value that is out of range, the operation is ignored. When set with an index value, the property still returns an object reference.",
                "datatype": {
                    "type": {
                        "@href": "#\/ListItem",
                        "@": "ListItem"
                    }
                }
            },
            {
                "@name": "active",
                "shortdesc": "True if this element is active.",
                "description": "An active control is the one with keyboard focus\u2014that is, the one that accepts keystrokes, or in the case of a ;Button, is selected when the user types Return or Enter in Windows, or the space bar in Mac OS.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "shortcutKey",
                "shortdesc": "The key sequence that invokes the ;onShortcutKey() ;callback for this element (in Windows only).",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "graphics",
                "@rwaccess": "readonly",
                "shortdesc": "The graphics object that can be used to customize the element's appearance, in response to the ;onDraw() ;event.",
                "datatype": {
                    "type": {
                        "@href": "#\/ScriptUIGraphics",
                        "@": "ScriptUIGraphics"
                    }
                }
            },
            {
                "@name": "visible",
                "shortdesc": "True if this element is shown, false if it is hidden.",
                "description": "When a container is hidden, its children are also hidden, but they retain their own visibility values, and are shown or hidden accordingly when the parent is next shown.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "bounds",
                "shortdesc": "The boundaries of the element, in parent-relative coordinates.",
                "description": "Setting an element's size or location changes its bounds property, and vice-versa.",
                "datatype": {
                    "type": {
                        "@href": "#\/Bounds",
                        "@": "Bounds"
                    }
                }
            },
            {
                "@name": "location",
                "shortdesc": "The upper left corner of this element relative to its parent.",
                "description": "The location is defined as [bounds.x, bounds.y]. Setting an element's location changes its bounds property, and vice-versa.",
                "datatype": {
                    "type": {
                        "@href": "#\/Point",
                        "@": "Point"
                    }
                }
            },
            {
                "@name": "maximumSize",
                "shortdesc": "The maximum height and width to which the element can be resized.",
                "datatype": {
                    "type": {
                        "@href": "#\/Dimension",
                        "@": "Dimension"
                    }
                }
            },
            {
                "@name": "minimumSize",
                "shortdesc": "The minimum height and width to which the element can be resized.",
                "datatype": {
                    "type": {
                        "@href": "#\/Dimension",
                        "@": "Dimension"
                    }
                }
            },
            {
                "@name": "preferredSize",
                "shortdesc": "The preferred size, used by layout managers to determine the best size for each element.",
                "description": "If not explicitly set by a script, value is established by the UI framework in which ScriptUI is employed, and is based on such attributes of the element as its text, font, font size, icon size, and other UI framework-specific attributes.A script can explicitly set this value before the layout manager is invoked in order to establish an element size other than the default.",
                "datatype": {
                    "type": {
                        "@href": "#\/Dimension",
                        "@": "Dimension"
                    }
                }
            },
            {
                "@name": "size",
                "shortdesc": "The current dimensions of this element.",
                "description": "Initially undefined, and unless explicitly set by a script, it is defined by a ;LayoutManager ;. A script can explicitly set size before the layout manager is invoked to establish an element size other than the preferredSize or the default size, but this is not recommended. Defined as [bounds.width, bounds.height]. Setting an element's size changes its bounds property, and vice-versa.",
                "datatype": {
                    "type": {
                        "@href": "#\/Dimension",
                        "@": "Dimension"
                    }
                }
            },
            {
                "@name": "windowBounds",
                "@rwaccess": "readonly",
                "shortdesc": "The bounds of this element relative to the top-level parent window.",
                "datatype": {
                    "type": {
                        "@href": "#\/Bounds",
                        "@": "Bounds"
                    }
                }
            },
            {
                "@name": "alignment",
                "shortdesc": "The alignment style for this element. If defined, this value overrides the alignChildren setting for the parent container.",
                "description": {
                    "li": [
                        "For orientation=row:top, bottom, fill",
                        "For orientation=column: left, right, fill",
                        "For orientation=stack:top, bottom, left, right, fill"
                    ],
                    "@": "This can be a single string, which indicates the alignment for the orientation specified in the parent container, or an array of two strings, indicating both the horizontal and vertical alignment (in that order). Allowed values depend on the orientation value of the parent container. They are not case sensitive."
                },
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "children",
                "@rwaccess": "readonly",
                "shortdesc": "An array of child elements.",
                "datatype": {
                    "type": "Object",
                    "array": ""
                }
            },
            {
                "@name": "properties",
                "shortdesc": "An object that contains one or more creation properties of the container (properties used only when the element is created).",
                "description": {
                    "li": "items: An array of strings for the text of each list item. An item object is created for each item. An item with the text string \"-\" creates a separator item. Supply this property, or the items argument to the ;add() ;method, not both. This form is most useful for elements defined using Resource Specifications.",
                    "@": "Creation properties of a DropDownList object can include:"
                },
                "datatype": {
                    "type": "Object"
                }
            },
            {
                "@name": "enabled",
                "shortdesc": "True if this element is enabled.",
                "description": "An enabled element can accept input, according to its type. When false, control elements do not accept input, and all types of elements have a dimmed appearance.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "helpTip",
                "shortdesc": "The help text that is displayed when the mouse hovers over the element.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "indent",
                "shortdesc": "The number of pixels to indent the element during automatic layout.",
                "description": "Applies for column orientation and left alignment, or row orientation and top alignment.",
                "datatype": {
                    "type": "Number",
                    "min": "0"
                }
            },
            {
                "@name": "parent",
                "@rwaccess": "readonly",
                "shortdesc": "The parent element.",
                "datatype": {
                    "type": "Object"
                }
            },
            {
                "@name": "window",
                "@rwaccess": "readonly",
                "shortdesc": "The window that this element belongs to.",
                "datatype": {
                    "type": {
                        "@href": "#\/Window",
                        "@": "Window"
                    }
                }
            },
            {
                "@name": "type",
                "@rwaccess": "readonly",
                "shortdesc": "The element type; \"dropdownlist\".",
                "datatype": {
                    "type": "String"
                }
            }
        ],
        "methods": [
            {
                "@name": "add",
                "shortdesc": "Adds an item or separator to the choices in this list.",
                "description": "Returns the item control object for type=\"item\", or null for type=\"separator\".",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "type",
                            "shortdesc": "The type of the child element.",
                            "description": "Either item (a basic, selectable item with a text label) or separator",
                            "datatype": {
                                "type": "String"
                            }
                        },
                        {
                            "@name": "text",
                            "@optional": "true",
                            "shortdesc": "The localizable text label for the item.",
                            "datatype": {
                                "type": "String"
                            }
                        }
                    ]
                },
                "datatype": {
                    "type": {
                        "@href": "#\/ListItem",
                        "@": "ListItem"
                    }
                }
            },
            {
                "@name": "find",
                "shortdesc": "Retrieves an item object from the list that has a given text label.",
                "parameters": {
                    "parameter": {
                        "@name": "text",
                        "shortdesc": "The text string to match.",
                        "datatype": {
                            "type": "String"
                        }
                    }
                },
                "datatype": {
                    "type": {
                        "@href": "#\/ListItem",
                        "@": "ListItem"
                    }
                }
            },
            {
                "@name": "remove",
                "shortdesc": "Removes a child item from the list.",
                "parameters": {
                    "parameter": {
                        "@name": "what",
                        "shortdesc": "The item or child to remove, specified by 0-based index, text value, or as a ;ListItem ;object.",
                        "datatype": {
                            "type": "Any"
                        }
                    }
                }
            },
            {
                "@name": "removeAll",
                "shortdesc": "Removes all child items from the list."
            },
            {
                "@name": "notify",
                "shortdesc": "Sends a notification message, simulating the specified user interaction event.",
                "parameters": {
                    "parameter": {
                        "@name": "eventName",
                        "@optional": "true",
                        "shortdesc": "The name of the control event handler to call.",
                        "description": "One of: onClick, onChange, onChanging. By default, simulates the onChange event for an edittext control, an onClick event for controls that support that event.",
                        "datatype": {
                            "type": "String"
                        }
                    }
                }
            },
            {
                "@name": "show",
                "shortdesc": "Shows this element.",
                "description": "When a window or container is hidden, its children are also hidden, but when it is shown again, the children retain their own visibility states."
            },
            {
                "@name": "hide",
                "shortdesc": "Hides this element."
            },
            {
                "@name": "addEventListener",
                "shortdesc": "Registers an event handler for a particular type of event occuring in this element.",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "eventName",
                            "shortdesc": "The name of the event.",
                            "description": "Event names are listed in the JavaScript Tools Guide.",
                            "datatype": {
                                "type": "String"
                            }
                        },
                        {
                            "@name": "handler",
                            "shortdesc": "The function that handles the event.",
                            "description": "This can be the name of a function defined in the extension, or a locally defined handler function to be executed when the event occurs. A handler function takes one argument, the ;UIEvent ;object.",
                            "datatype": {
                                "type": {
                                    "@href": "$COMMON\/javascript.xml#\/Function",
                                    "@": "Function"
                                }
                            }
                        },
                        {
                            "@name": "capturePhase",
                            "shortdesc": "When true, the handler is called only in the capturing phase of the event propagation.",
                            "description": "Default is false, meaning that the handler is called in the bubbling phase if this object is an ancestor of the target, or in the at-target phase if this object is itself the target.",
                            "datatype": {
                                "type": "Boolean",
                                "value": "false"
                            }
                        }
                    ]
                },
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "removeEventListener",
                "shortdesc": "Unregisters an event handler for a particular type of event occuring in this element.",
                "description": "All arguments must be identical to those that were used to register the event handler.",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "eventName",
                            "shortdesc": "The name of the event.",
                            "datatype": {
                                "type": "String"
                            }
                        },
                        {
                            "@name": "handler",
                            "shortdesc": "The function that handles the event.",
                            "datatype": {
                                "type": {
                                    "@href": "$COMMON\/javascript.xml#\/Function",
                                    "@": "Function"
                                }
                            }
                        },
                        {
                            "@name": "capturePhase",
                            "shortdesc": "Whether to call the handler only in the capturing phase of the event propagation.",
                            "datatype": {
                                "type": "Boolean",
                                "value": "false"
                            }
                        }
                    ]
                },
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "dispatchEvent",
                "shortdesc": "Simulates the occurrence of an event in this target.",
                "description": "A script can create a ;UIEvent ;object for a specific event and pass it to this method to start the event propagation for the event.",
                "datatype": {
                    "type": {
                        "@href": "#\/Event",
                        "@": "Event"
                    }
                }
            }
        ]
    },
    "ListItem": {
        "class": "ListItem",
        "superClass": null,
        "shortdesc": "An item in a list box, drop-down list, or tree view.",
        "elementCount": 1,
        "propertyCount": 10,
        "methodCount": 0,
        "properties": [
            {
                "@name": "checked",
                "shortdesc": "The checked state of an item in a list.",
                "description": "When true, the item is marked with the platform-appropriate checkmark. When false, no checkmark is drawn, but space is reserved for it in the left margin, so that the item lines up with other checkable items. When undefined, no space is reserved for a checkmark.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "expanded",
                "shortdesc": "The expansion state of an item of type node that is a child of a ;TreeView ;list control.",
                "description": "When true, the item is in the expanded state and its children are shown, when false, it is collapsed and children are hidden.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "index",
                "@rwaccess": "readonly",
                "shortdesc": "The 0-based index of this item in the items collection of its parent list control.",
                "datatype": {
                    "type": "Number"
                }
            },
            {
                "@name": "selected",
                "shortdesc": "The selection state of this item.",
                "description": "When true, the item is part of the selection for its parent list. When false, the item is not selected. Set to true to select this item in a single-selection list, or to add it to the selection array for a multi-selection list.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "image",
                "shortdesc": "An image object for an icon to display in the item.",
                "description": "When specified, the image appropriate to the selections state is drawn to the left of the text label. If the parent is a multi-column list box, this describes the label in the first column. Labels in additional columns are described by the ;subitems ;property.",
                "datatype": {
                    "type": {
                        "@href": "#\/ScriptUIImage",
                        "@": "ScriptUIImage"
                    }
                }
            },
            {
                "@name": "text",
                "shortdesc": "The label text to display for the item, a localizable string.",
                "description": "If the parent is a multi-column list box, this describes the label in the first column. Labels in additional columns are described by the ;subitems ;property.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "subItems",
                "@rwaccess": "readonly",
                "shortdesc": "When the parent is a multi-column ;ListBox, this describes the labels for this selectable row in additional columns.",
                "description": {
                    "li": [
                        "text: A display string for the corresponding label.",
                        "image: An ;ScriptUIImage ;object for the corresponding label."
                    ],
                    "@": "A array of JavaScript objects whose length is one less than the number of columns. The first member describes the label in the second column. Each member object has two properties, of which you can specify one or both:"
                },
                "datatype": {
                    "type": "Array"
                }
            },
            {
                "@name": "properties",
                "shortdesc": "An object that contains one or more creation properties of the item (properties used only when the element is created).",
                "description": "A ListItem object has no creation properties.",
                "datatype": {
                    "type": "Object"
                }
            },
            {
                "@name": "parent",
                "@rwaccess": "readonly",
                "shortdesc": "The parent element, a list control.",
                "datatype": {
                    "type": "Object"
                }
            },
            {
                "@name": "type",
                "@rwaccess": "readonly",
                "shortdesc": "The element type.",
                "description": "Normally \"item\", but an item whose parent is a ;DropDownList ;control can have type \"separator\". A separator item is not mouse-sensitive and is drawn as a horizontal line across the drop-down or pop-up menu.",
                "datatype": {
                    "type": "String"
                }
            }
        ],
        "methods": []
    },
    "Checkbox": {
        "class": "Checkbox",
        "superClass": null,
        "shortdesc": "A dual-state control showing a box that has a checkmark when the ;value ;is true, and is empty when the ;value ;is false.",
        "elementCount": 2,
        "propertyCount": 24,
        "methodCount": 6,
        "properties": [
            {
                "@name": "value",
                "shortdesc": "The selection state of the control.",
                "description": "When true, the control is in the selected or set state and displays the check mark. When false, shows an empty box.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "characters",
                "shortdesc": "A number of characters for which to reserve space when calculating the preferred size of the element.",
                "datatype": {
                    "type": "Number",
                    "min": "0"
                }
            },
            {
                "@name": "justify",
                "shortdesc": "The default text justification style for child text elements.",
                "description": "One of left, center, or right. Justification only works if this value is set on creation of the element.",
                "datatype": {
                    "type": "String",
                    "value": "left"
                }
            },
            {
                "@name": "text",
                "shortdesc": "The text to display, a localizable string.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "active",
                "shortdesc": "True if this element is active.",
                "description": "An active control is the one with keyboard focus\u2014that is, the one that accepts keystrokes, or in the case of a ;Button, is selected when the user types Return or Enter in Windows, or the space bar in Mac OS.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "shortcutKey",
                "shortdesc": "The key sequence that invokes the ;onShortcutKey() ;callback for this element (in Windows only).",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "graphics",
                "@rwaccess": "readonly",
                "shortdesc": "The graphics object that can be used to customize the element's appearance, in response to the ;onDraw() ;event.",
                "datatype": {
                    "type": {
                        "@href": "#\/ScriptUIGraphics",
                        "@": "ScriptUIGraphics"
                    }
                }
            },
            {
                "@name": "visible",
                "shortdesc": "True if this element is shown, false if it is hidden.",
                "description": "When a container is hidden, its children are also hidden, but they retain their own visibility values, and are shown or hidden accordingly when the parent is next shown.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "bounds",
                "shortdesc": "The boundaries of the element, in parent-relative coordinates.",
                "description": "Setting an element's size or location changes its bounds property, and vice-versa.",
                "datatype": {
                    "type": {
                        "@href": "#\/Bounds",
                        "@": "Bounds"
                    }
                }
            },
            {
                "@name": "location",
                "shortdesc": "The upper left corner of this element relative to its parent.",
                "description": "The location is defined as [bounds.x, bounds.y]. Setting an element's location changes its bounds property, and vice-versa.",
                "datatype": {
                    "type": {
                        "@href": "#\/Point",
                        "@": "Point"
                    }
                }
            },
            {
                "@name": "maximumSize",
                "shortdesc": "The maximum height and width to which the element can be resized.",
                "datatype": {
                    "type": {
                        "@href": "#\/Dimension",
                        "@": "Dimension"
                    }
                }
            },
            {
                "@name": "minimumSize",
                "shortdesc": "The minimum height and width to which the element can be resized.",
                "datatype": {
                    "type": {
                        "@href": "#\/Dimension",
                        "@": "Dimension"
                    }
                }
            },
            {
                "@name": "preferredSize",
                "shortdesc": "The preferred size, used by layout managers to determine the best size for each element.",
                "description": "If not explicitly set by a script, value is established by the UI framework in which ScriptUI is employed, and is based on such attributes of the element as its text, font, font size, icon size, and other UI framework-specific attributes.A script can explicitly set this value before the layout manager is invoked in order to establish an element size other than the default.",
                "datatype": {
                    "type": {
                        "@href": "#\/Dimension",
                        "@": "Dimension"
                    }
                }
            },
            {
                "@name": "size",
                "shortdesc": "The current dimensions of this element.",
                "description": "Initially undefined, and unless explicitly set by a script, it is defined by a ;LayoutManager ;. A script can explicitly set size before the layout manager is invoked to establish an element size other than the preferredSize or the default size, but this is not recommended. Defined as [bounds.width, bounds.height]. Setting an element's size changes its bounds property, and vice-versa.",
                "datatype": {
                    "type": {
                        "@href": "#\/Dimension",
                        "@": "Dimension"
                    }
                }
            },
            {
                "@name": "windowBounds",
                "@rwaccess": "readonly",
                "shortdesc": "The bounds of this element relative to the top-level parent window.",
                "datatype": {
                    "type": {
                        "@href": "#\/Bounds",
                        "@": "Bounds"
                    }
                }
            },
            {
                "@name": "alignment",
                "shortdesc": "The alignment style for this element. If defined, this value overrides the alignChildren setting for the parent container.",
                "description": {
                    "li": [
                        "For orientation=row:top, bottom, fill",
                        "For orientation=column: left, right, fill",
                        "For orientation=stack:top, bottom, left, right, fill"
                    ],
                    "@": "This can be a single string, which indicates the alignment for the orientation specified in the parent container, or an array of two strings, indicating both the horizontal and vertical alignment (in that order). Allowed values depend on the orientation value of the parent container. They are not case sensitive."
                },
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "children",
                "@rwaccess": "readonly",
                "shortdesc": "An array of child elements.",
                "datatype": {
                    "type": "Object",
                    "array": ""
                }
            },
            {
                "@name": "properties",
                "shortdesc": "An object that contains one or more creation properties of the item (properties used only when the element is created).",
                "description": "A CheckBox object has no creation properties. The third argument to the ;add() ;method that creates it is the text to be displayed.",
                "datatype": {
                    "type": "Object"
                }
            },
            {
                "@name": "enabled",
                "shortdesc": "True if this element is enabled.",
                "description": "An enabled element can accept input, according to its type. When false, control elements do not accept input, and all types of elements have a dimmed appearance.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "helpTip",
                "shortdesc": "The help text that is displayed when the mouse hovers over the element.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "indent",
                "shortdesc": "The number of pixels to indent the element during automatic layout.",
                "description": "Applies for column orientation and left alignment, or row orientation and top alignment.",
                "datatype": {
                    "type": "Number",
                    "min": "0"
                }
            },
            {
                "@name": "parent",
                "@rwaccess": "readonly",
                "shortdesc": "The parent element.",
                "datatype": {
                    "type": "Object"
                }
            },
            {
                "@name": "window",
                "@rwaccess": "readonly",
                "shortdesc": "The window that this element belongs to.",
                "datatype": {
                    "type": {
                        "@href": "#\/Window",
                        "@": "Window"
                    }
                }
            },
            {
                "@name": "type",
                "@rwaccess": "readonly",
                "shortdesc": "The element type; \"checkbox\".",
                "datatype": {
                    "type": "String"
                }
            }
        ],
        "methods": [
            {
                "@name": "notify",
                "shortdesc": "Sends a notification message, simulating the specified user interaction event.",
                "parameters": {
                    "parameter": {
                        "@name": "eventName",
                        "@optional": "true",
                        "shortdesc": "The name of the control event handler to call.",
                        "description": "One of: onClick, onChange, onChanging. By default, simulates the onChange event for an edittext control, an onClick event for controls that support that event.",
                        "datatype": {
                            "type": "String"
                        }
                    }
                }
            },
            {
                "@name": "show",
                "shortdesc": "Shows this element.",
                "description": "When a window or container is hidden, its children are also hidden, but when it is shown again, the children retain their own visibility states."
            },
            {
                "@name": "hide",
                "shortdesc": "Hides this element."
            },
            {
                "@name": "addEventListener",
                "shortdesc": "Registers an event handler for a particular type of event occuring in this element.",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "eventName",
                            "shortdesc": "The name of the event.",
                            "description": "Event names are listed in the JavaScript Tools Guide.",
                            "datatype": {
                                "type": "String"
                            }
                        },
                        {
                            "@name": "handler",
                            "shortdesc": "The function that handles the event.",
                            "description": "This can be the name of a function defined in the extension, or a locally defined handler function to be executed when the event occurs. A handler function takes one argument, the ;UIEvent ;object.",
                            "datatype": {
                                "type": {
                                    "@href": "$COMMON\/javascript.xml#\/Function",
                                    "@": "Function"
                                }
                            }
                        },
                        {
                            "@name": "capturePhase",
                            "shortdesc": "When true, the handler is called only in the capturing phase of the event propagation.",
                            "description": "Default is false, meaning that the handler is called in the bubbling phase if this object is an ancestor of the target, or in the at-target phase if this object is itself the target.",
                            "datatype": {
                                "type": "Boolean",
                                "value": "false"
                            }
                        }
                    ]
                },
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "removeEventListener",
                "shortdesc": "Unregisters an event handler for a particular type of event occuring in this element.",
                "description": "All arguments must be identical to those that were used to register the event handler.",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "eventName",
                            "shortdesc": "The name of the event.",
                            "datatype": {
                                "type": "String"
                            }
                        },
                        {
                            "@name": "handler",
                            "shortdesc": "The function that handles the event.",
                            "datatype": {
                                "type": {
                                    "@href": "$COMMON\/javascript.xml#\/Function",
                                    "@": "Function"
                                }
                            }
                        },
                        {
                            "@name": "capturePhase",
                            "shortdesc": "Whether to call the handler only in the capturing phase of the event propagation.",
                            "datatype": {
                                "type": "Boolean",
                                "value": "false"
                            }
                        }
                    ]
                },
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "dispatchEvent",
                "shortdesc": "Simulates the occurrence of an event in this target.",
                "description": "A script can create a ;UIEvent ;object for a specific event and pass it to this method to start the event propagation for the event.",
                "datatype": {
                    "type": {
                        "@href": "#\/Event",
                        "@": "Event"
                    }
                }
            }
        ]
    },
    "Scrollbar": {
        "class": "Scrollbar",
        "superClass": null,
        "shortdesc": "A scrollbar with a draggable scroll indicator and stepper buttons to move the indicator.",
        "elementCount": 2,
        "propertyCount": 25,
        "methodCount": 6,
        "properties": [
            {
                "@name": "stepdelta",
                "shortdesc": "The amount by which to increment or decrement a scrollbar element's position when the user clicks a stepper button.",
                "datatype": {
                    "type": "Number",
                    "min": "0"
                }
            },
            {
                "@name": "jumpdelta",
                "shortdesc": "The amount to increment or decrement a scrollbar indicator's position when the user clicks ahead or behind the moveable element.",
                "description": "Default is 20% of the range between the maxvalue and minvalue property values.",
                "datatype": {
                    "type": "Number",
                    "min": "0"
                }
            },
            {
                "@name": "value",
                "shortdesc": "The current position of the indicator.",
                "description": "If set to a value outside the range specified by minvalue and maxvalue, it is automatically reset to the closest boundary.",
                "datatype": {
                    "type": "Number"
                }
            },
            {
                "@name": "minvalue",
                "shortdesc": "The minimum value allowed in the value property.",
                "description": "Together with  ;maxvalue, sets the scrolling range.Default is 0.",
                "datatype": {
                    "type": "Number"
                }
            },
            {
                "@name": "maxvalue",
                "shortdesc": "The maximum value allowed in the value property.",
                "description": "Together with ;minvalue, sets the scrolling range. Default is 100.",
                "datatype": {
                    "type": "Number"
                }
            },
            {
                "@name": "active",
                "shortdesc": "True if this element is active.",
                "description": "An active control is the one with keyboard focus\u2014that is, the one that accepts keystrokes, or in the case of a ;Button, is selected when the user types Return or Enter in Windows, or the space bar in Mac OS.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "shortcutKey",
                "shortdesc": "The key sequence that invokes the  ;onShortcutKey() ;callback for this element (in Windows only).",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "graphics",
                "@rwaccess": "readonly",
                "shortdesc": "The graphics object that can be used to customize the element's appearance, in response to the ;onDraw() ;event.",
                "datatype": {
                    "type": {
                        "@href": "#\/ScriptUIGraphics",
                        "@": "ScriptUIGraphics"
                    }
                }
            },
            {
                "@name": "visible",
                "shortdesc": "True if this element is shown, false if it is hidden.",
                "description": "When a container is hidden, its children are also hidden, but they retain their own visibility values, and are shown or hidden accordingly when the parent is next shown.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "bounds",
                "shortdesc": "The boundaries of the element, in parent-relative coordinates.",
                "description": "Setting an element's size or location changes its bounds property, and vice-versa.",
                "datatype": {
                    "type": {
                        "@href": "#\/Bounds",
                        "@": "Bounds"
                    }
                }
            },
            {
                "@name": "location",
                "shortdesc": "The upper left corner of this element relative to its parent.",
                "description": "The location is defined as [bounds.x, bounds.y]. Setting an element's location changes its bounds property, and vice-versa.",
                "datatype": {
                    "type": {
                        "@href": "#\/Point",
                        "@": "Point"
                    }
                }
            },
            {
                "@name": "maximumSize",
                "shortdesc": "The maximum height and width to which the element can be resized.",
                "datatype": {
                    "type": {
                        "@href": "#\/Dimension",
                        "@": "Dimension"
                    }
                }
            },
            {
                "@name": "minimumSize",
                "shortdesc": "The minimum height and width to which the element can be resized.",
                "datatype": {
                    "type": {
                        "@href": "#\/Dimension",
                        "@": "Dimension"
                    }
                }
            },
            {
                "@name": "preferredSize",
                "shortdesc": "The preferred size, used by layout managers to determine the best size for each element.",
                "description": "If not explicitly set by a script, value is established by the UI framework in which ScriptUI is employed, and is based on such attributes of the element as its text, font, font size, icon size, and other UI framework-specific attributes.A script can explicitly set this value before the layout manager is invoked in order to establish an element size other than the default.",
                "datatype": {
                    "type": {
                        "@href": "#\/Dimension",
                        "@": "Dimension"
                    }
                }
            },
            {
                "@name": "size",
                "shortdesc": "The current dimensions of this element.",
                "description": "Initially undefined, and unless explicitly set by a script, it is defined by a ;LayoutManager ;. A script can explicitly set size before the layout manager is invoked to establish an element size other than the ;preferredSize ;or the default size, but this is not recommended. Defined as [bounds.width, bounds.height]. Setting an element's size changes its bounds property, and vice-versa.",
                "datatype": {
                    "type": {
                        "@href": "#\/Dimension",
                        "@": "Dimension"
                    }
                }
            },
            {
                "@name": "windowBounds",
                "@rwaccess": "readonly",
                "shortdesc": "The bounds of this element relative to the top-level parent window.",
                "datatype": {
                    "type": {
                        "@href": "#\/Bounds",
                        "@": "Bounds"
                    }
                }
            },
            {
                "@name": "alignment",
                "shortdesc": "The alignment style for this element. If defined, this value overrides the alignChildren setting for the parent container.",
                "description": {
                    "li": [
                        "For orientation=row:top, bottom, fill",
                        "For orientation=column: left, right, fill",
                        "For orientation=stack:top, bottom, left, right, fill"
                    ],
                    "@": "This can be a single string, which indicates the alignment for the orientation specified in the parent container, or an array of two strings, indicating both the horizontal and vertical alignment (in that order). Allowed values depend on the orientation value of the parent container. They are not case sensitive."
                },
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "children",
                "@rwaccess": "readonly",
                "shortdesc": "An array of child elements.",
                "datatype": {
                    "type": "Object",
                    "array": ""
                }
            },
            {
                "@name": "properties",
                "shortdesc": "An object that contains one or more creation properties of the container (properties used only when the element is created).",
                "description": "A Scrollbar object has no creation properties. The third argument of the ;add() ;method that creates it is the initial value, and the fourth and fifth arguments are the minimum and maximum values of the range.",
                "datatype": {
                    "type": "Object"
                }
            },
            {
                "@name": "enabled",
                "shortdesc": "True if this element is enabled.",
                "description": "An enabled element can accept input, according to its type. When false, control elements do not accept input, and all types of elements have a dimmed appearance.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "helpTip",
                "shortdesc": "The help text that is displayed when the mouse hovers over the element.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "indent",
                "shortdesc": "The number of pixels to indent the element during automatic layout.",
                "description": "Applies for column orientation and left alignment, or row orientation and top alignment.",
                "datatype": {
                    "type": "Number",
                    "min": "0"
                }
            },
            {
                "@name": "parent",
                "@rwaccess": "readonly",
                "shortdesc": "The parent element.",
                "datatype": {
                    "type": "Object"
                }
            },
            {
                "@name": "window",
                "@rwaccess": "readonly",
                "shortdesc": "The window that this element belongs to.",
                "datatype": {
                    "type": {
                        "@href": "#\/Window",
                        "@": "Window"
                    }
                }
            },
            {
                "@name": "type",
                "@rwaccess": "readonly",
                "shortdesc": "The element type, \"scrollbar\".",
                "datatype": {
                    "type": "String"
                }
            }
        ],
        "methods": [
            {
                "@name": "notify",
                "shortdesc": "Sends a notification message, simulating the specified user interaction event.",
                "parameters": {
                    "parameter": {
                        "@name": "eventName",
                        "@optional": "true",
                        "shortdesc": "The name of the control event handler to call.",
                        "description": "One of: onClick, onChange, onChanging. By default, simulates the onChange event for an edittext control, an onClick event for controls that support that event.",
                        "datatype": {
                            "type": "String"
                        }
                    }
                }
            },
            {
                "@name": "show",
                "shortdesc": "Shows this element.",
                "description": "When a window or container is hidden, its children are also hidden, but when it is shown again, the children retain their own visibility states."
            },
            {
                "@name": "hide",
                "shortdesc": "Hides this element."
            },
            {
                "@name": "addEventListener",
                "shortdesc": "Registers an event handler for a particular type of event occuring in this element.",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "eventName",
                            "shortdesc": "The name of the event.",
                            "description": "Event names are listed in the JavaScript Tools Guide.",
                            "datatype": {
                                "type": "String"
                            }
                        },
                        {
                            "@name": "handler",
                            "shortdesc": "The function that handles the event.",
                            "description": "This can be the name of a function defined in the extension, or a locally defined handler function to be executed when the event occurs. A handler function takes one argument, the ;UIEvent ;object.",
                            "datatype": {
                                "type": {
                                    "@href": "$COMMON\/javascript.xml#\/Function",
                                    "@": "Function"
                                }
                            }
                        },
                        {
                            "@name": "capturePhase",
                            "shortdesc": "When true, the handler is called only in the capturing phase of the event propagation.",
                            "description": "Default is false, meaning that the handler is called in the bubbling phase if this object is an ancestor of the target, or in the at-target phase if this object is itself the target.",
                            "datatype": {
                                "type": "Boolean",
                                "value": "false"
                            }
                        }
                    ]
                },
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "removeEventListener",
                "shortdesc": "Unregisters an event handler for a particular type of event occuring in this element.",
                "description": "All arguments must be identical to those that were used to register the event handler.",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "eventName",
                            "shortdesc": "The name of the event.",
                            "datatype": {
                                "type": "String"
                            }
                        },
                        {
                            "@name": "handler",
                            "shortdesc": "The function that handles the event.",
                            "datatype": {
                                "type": {
                                    "@href": "$COMMON\/javascript.xml#\/Function",
                                    "@": "Function"
                                }
                            }
                        },
                        {
                            "@name": "capturePhase",
                            "shortdesc": "Whether to call the handler only in the capturing phase of the event propagation.",
                            "datatype": {
                                "type": "Boolean",
                                "value": "false"
                            }
                        }
                    ]
                },
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "dispatchEvent",
                "shortdesc": "Simulates the occurrence of an event in this target.",
                "description": "A script can create a ;UIEvent ;object for a specific event and pass it to this method to start the event propagation for the event.",
                "datatype": {
                    "type": {
                        "@href": "#\/Event",
                        "@": "Event"
                    }
                }
            }
        ]
    },
    "RadioButton": {
        "class": "RadioButton",
        "superClass": null,
        "shortdesc": "A dual-state control, grouped with other radiobuttons, of which only one can be in the selected state.",
        "elementCount": 2,
        "propertyCount": 24,
        "methodCount": 6,
        "properties": [
            {
                "@name": "value",
                "shortdesc": "The selection state of this button, selected when true.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "characters",
                "shortdesc": "A number of characters for which to reserve space when calculating the preferred size of the element.",
                "datatype": {
                    "type": "Number",
                    "min": "0"
                }
            },
            {
                "@name": "justify",
                "shortdesc": "The default text justification style for child text elements.",
                "description": "One of left, center, or right. Justification only works if this value is set on creation of the element.",
                "datatype": {
                    "type": "String",
                    "value": "left"
                }
            },
            {
                "@name": "text",
                "shortdesc": "The label text for this button, a localizable string.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "active",
                "shortdesc": "True if this element is active.",
                "description": "An active control is the one with keyboard focus\u2014that is, the one that accepts keystrokes, or in the case of a ;Button, is selected when the user types Return or Enter in Windows, or the space bar in Mac OS.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "shortcutKey",
                "shortdesc": "The key sequence that invokes the ;onShortcutKey() ;callback for this element (in Windows only).",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "graphics",
                "@rwaccess": "readonly",
                "shortdesc": "The graphics object that can be used to customize the element's appearance, in response to the ;onDraw ;event.",
                "datatype": {
                    "type": {
                        "@href": "#\/ScriptUIGraphics",
                        "@": "ScriptUIGraphics"
                    }
                }
            },
            {
                "@name": "visible",
                "shortdesc": "True if this element is shown, false if it is hidden.",
                "description": "When a container is hidden, its children are also hidden, but they retain their own visibility values, and are shown or hidden accordingly when the parent is next shown.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "bounds",
                "shortdesc": "The boundaries of the element, in parent-relative coordinates.",
                "description": "Setting an element's size or location changes its bounds property, and vice-versa.",
                "datatype": {
                    "type": {
                        "@href": "#\/Bounds",
                        "@": "Bounds"
                    }
                }
            },
            {
                "@name": "location",
                "shortdesc": "The upper left corner of this element relative to its parent.",
                "description": "The location is defined as [bounds.x, bounds.y]. Setting an element's location changes its bounds property, and vice-versa.",
                "datatype": {
                    "type": {
                        "@href": "#\/Point",
                        "@": "Point"
                    }
                }
            },
            {
                "@name": "maximumSize",
                "shortdesc": "The maximum height and width to which the element can be resized.",
                "datatype": {
                    "type": {
                        "@href": "#\/Dimension",
                        "@": "Dimension"
                    }
                }
            },
            {
                "@name": "minimumSize",
                "shortdesc": "The minimum height and width to which the element can be resized.",
                "datatype": {
                    "type": {
                        "@href": "#\/Dimension",
                        "@": "Dimension"
                    }
                }
            },
            {
                "@name": "preferredSize",
                "shortdesc": "The preferred size, used by layout managers to determine the best size for each element.",
                "description": "If not explicitly set by a script, value is established by the UI framework in which ScriptUI is employed, and is based on such attributes of the element as its text, font, font size, icon size, and other UI framework-specific attributes. A script can explicitly set this value before the layout manager is invoked in order to establish an element size other than the default.",
                "datatype": {
                    "type": {
                        "@href": "#\/Dimension",
                        "@": "Dimension"
                    }
                }
            },
            {
                "@name": "size",
                "shortdesc": "The current dimensions of this element.",
                "description": "Initially undefined, and unless explicitly set by a script, it is defined by a ;LayoutManager ;. A script can explicitly set size before the layout manager is invoked to establish an element size other than the ;preferredSize ;or the default size, but this is not recommended. Defined as [bounds.width, bounds.height]. Setting an element's size changes its bounds property, and vice-versa.",
                "datatype": {
                    "type": {
                        "@href": "#\/Dimension",
                        "@": "Dimension"
                    }
                }
            },
            {
                "@name": "windowBounds",
                "@rwaccess": "readonly",
                "shortdesc": "The bounds of this element relative to the top-level parent window.",
                "datatype": {
                    "type": {
                        "@href": "#\/Bounds",
                        "@": "Bounds"
                    }
                }
            },
            {
                "@name": "alignment",
                "shortdesc": "The alignment style for this element. If defined, this value overrides the alignChildren setting for the parent container.",
                "description": {
                    "li": [
                        "For orientation=row:top, bottom, fill",
                        "For orientation=column: left, right, fill",
                        "For orientation=stack:top, bottom, left, right, fill"
                    ],
                    "@": "This can be a single string, which indicates the alignment for the orientation specified in the parent container, or an array of two strings, indicating both the horizontal and vertical alignment (in that order). Allowed values depend on the orientation value of the parent container. They are not case sensitive."
                },
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "children",
                "@rwaccess": "readonly",
                "shortdesc": "An array of child elements.",
                "datatype": {
                    "type": "Object",
                    "array": ""
                }
            },
            {
                "@name": "properties",
                "shortdesc": "An object that contains one or more creation properties of the container (properties used only when the element is created).",
                "description": "A RadioButton object has no creation properties. The third argument of the ;add() ;method that creates can be the label text.",
                "datatype": {
                    "type": "Object"
                }
            },
            {
                "@name": "enabled",
                "shortdesc": "True if this element is enabled.",
                "description": "An enabled element can accept input, according to its type. When false, control elements do not accept input, and all types of elements have a dimmed appearance.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "helpTip",
                "shortdesc": "The help text that is displayed when the mouse hovers over the element.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "indent",
                "shortdesc": "The number of pixels to indent the element during automatic layout.",
                "description": "Applies for column orientation and left alignment, or row orientation and top alignment.",
                "datatype": {
                    "type": "Number",
                    "min": "0"
                }
            },
            {
                "@name": "parent",
                "@rwaccess": "readonly",
                "shortdesc": "The parent element.",
                "datatype": {
                    "type": "Object"
                }
            },
            {
                "@name": "window",
                "@rwaccess": "readonly",
                "shortdesc": "The window that this element belongs to.",
                "datatype": {
                    "type": {
                        "@href": "#\/Window",
                        "@": "Window"
                    }
                }
            },
            {
                "@name": "type",
                "@rwaccess": "readonly",
                "shortdesc": "The element type; \"radiobutton\".",
                "datatype": {
                    "type": "String"
                }
            }
        ],
        "methods": [
            {
                "@name": "notify",
                "shortdesc": "Sends a notification message, simulating the specified user interaction event.",
                "parameters": {
                    "parameter": {
                        "@name": "eventName",
                        "@optional": "true",
                        "shortdesc": "The name of the control event handler to call.",
                        "description": "One of: onClick, onChange, onChanging. By default, simulates the onChange event for an edittext control, an onClick event for controls that support that event.",
                        "datatype": {
                            "type": "String"
                        }
                    }
                }
            },
            {
                "@name": "show",
                "shortdesc": "Shows this element.",
                "description": "When a window or container is hidden, its children are also hidden, but when it is shown again, the children retain their own visibility states."
            },
            {
                "@name": "hide",
                "shortdesc": "Hides this element."
            },
            {
                "@name": "addEventListener",
                "shortdesc": "Registers an event handler for a particular type of event occuring in this element.",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "eventName",
                            "shortdesc": "The name of the event.",
                            "description": "Event names are listed in the JavaScript Tools Guide.",
                            "datatype": {
                                "type": "String"
                            }
                        },
                        {
                            "@name": "handler",
                            "shortdesc": "The function that handles the event.",
                            "description": "This can be the name of a function defined in the extension, or a locally defined handler function to be executed when the event occurs. A handler function takes one argument, the ;UIEvent ;object.",
                            "datatype": {
                                "type": {
                                    "@href": "$COMMON\/javascript.xml#\/Function",
                                    "@": "Function"
                                }
                            }
                        },
                        {
                            "@name": "capturePhase",
                            "shortdesc": "When true, the handler is called only in the capturing phase of the event propagation.",
                            "description": "Default is false, meaning that the handler is called in the bubbling phase if this object is an ancestor of the target, or in the at-target phase if this object is itself the target.",
                            "datatype": {
                                "type": "Boolean",
                                "value": "false"
                            }
                        }
                    ]
                },
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "removeEventListener",
                "shortdesc": "Unregisters an event handler for a particular type of event occuring in this element.",
                "description": "All arguments must be identical to those that were used to register the event handler.",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "eventName",
                            "shortdesc": "The name of the event.",
                            "datatype": {
                                "type": "String"
                            }
                        },
                        {
                            "@name": "handler",
                            "shortdesc": "The function that handles the event.",
                            "datatype": {
                                "type": {
                                    "@href": "$COMMON\/javascript.xml#\/Function",
                                    "@": "Function"
                                }
                            }
                        },
                        {
                            "@name": "capturePhase",
                            "shortdesc": "Whether to call the handler only in the capturing phase of the event propagation.",
                            "datatype": {
                                "type": "Boolean",
                                "value": "false"
                            }
                        }
                    ]
                },
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "dispatchEvent",
                "shortdesc": "Simulates the occurrence of an event in this target.",
                "description": "A script can create a ;UIEvent ;object for a specific event and pass it to this method to start the event propagation for the event.",
                "datatype": {
                    "type": {
                        "@href": "#\/Event",
                        "@": "Event"
                    }
                }
            }
        ]
    },
    "Slider": {
        "class": "Slider",
        "superClass": null,
        "shortdesc": "A slider bar that indicates a numeric value with a moveable position indicator.",
        "elementCount": 2,
        "propertyCount": 23,
        "methodCount": 6,
        "properties": [
            {
                "@name": "value",
                "shortdesc": "The current position of the indicator.",
                "description": "If set to a value outside the range specified by ;minvalue ;and ;maxvalue, it is automatically reset to the closest boundary.",
                "datatype": {
                    "type": "Number"
                }
            },
            {
                "@name": "minvalue",
                "shortdesc": "The minimum value allowed in the ;value ;property.",
                "description": "Together with ;maxvalue, sets the range.Default is 0.",
                "datatype": {
                    "type": "Number"
                }
            },
            {
                "@name": "maxvalue",
                "shortdesc": "The maximum value allowed in the ;value ;property.",
                "description": "Together with ;minvalue, sets the  range.Default is 100.",
                "datatype": {
                    "type": "Number"
                }
            },
            {
                "@name": "active",
                "shortdesc": "True if this element is active.",
                "description": "An active control is the one with keyboard focus\u2014that is, the one that accepts keystrokes, or in the case of a ;Button, is selected when the user types Return or Enter in Windows, or the space bar in Mac OS.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "shortcutKey",
                "shortdesc": "The key sequence that invokes the ;onShortcutKey() ;callback for this element (in Windows only).",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "graphics",
                "@rwaccess": "readonly",
                "shortdesc": "The graphics object that can be used to customize the element's appearance, in response to the ;onDraw() ;event.",
                "datatype": {
                    "type": {
                        "@href": "#\/ScriptUIGraphics",
                        "@": "ScriptUIGraphics"
                    }
                }
            },
            {
                "@name": "visible",
                "shortdesc": "True if this element is shown, false if it is hidden.",
                "description": "When a container is hidden, its children are also hidden, but they retain their own visibility values, and are shown or hidden accordingly when the parent is next shown.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "bounds",
                "shortdesc": "The boundaries of the element, in parent-relative coordinates.",
                "description": "Setting an element's size or location changes its bounds property, and vice-versa.",
                "datatype": {
                    "type": {
                        "@href": "#\/Bounds",
                        "@": "Bounds"
                    }
                }
            },
            {
                "@name": "location",
                "shortdesc": "The upper left corner of this element relative to its parent.",
                "description": "The location is defined as [bounds.x, bounds.y]. Setting an element's location changes its bounds property, and vice-versa.",
                "datatype": {
                    "type": {
                        "@href": "#\/Point",
                        "@": "Point"
                    }
                }
            },
            {
                "@name": "maximumSize",
                "shortdesc": "The maximum height and width to which the element can be resized.",
                "datatype": {
                    "type": {
                        "@href": "#\/Dimension",
                        "@": "Dimension"
                    }
                }
            },
            {
                "@name": "minimumSize",
                "shortdesc": "The minimum height and width to which the element can be resized.",
                "datatype": {
                    "type": {
                        "@href": "#\/Dimension",
                        "@": "Dimension"
                    }
                }
            },
            {
                "@name": "preferredSize",
                "shortdesc": "The preferred size, used by layout managers to determine the best size for each element.",
                "description": "If not explicitly set by a script, value is established by the UI framework in which ScriptUI is employed, and is based on such attributes of the element as its text, font, font size, icon size, and other UI framework-specific attributes.A script can explicitly set this value before the layout manager is invoked in order to establish an element size other than the default.",
                "datatype": {
                    "type": {
                        "@href": "#\/Dimension",
                        "@": "Dimension"
                    }
                }
            },
            {
                "@name": "size",
                "shortdesc": "The current dimensions of this element.",
                "description": "Initially undefined, and unless explicitly set by a script, it is defined by a ;LayoutManager ;. A script can explicitly set size before the layout manager is invoked to establish an element size other than the ;preferredSize ;or the default size, but this is not recommended. Defined as [bounds.width, bounds.height]. Setting an element's size changes its bounds property, and vice-versa.",
                "datatype": {
                    "type": {
                        "@href": "#\/Dimension",
                        "@": "Dimension"
                    }
                }
            },
            {
                "@name": "windowBounds",
                "@rwaccess": "readonly",
                "shortdesc": "The bounds of this element relative to the top-level parent window.",
                "datatype": {
                    "type": {
                        "@href": "#\/Bounds",
                        "@": "Bounds"
                    }
                }
            },
            {
                "@name": "alignment",
                "shortdesc": "The alignment style for this element. If defined, this value overrides the alignChildren setting for the parent container.",
                "description": {
                    "li": [
                        "For orientation=row:top, bottom, fill",
                        "For orientation=column: left, right, fill",
                        "For orientation=stack:top, bottom, left, right, fill"
                    ],
                    "@": "This can be a single string, which indicates the alignment for the orientation specified in the parent container, or an array of two strings, indicating both the horizontal and vertical alignment (in that order). Allowed values depend on the orientation value of the parent container. They are not case sensitive."
                },
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "children",
                "@rwaccess": "readonly",
                "shortdesc": "An array of child elements.",
                "datatype": {
                    "type": "Object",
                    "array": ""
                }
            },
            {
                "@name": "properties",
                "shortdesc": "An object that contains one or more creation properties of the container (properties used only when the element is created).",
                "description": "A Slider object has no creation properties. The third argument of the ;add() ;method that creates it is the initial value, and the fourth and fifth arguments are the minimum and maximum values of the range.",
                "datatype": {
                    "type": "Object"
                }
            },
            {
                "@name": "enabled",
                "shortdesc": "True if this element is enabled.",
                "description": "An enabled element can accept input, according to its type. When false, control elements do not accept input, and all types of elements have a dimmed appearance.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "helpTip",
                "shortdesc": "The help text that is displayed when the mouse hovers over the element.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "indent",
                "shortdesc": "The number of pixels to indent the element during automatic layout.",
                "description": "Applies for column orientation and left alignment, or row orientation and top alignment.",
                "datatype": {
                    "type": "Number",
                    "min": "0"
                }
            },
            {
                "@name": "parent",
                "@rwaccess": "readonly",
                "shortdesc": "The parent element.",
                "datatype": {
                    "type": "Object"
                }
            },
            {
                "@name": "window",
                "@rwaccess": "readonly",
                "shortdesc": "The window that this element belongs to.",
                "datatype": {
                    "type": {
                        "@href": "#\/Window",
                        "@": "Window"
                    }
                }
            },
            {
                "@name": "type",
                "@rwaccess": "readonly",
                "shortdesc": "The element type, \"slider\".",
                "datatype": {
                    "type": "String"
                }
            }
        ],
        "methods": [
            {
                "@name": "notify",
                "shortdesc": "Sends a notification message, simulating the specified user interaction event.",
                "parameters": {
                    "parameter": {
                        "@name": "eventName",
                        "@optional": "true",
                        "shortdesc": "The name of the control event handler to call.",
                        "description": "One of: onClick, onChange, onChanging. By default, simulates the onChange event for an edittext control, an onClick event for controls that support that event.",
                        "datatype": {
                            "type": "String"
                        }
                    }
                }
            },
            {
                "@name": "show",
                "shortdesc": "Shows this element.",
                "description": "When a window or container is hidden, its children are also hidden, but when it is shown again, the children retain their own visibility states."
            },
            {
                "@name": "hide",
                "shortdesc": "Hides this element."
            },
            {
                "@name": "addEventListener",
                "shortdesc": "Registers an event handler for a particular type of event occuring in this element.",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "eventName",
                            "shortdesc": "The name of the event.",
                            "description": "Event names are listed in the JavaScript Tools Guide.",
                            "datatype": {
                                "type": "String"
                            }
                        },
                        {
                            "@name": "handler",
                            "shortdesc": "The function that handles the event.",
                            "description": "This can be the name of a function defined in the extension, or a locally defined handler function to be executed when the event occurs. A handler function takes one argument, the ;UIEvent ;object.",
                            "datatype": {
                                "type": {
                                    "@href": "$COMMON\/javascript.xml#\/Function",
                                    "@": "Function"
                                }
                            }
                        },
                        {
                            "@name": "capturePhase",
                            "shortdesc": "When true, the handler is called only in the capturing phase of the event propagation.",
                            "description": "Default is false, meaning that the handler is called in the bubbling phase if this object is an ancestor of the target, or in the at-target phase if this object is itself the target.",
                            "datatype": {
                                "type": "Boolean",
                                "value": "false"
                            }
                        }
                    ]
                },
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "removeEventListener",
                "shortdesc": "Unregisters an event handler for a particular type of event occuring in this element.",
                "description": "All arguments must be identical to those that were used to register the event handler.",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "eventName",
                            "shortdesc": "The name of the event.",
                            "datatype": {
                                "type": "String"
                            }
                        },
                        {
                            "@name": "handler",
                            "shortdesc": "The function that handles the event.",
                            "datatype": {
                                "type": {
                                    "@href": "$COMMON\/javascript.xml#\/Function",
                                    "@": "Function"
                                }
                            }
                        },
                        {
                            "@name": "capturePhase",
                            "shortdesc": "Whether to call the handler only in the capturing phase of the event propagation.",
                            "datatype": {
                                "type": "Boolean",
                                "value": "false"
                            }
                        }
                    ]
                },
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "dispatchEvent",
                "shortdesc": "Simulates the occurrence of an event in this target.",
                "description": "A script can create a ;UIEvent ;object for a specific event and pass it to this method to start the event propagation for the event.",
                "datatype": {
                    "type": {
                        "@href": "#\/Event",
                        "@": "Event"
                    }
                }
            }
        ]
    },
    "Progressbar": {
        "class": "Progressbar",
        "superClass": null,
        "shortdesc": "A horizontal bar with an indicator that shows the progress of an operation.",
        "elementCount": 2,
        "propertyCount": 21,
        "methodCount": 5,
        "properties": [
            {
                "@name": "value",
                "shortdesc": "The current position of the indicator.",
                "description": "If set to a value outside the range specified by 0 to ;maxvalue, it is automatically reset to the closest boundary.",
                "datatype": {
                    "type": "Number"
                }
            },
            {
                "@name": "minvalue",
                "shortdesc": "The minimum value in the range; always 0. If set to a different value, it is ignored.",
                "datatype": {
                    "type": "Number"
                }
            },
            {
                "@name": "maxvalue",
                "shortdesc": "The maximum value in the range. Default is 100.",
                "datatype": {
                    "type": "Number"
                }
            },
            {
                "@name": "graphics",
                "@rwaccess": "readonly",
                "shortdesc": "The graphics object that can be used to customize the element's appearance, in response to the ;onDraw() ;event.",
                "datatype": {
                    "type": {
                        "@href": "#\/ScriptUIGraphics",
                        "@": "ScriptUIGraphics"
                    }
                }
            },
            {
                "@name": "visible",
                "shortdesc": "True if this element is shown, false if it is hidden.",
                "description": "When a container is hidden, its children are also hidden, but they retain their own visibility values, and are shown or hidden accordingly when the parent is next shown.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "bounds",
                "shortdesc": "The boundaries of the element, in parent-relative coordinates.",
                "description": "Setting an element's size or location changes its bounds property, and vice-versa.",
                "datatype": {
                    "type": {
                        "@href": "#\/Bounds",
                        "@": "Bounds"
                    }
                }
            },
            {
                "@name": "location",
                "shortdesc": "The upper left corner of this element relative to its parent.",
                "description": "The location is defined as [bounds.x, bounds.y]. Setting an element's location changes its bounds property, and vice-versa.",
                "datatype": {
                    "type": {
                        "@href": "#\/Point",
                        "@": "Point"
                    }
                }
            },
            {
                "@name": "maximumSize",
                "shortdesc": "The maximum height and width to which the element can be resized.",
                "datatype": {
                    "type": {
                        "@href": "#\/Dimension",
                        "@": "Dimension"
                    }
                }
            },
            {
                "@name": "minimumSize",
                "shortdesc": "The minimum height and width to which the element can be resized.",
                "datatype": {
                    "type": {
                        "@href": "#\/Dimension",
                        "@": "Dimension"
                    }
                }
            },
            {
                "@name": "preferredSize",
                "shortdesc": "The preferred size, used by layout managers to determine the best size for each element.",
                "description": "If not explicitly set by a script, value is established by the UI framework in which ScriptUI is employed, and is based on such attributes of the element as its text, font, font size, icon size, and other UI framework-specific attributes.A script can explicitly set this value before the layout manager is invoked in order to establish an element size other than the default.",
                "datatype": {
                    "type": {
                        "@href": "#\/Dimension",
                        "@": "Dimension"
                    }
                }
            },
            {
                "@name": "size",
                "shortdesc": "The current dimensions of this element.",
                "description": "Initially undefined, and unless explicitly set by a script, it is defined by a ;LayoutManager ;. A script can explicitly set size before the layout manager is invoked to establish an element size other than the ;preferredSize ;or the default size, but this is not recommended. Defined as [bounds.width, bounds.height]. Setting an element's size changes its bounds property, and vice-versa.",
                "datatype": {
                    "type": {
                        "@href": "#\/Dimension",
                        "@": "Dimension"
                    }
                }
            },
            {
                "@name": "windowBounds",
                "@rwaccess": "readonly",
                "shortdesc": "The bounds of this element relative to the top-level parent window.",
                "datatype": {
                    "type": {
                        "@href": "#\/Bounds",
                        "@": "Bounds"
                    }
                }
            },
            {
                "@name": "alignment",
                "shortdesc": "The alignment style for this element. If defined, this value overrides the alignChildren setting for the parent container.",
                "description": {
                    "li": [
                        "For orientation=row:top, bottom, fill",
                        "For orientation=column: left, right, fill",
                        "For orientation=stack:top, bottom, left, right, fill"
                    ],
                    "@": "This can be a single string, which indicates the alignment for the orientation specified in the parent container, or an array of two strings, indicating both the horizontal and vertical alignment (in that order). Allowed values depend on the orientation value of the parent container. They are not case sensitive."
                },
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "children",
                "@rwaccess": "readonly",
                "shortdesc": "An array of child elements.",
                "datatype": {
                    "type": "Object",
                    "array": ""
                }
            },
            {
                "@name": "properties",
                "shortdesc": "An object that contains one or more creation properties of the container (properties used only when the element is created).",
                "description": "A ProgressBar object has no creation properties. The third argument of the ;add() ;method that creates it is the initial value (default 0), and the fourth argument is the maximum value of the range (default 100).",
                "datatype": {
                    "type": "Object"
                }
            },
            {
                "@name": "enabled",
                "shortdesc": "True if this element is enabled.",
                "description": "An enabled element can accept input, according to its type. When false, control elements do not accept input, and all types of elements have a dimmed appearance.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "helpTip",
                "shortdesc": "The help text that is displayed when the mouse hovers over the element.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "indent",
                "shortdesc": "The number of pixels to indent the element during automatic layout.",
                "description": "Applies for column orientation and left alignment, or row orientation and top alignment.",
                "datatype": {
                    "type": "Number",
                    "min": "0"
                }
            },
            {
                "@name": "parent",
                "@rwaccess": "readonly",
                "shortdesc": "The parent element.",
                "datatype": {
                    "type": "Object"
                }
            },
            {
                "@name": "window",
                "@rwaccess": "readonly",
                "shortdesc": "The window that this element belongs to.",
                "datatype": {
                    "type": {
                        "@href": "#\/Window",
                        "@": "Window"
                    }
                }
            },
            {
                "@name": "type",
                "@rwaccess": "readonly",
                "shortdesc": "The element type, \"progessbar\".",
                "datatype": {
                    "type": "String"
                }
            }
        ],
        "methods": [
            {
                "@name": "show",
                "shortdesc": "Shows this element.",
                "description": "When a window or container is hidden, its children are also hidden, but when it is shown again, the children retain their own visibility states."
            },
            {
                "@name": "hide",
                "shortdesc": "Hides this element."
            },
            {
                "@name": "addEventListener",
                "shortdesc": "Registers an event handler for a particular type of event occuring in this element.",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "eventName",
                            "shortdesc": "The name of the event.",
                            "description": "Event names are listed in the JavaScript Tools Guide.",
                            "datatype": {
                                "type": "String"
                            }
                        },
                        {
                            "@name": "handler",
                            "shortdesc": "The function that handles the event.",
                            "description": "This can be the name of a function defined in the extension, or a locally defined handler function to be executed when the event occurs. A handler function takes one argument, the ;UIEvent ;object.",
                            "datatype": {
                                "type": {
                                    "@href": "$COMMON\/javascript.xml#\/Function",
                                    "@": "Function"
                                }
                            }
                        },
                        {
                            "@name": "capturePhase",
                            "shortdesc": "When true, the handler is called only in the capturing phase of the event propagation.",
                            "description": "Default is false, meaning that the handler is called in the bubbling phase if this object is an ancestor of the target, or in the at-target phase if this object is itself the target.",
                            "datatype": {
                                "type": "Boolean",
                                "value": "false"
                            }
                        }
                    ]
                },
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "removeEventListener",
                "shortdesc": "Unregisters an event handler for a particular type of event occuring in this element.",
                "description": "All arguments must be identical to those that were used to register the event handler.",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "eventName",
                            "shortdesc": "The name of the event.",
                            "datatype": {
                                "type": "String"
                            }
                        },
                        {
                            "@name": "handler",
                            "shortdesc": "The function that handles the event.",
                            "datatype": {
                                "type": {
                                    "@href": "$COMMON\/javascript.xml#\/Function",
                                    "@": "Function"
                                }
                            }
                        },
                        {
                            "@name": "capturePhase",
                            "shortdesc": "Whether to call the handler only in the capturing phase of the event propagation.",
                            "datatype": {
                                "type": "Boolean",
                                "value": "false"
                            }
                        }
                    ]
                },
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "dispatchEvent",
                "shortdesc": "Simulates the occurrence of an event in this target.",
                "description": "A script can create a ;UIEvent ;object for a specific event and pass it to this method to start the event propagation for the event.",
                "datatype": {
                    "type": {
                        "@href": "#\/Event",
                        "@": "Event"
                    }
                }
            }
        ]
    },
    "TreeView": {
        "class": "TreeView",
        "superClass": null,
        "shortdesc": "A hierarchical list whose items can contain child items.",
        "elementCount": 2,
        "propertyCount": 23,
        "methodCount": 10,
        "properties": [
            {
                "@name": "items",
                "@rwaccess": "readonly",
                "shortdesc": "The array of top-level items displayed in the list.",
                "description": "Access this array with a 0-based index. To obtain the number of items in the list, use items.length.The objects are created when items are specified on creation of the parent list object, or afterward using the list control\u2019s ;add() ;method.",
                "datatype": {
                    "type": {
                        "@href": "#\/ListItem",
                        "@": "ListItem"
                    },
                    "array": ""
                }
            },
            {
                "@name": "itemSize",
                "shortdesc": "The width and height in pixels of each item in the list.",
                "description": "Used by auto-layout to determine the ;preferredSize ;of the list, if not otherwise specified. If not set explicitly, the size of each item is set to match the largest height and width among all items in the list",
                "datatype": {
                    "type": {
                        "@href": "#\/Dimension",
                        "@": "Dimension"
                    }
                }
            },
            {
                "@name": "selection",
                "shortdesc": "The currently selected  list item.",
                "description": "Setting this value causes the selected item to be highlighted and to be scrolled into view if necessary. If no items are selected, the value is null. Set to null to deselect all items.You can set the value using the index of an item, rather than an object reference. If set to an index value that is out of range, the operation is ignored. When set with an index value, the property still returns an object reference.",
                "datatype": {
                    "type": {
                        "@href": "#\/ListItem",
                        "@": "ListItem"
                    }
                }
            },
            {
                "@name": "active",
                "shortdesc": "True if this element is active.",
                "description": "An active control is the one with keyboard focus\u2014that is, the one that accepts keystrokes, or in the case of a ;Button, is selected when the user types Return or Enter in Windows, or the space bar in Mac OS.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "shortcutKey",
                "shortdesc": "The key sequence that invokes the ;onShortcutKey() ;callback for this element (in Windows only).",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "graphics",
                "@rwaccess": "readonly",
                "shortdesc": "The graphics object that can be used to customize the element's appearance, in response to the ;onDraw() ;event.",
                "datatype": {
                    "type": {
                        "@href": "#\/ScriptUIGraphics",
                        "@": "ScriptUIGraphics"
                    }
                }
            },
            {
                "@name": "visible",
                "shortdesc": "True if this element is shown, false if it is hidden.",
                "description": "When a container is hidden, its children are also hidden, but they retain their own visibility values, and are shown or hidden accordingly when the parent is next shown.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "bounds",
                "shortdesc": "The boundaries of the element, in parent-relative coordinates.",
                "description": "Setting an element's size or location changes its bounds property, and vice-versa.",
                "datatype": {
                    "type": {
                        "@href": "#\/Bounds",
                        "@": "Bounds"
                    }
                }
            },
            {
                "@name": "location",
                "shortdesc": "The upper left corner of this element relative to its parent.",
                "description": "The location is defined as [bounds.x, bounds.y]. Setting an element's location changes its bounds property, and vice-versa.",
                "datatype": {
                    "type": {
                        "@href": "#\/Point",
                        "@": "Point"
                    }
                }
            },
            {
                "@name": "maximumSize",
                "shortdesc": "The maximum height and width to which the element can be resized.",
                "datatype": {
                    "type": {
                        "@href": "#\/Dimension",
                        "@": "Dimension"
                    }
                }
            },
            {
                "@name": "minimumSize",
                "shortdesc": "The minimum height and width to which the element can be resized.",
                "datatype": {
                    "type": {
                        "@href": "#\/Dimension",
                        "@": "Dimension"
                    }
                }
            },
            {
                "@name": "preferredSize",
                "shortdesc": "The preferred size, used by layout managers to determine the best size for each element.",
                "description": "If not explicitly set by a script, value is established by the UI framework in which ScriptUI is employed, and is based on such attributes of the element as its text, font, font size, icon size, and other UI framework-specific attributes.A script can explicitly set this value before the layout manager is invoked in order to establish an element size other than the default.",
                "datatype": {
                    "type": {
                        "@href": "#\/Dimension",
                        "@": "Dimension"
                    }
                }
            },
            {
                "@name": "size",
                "shortdesc": "The current dimensions of this element.",
                "description": "Initially undefined, and unless explicitly set by a script, it is defined by a ;LayoutManager ;. A script can explicitly set size before the layout manager is invoked to establish an element size other than the ;preferredSize ;or the default size, but this is not recommended. Defined as [bounds.width, bounds.height]. Setting an element's size changes its bounds property, and vice-versa.",
                "datatype": {
                    "type": {
                        "@href": "#\/Dimension",
                        "@": "Dimension"
                    }
                }
            },
            {
                "@name": "windowBounds",
                "@rwaccess": "readonly",
                "shortdesc": "The bounds of this element relative to the top-level parent window.",
                "datatype": {
                    "type": {
                        "@href": "#\/Bounds",
                        "@": "Bounds"
                    }
                }
            },
            {
                "@name": "alignment",
                "shortdesc": "The alignment style for this element. If defined, this value overrides the alignChildren setting for the parent container.",
                "description": {
                    "li": [
                        "For orientation=row:top, bottom, fill",
                        "For orientation=column: left, right, fill",
                        "For orientation=stack:top, bottom, left, right, fill"
                    ],
                    "@": "This can be a single string, which indicates the alignment for the orientation specified in the parent container, or an array of two strings, indicating both the horizontal and vertical alignment (in that order). Allowed values depend on the orientation value of the parent container. They are not case sensitive."
                },
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "children",
                "@rwaccess": "readonly",
                "shortdesc": "An array of child elements.",
                "datatype": {
                    "type": "Object",
                    "array": ""
                }
            },
            {
                "@name": "properties",
                "shortdesc": "An object that contains one or more creation properties of the control (properties used only when the element is created).",
                "description": {
                    "li": "items: An array of strings for the text of each top-level list item. An item object is created for each item. An item with the text string \"-\" creates a separator item. Supply this property, or the items argument to the ;add() ;method, not both. This form is most useful for elements defined using Resource Specifications.",
                    "@": "Creation properties of a ListBox object can include:"
                },
                "datatype": {
                    "type": "Object"
                }
            },
            {
                "@name": "enabled",
                "shortdesc": "True if this element is enabled.",
                "description": "An enabled element can accept input, according to its type. When false, control elements do not accept input, and all types of elements have a dimmed appearance.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "helpTip",
                "shortdesc": "The help text that is displayed when the mouse hovers over the element.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "indent",
                "shortdesc": "The number of pixels to indent the element during automatic layout.",
                "description": "Applies for column orientation and left alignment, or row orientation and top alignment.",
                "datatype": {
                    "type": "Number",
                    "min": "0"
                }
            },
            {
                "@name": "parent",
                "@rwaccess": "readonly",
                "shortdesc": "The parent element.",
                "datatype": {
                    "type": "Object"
                }
            },
            {
                "@name": "window",
                "@rwaccess": "readonly",
                "shortdesc": "The window that this element belongs to.",
                "datatype": {
                    "type": {
                        "@href": "#\/Window",
                        "@": "Window"
                    }
                }
            },
            {
                "@name": "type",
                "@rwaccess": "readonly",
                "shortdesc": "The element type, \"treeview\".",
                "datatype": {
                    "type": "String"
                }
            }
        ],
        "methods": [
            {
                "@name": "add",
                "shortdesc": "Adds an item to the top-level choices in this list.",
                "description": "Returns the item control object.",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "type",
                            "shortdesc": "The type of the child element, the string \"item\".",
                            "datatype": {
                                "type": "String"
                            }
                        },
                        {
                            "@name": "text",
                            "@optional": "true",
                            "shortdesc": "The localizable text label for the item.",
                            "datatype": {
                                "type": "String"
                            }
                        }
                    ]
                },
                "datatype": {
                    "type": {
                        "@href": "#\/ListItem",
                        "@": "ListItem"
                    }
                }
            },
            {
                "@name": "find",
                "shortdesc": "Retrieves an item object from the list that has a given text label.",
                "parameters": {
                    "parameter": {
                        "@name": "text",
                        "shortdesc": "The text string to match.",
                        "datatype": {
                            "type": "String"
                        }
                    }
                },
                "datatype": {
                    "type": {
                        "@href": "#\/ListItem",
                        "@": "ListItem"
                    }
                }
            },
            {
                "@name": "remove",
                "shortdesc": "Removes a child item from the list.",
                "parameters": {
                    "parameter": {
                        "@name": "what",
                        "shortdesc": "The item or child to remove, specified by 0-based index in the top-level item list, text value, or as a ;ListItem ;object.",
                        "datatype": {
                            "type": "Any"
                        }
                    }
                }
            },
            {
                "@name": "removeAll",
                "shortdesc": "Removes all child items from the list."
            },
            {
                "@name": "notify",
                "shortdesc": "Sends a notification message, simulating the specified user interaction event.",
                "parameters": {
                    "parameter": {
                        "@name": "eventName",
                        "@optional": "true",
                        "shortdesc": "The name of the control event handler to call.",
                        "description": "One of: onClick, onChange, onChanging. By default, simulates the onChange event for an edittext control, an onClick event for controls that support that event.",
                        "datatype": {
                            "type": "String"
                        }
                    }
                }
            },
            {
                "@name": "show",
                "shortdesc": "Shows this element.",
                "description": "When a window or container is hidden, its children are also hidden, but when it is shown again, the children retain their own visibility states."
            },
            {
                "@name": "hide",
                "shortdesc": "Hides this element."
            },
            {
                "@name": "addEventListener",
                "shortdesc": "Registers an event handler for a particular type of event occuring in this element.",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "eventName",
                            "shortdesc": "The name of the event.",
                            "description": "Event names are listed in the JavaScript Tools Guide.",
                            "datatype": {
                                "type": "String"
                            }
                        },
                        {
                            "@name": "handler",
                            "shortdesc": "The function that handles the event.",
                            "description": "This can be the name of a function defined in the extension, or a locally defined handler function to be executed when the event occurs. A handler function takes one argument, the ;UIEvent ;object.",
                            "datatype": {
                                "type": {
                                    "@href": "$COMMON\/javascript.xml#\/Function",
                                    "@": "Function"
                                }
                            }
                        },
                        {
                            "@name": "capturePhase",
                            "shortdesc": "When true, the handler is called only in the capturing phase of the event propagation.",
                            "description": "Default is false, meaning that the handler is called in the bubbling phase if this object is an ancestor of the target, or in the at-target phase if this object is itself the target.",
                            "datatype": {
                                "type": "Boolean",
                                "value": "false"
                            }
                        }
                    ]
                },
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "removeEventListener",
                "shortdesc": "Unregisters an event handler for a particular type of event occuring in this element.",
                "description": "All arguments must be identical to those that were used to register the event handler.",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "eventName",
                            "shortdesc": "The name of the event.",
                            "datatype": {
                                "type": "String"
                            }
                        },
                        {
                            "@name": "handler",
                            "shortdesc": "The function that handles the event.",
                            "datatype": {
                                "type": {
                                    "@href": "$COMMON\/javascript.xml#\/Function",
                                    "@": "Function"
                                }
                            }
                        },
                        {
                            "@name": "capturePhase",
                            "shortdesc": "Whether to call the handler only in the capturing phase of the event propagation.",
                            "datatype": {
                                "type": "Boolean",
                                "value": "false"
                            }
                        }
                    ]
                },
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "dispatchEvent",
                "shortdesc": "Simulates the occurrence of an event in this target.",
                "description": "A script can create a ;UIEvent ;object for a specific event and pass it to this method to start the event propagation for the event.",
                "datatype": {
                    "type": {
                        "@href": "#\/Event",
                        "@": "Event"
                    }
                }
            }
        ]
    },
    "FlashPlayer": {
        "class": "FlashPlayer",
        "superClass": null,
        "shortdesc": "A control that contains a Flash Player, which can load and play Flash movies stored in SWF files.",
        "elementCount": 2,
        "propertyCount": 17,
        "methodCount": 10,
        "properties": [
            {
                "@name": "active",
                "shortdesc": "True if this element is active.",
                "description": "An active control is the one with keyboard focus\u2014that is, the one that accepts keystrokes, or in the case of a ;Button, is selected when the user types Return or Enter in Windows, or the space bar in Mac OS.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "visible",
                "shortdesc": "True if this element is shown, false if it is hidden.",
                "description": "When a container is hidden, its children are also hidden, but they retain their own visibility values, and are shown or hidden accordingly when the parent is next shown.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "bounds",
                "shortdesc": "The boundaries of the element, in parent-relative coordinates.",
                "description": "Setting an element's size or location changes its bounds property, and vice-versa.",
                "datatype": {
                    "type": {
                        "@href": "#\/Bounds",
                        "@": "Bounds"
                    }
                }
            },
            {
                "@name": "location",
                "shortdesc": "The upper left corner of this element relative to its parent.",
                "description": "The location is defined as [bounds.x, bounds.y]. Setting an element's location changes its bounds property, and vice-versa.",
                "datatype": {
                    "type": {
                        "@href": "#\/Point",
                        "@": "Point"
                    }
                }
            },
            {
                "@name": "maximumSize",
                "shortdesc": "The maximum height and width to which the element can be resized.",
                "datatype": {
                    "type": {
                        "@href": "#\/Dimension",
                        "@": "Dimension"
                    }
                }
            },
            {
                "@name": "minimumSize",
                "shortdesc": "The minimum height and width to which the element can be resized.",
                "datatype": {
                    "type": {
                        "@href": "#\/Dimension",
                        "@": "Dimension"
                    }
                }
            },
            {
                "@name": "preferredSize",
                "shortdesc": "The preferred size, used by layout managers to determine the best size for each element.",
                "description": "If not explicitly set by a script, value is established by the UI framework in which ScriptUI is employed, and is based on such attributes of the element as its text, font, font size, icon size, and other UI framework-specific attributes.A script can explicitly set this value before the layout manager is invoked in order to establish an element size other than the default.",
                "datatype": {
                    "type": {
                        "@href": "#\/Dimension",
                        "@": "Dimension"
                    }
                }
            },
            {
                "@name": "size",
                "shortdesc": "The current dimensions of this element.",
                "description": "Initially undefined, and unless explicitly set by a script, it is defined by a ;LayoutManager ;. A script can explicitly set size before the layout manager is invoked to establish an element size other than the preferredSize or the default size, but this is not recommended. Defined as [bounds.width, bounds.height]. Setting an element's size changes its bounds property, and vice-versa.",
                "datatype": {
                    "type": {
                        "@href": "#\/Dimension",
                        "@": "Dimension"
                    }
                }
            },
            {
                "@name": "windowBounds",
                "@rwaccess": "readonly",
                "shortdesc": "The bounds of this element relative to the top-level parent window.",
                "datatype": {
                    "type": {
                        "@href": "#\/Bounds",
                        "@": "Bounds"
                    }
                }
            },
            {
                "@name": "alignment",
                "shortdesc": "The alignment style for this element. If defined, this value overrides the alignChildren setting for the parent container.",
                "description": {
                    "li": [
                        "For orientation=row:top, bottom, fill",
                        "For orientation=column: left, right, fill",
                        "For orientation=stack:top, bottom, left, right, fill"
                    ],
                    "@": "This can be a single string, which indicates the alignment for the orientation specified in the parent container, or an array of two strings, indicating both the horizontal and vertical alignment (in that order). Allowed values depend on the orientation value of the parent container. They are not case sensitive."
                },
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "properties",
                "shortdesc": "An object that contains one or more creation properties of the container (properties used only when the element is created).",
                "description": "A FlashPlayer object has no creation properties.",
                "datatype": {
                    "type": "Object"
                }
            },
            {
                "@name": "enabled",
                "shortdesc": "True if this element is enabled.",
                "description": "An enabled element can accept input, according to its type. When false, control elements do not accept input, and all types of elements have a dimmed appearance.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "helpTip",
                "shortdesc": "The help text that is displayed when the mouse hovers over the element.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "indent",
                "shortdesc": "The number of pixels to indent the element during automatic layout.",
                "description": "Applies for column orientation and left alignment, or row orientation and top alignment.",
                "datatype": {
                    "type": "Number",
                    "min": "0"
                }
            },
            {
                "@name": "parent",
                "@rwaccess": "readonly",
                "shortdesc": "The parent element.",
                "datatype": {
                    "type": "Object"
                }
            },
            {
                "@name": "window",
                "@rwaccess": "readonly",
                "shortdesc": "The window that this element belongs to.",
                "datatype": {
                    "type": {
                        "@href": "#\/Window",
                        "@": "Window"
                    }
                }
            },
            {
                "@name": "type",
                "@rwaccess": "readonly",
                "shortdesc": "The element type, \"flashplayer\".",
                "datatype": {
                    "type": "String"
                }
            }
        ],
        "methods": [
            {
                "@name": "invokePlayerFunction",
                "shortdesc": "Invokes an ActionScript function defined in the Flash application.",
                "description": "Returns the result of the invoked function, which must be one of the allowed types. The ActionScript class and date objects are not supported as return values.",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "name",
                            "shortdesc": "The name of a Flash ActionScript function that has been registered with the ExternalInterface object by the currently loaded SWF file.",
                            "datatype": {
                                "type": "String"
                            }
                        },
                        {
                            "@name": "argument",
                            "@optional": "true",
                            "shortdesc": "An argument to pass through to the function.",
                            "description": "There can be any number of arguments. An argument must be one of these data types:Number, String, Boolean, null, undefined, Object, Array. No other data types are supported.",
                            "datatype": {
                                "type": "Any"
                            }
                        }
                    ]
                },
                "datatype": {
                    "type": "Any"
                }
            },
            {
                "@name": "loadMovie",
                "shortdesc": "Loads a movie into the Flash Player, and begins playing it.",
                "parameters": {
                    "parameter": {
                        "@name": "file",
                        "shortdesc": "The File object for the SWF file to load.",
                        "datatype": {
                            "type": {
                                "@href": "$COMMON\/javascript.xml#\/File",
                                "@": "File"
                            }
                        }
                    }
                }
            },
            {
                "@name": "playMovie",
                "shortdesc": "Restarts a movie that has been stopped.",
                "description": {
                    "br": "",
                    "@": "Do not use on a movie that is currently playing.The stopMovie()-playMovie() sequence does not work for SWF files produced by Flex, or for some files produced by Flash Authoring (depending on how they were implemented)."
                },
                "parameters": {
                    "parameter": {
                        "@name": "rewind",
                        "shortdesc": "When true, restarts the movie from the beginning; otherwise, starts playing from the\tpoint where it was stopped.",
                        "datatype": {
                            "type": "Boolean",
                            "value": "false"
                        }
                    }
                }
            },
            {
                "@name": "stopMovie",
                "shortdesc": "Halts playback of the current movie.",
                "description": {
                    "br": "",
                    "@": "The stopMovie()-playMovie() sequence does not work for SWF files produced by Flex, or for some files produced by Flash Authoring (depending on how they were implemented).Using stopMovie() from the player's hosting environment has no effect on an SWF file playing in a ScriptUI Flash Player element. It is, however, possible to produce an SWF using Flash Authoring that can stop itself in response to user interaction."
                }
            },
            {
                "@name": "notify",
                "shortdesc": "Sends a notification message, simulating the specified user interaction event.",
                "parameters": {
                    "parameter": {
                        "@name": "eventName",
                        "@optional": "true",
                        "shortdesc": "The name of the control event handler to call.",
                        "description": "One of: onClick, onChange, onChanging. By default, simulates the onChange event for an edittext control, an onClick event for controls that support that event.",
                        "datatype": {
                            "type": "String"
                        }
                    }
                }
            },
            {
                "@name": "show",
                "shortdesc": "Shows this element.",
                "description": "When a window or container is hidden, its children are also hidden, but when it is shown again, the children retain their own visibility states."
            },
            {
                "@name": "hide",
                "shortdesc": "Hides this element."
            },
            {
                "@name": "addEventListener",
                "shortdesc": "Registers an event handler for a particular type of event occuring in this element.",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "eventName",
                            "shortdesc": "The name of the event.",
                            "description": "Event names are listed in the JavaScript Tools Guide.",
                            "datatype": {
                                "type": "String"
                            }
                        },
                        {
                            "@name": "handler",
                            "shortdesc": "The function that handles the event.",
                            "description": "This can be the name of a function defined in the extension, or a locally defined handler function to be executed when the event occurs. A handler function takes one argument, the ;UIEvent ;object.",
                            "datatype": {
                                "type": {
                                    "@href": "$COMMON\/javascript.xml#\/Function",
                                    "@": "Function"
                                }
                            }
                        },
                        {
                            "@name": "capturePhase",
                            "shortdesc": "When true, the handler is called only in the capturing phase of the event propagation.",
                            "description": "Default is false, meaning that the handler is called in the bubbling phase if this object is an ancestor of the target, or in the at-target phase if this object is itself the target.",
                            "datatype": {
                                "type": "Boolean",
                                "value": "false"
                            }
                        }
                    ]
                },
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "removeEventListener",
                "shortdesc": "Unregisters an event handler for a particular type of event occuring in this element.",
                "description": "All arguments must be identical to those that were used to register the event handler.",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "eventName",
                            "shortdesc": "The name of the event.",
                            "datatype": {
                                "type": "String"
                            }
                        },
                        {
                            "@name": "handler",
                            "shortdesc": "The function that handles the event.",
                            "datatype": {
                                "type": {
                                    "@href": "$COMMON\/javascript.xml#\/Function",
                                    "@": "Function"
                                }
                            }
                        },
                        {
                            "@name": "capturePhase",
                            "shortdesc": "Whether to call the handler only in the capturing phase of the event propagation.",
                            "datatype": {
                                "type": "Boolean",
                                "value": "false"
                            }
                        }
                    ]
                },
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "dispatchEvent",
                "shortdesc": "Simulates the occurrence of an event in this target.",
                "description": "A script can create a ;UIEvent ;object for a specific event and pass it to this method to start the event propagation for the event.",
                "datatype": {
                    "type": {
                        "@href": "#\/Event",
                        "@": "Event"
                    }
                }
            }
        ]
    },
    "Group": {
        "class": "Group",
        "superClass": null,
        "shortdesc": "A container for other controls within a window.",
        "elementCount": 2,
        "propertyCount": 23,
        "methodCount": 7,
        "properties": [
            {
                "@name": "graphics",
                "@rwaccess": "readonly",
                "shortdesc": "The graphics object that can be used to customize the element's appearance, in response to the ;onDraw() ;event.",
                "datatype": {
                    "type": {
                        "@href": "#\/ScriptUIGraphics",
                        "@": "ScriptUIGraphics"
                    }
                }
            },
            {
                "@name": "visible",
                "shortdesc": "True if this element is shown, false if it is hidden.",
                "description": "When a container is hidden, its children are also hidden, but they retain their own visibility values, and are shown or hidden accordingly when the parent is next shown.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "bounds",
                "shortdesc": "The boundaries of the element, in parent-relative coordinates.",
                "description": "Setting an element's size or location changes its bounds property, and vice-versa.",
                "datatype": {
                    "type": {
                        "@href": "#\/Bounds",
                        "@": "Bounds"
                    }
                }
            },
            {
                "@name": "location",
                "shortdesc": "The upper left corner of this element relative to its parent.",
                "description": "The location is defined as [bounds.x, bounds.y]. Setting an element's location changes its bounds property, and vice-versa.",
                "datatype": {
                    "type": {
                        "@href": "#\/Point",
                        "@": "Point"
                    }
                }
            },
            {
                "@name": "maximumSize",
                "shortdesc": "The maximum height and width to which the element can be resized.",
                "datatype": {
                    "type": {
                        "@href": "#\/Dimension",
                        "@": "Dimension"
                    }
                }
            },
            {
                "@name": "minimumSize",
                "shortdesc": "The minimum height and width to which the element can be resized.",
                "datatype": {
                    "type": {
                        "@href": "#\/Dimension",
                        "@": "Dimension"
                    }
                }
            },
            {
                "@name": "preferredSize",
                "shortdesc": "The preferred size, used by layout managers to determine the best size for each element.",
                "description": "If not explicitly set by a script, value is established by the UI framework in which ScriptUI is employed, and is based on such attributes of the element as its text, font, font size, icon size, and other UI framework-specific attributes.A script can explicitly set this value before the layout manager is invoked in order to establish an element size other than the default.",
                "datatype": {
                    "type": {
                        "@href": "#\/Dimension",
                        "@": "Dimension"
                    }
                }
            },
            {
                "@name": "size",
                "shortdesc": "The current dimensions of this element.",
                "description": "Initially undefined, and unless explicitly set by a script, it is defined by a ;LayoutManager ;. A script can explicitly set size before the layout manager is invoked to establish an element size other than the preferredSize or the default size, but this is not recommended. Defined as [bounds.width, bounds.height]. Setting an element's size changes its bounds property, and vice-versa.",
                "datatype": {
                    "type": {
                        "@href": "#\/Dimension",
                        "@": "Dimension"
                    }
                }
            },
            {
                "@name": "windowBounds",
                "@rwaccess": "readonly",
                "shortdesc": "The bounds of this element relative to the top-level parent window.",
                "datatype": {
                    "type": {
                        "@href": "#\/Bounds",
                        "@": "Bounds"
                    }
                }
            },
            {
                "@name": "alignChildren",
                "shortdesc": "Tells the layout manager how unlike-sized children of this container should be aligned within a column or row.",
                "description": "Order of creation determines which children are at the top of a column or the left of a row; the earlier a child is created, the closer it is to the top or left of its column or row. If defined, alignment for a child element overrides the alignChildren setting for the parent container. See alignment property for values.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "children",
                "@rwaccess": "readonly",
                "shortdesc": "An array of child elements.",
                "datatype": {
                    "type": "Object",
                    "array": ""
                }
            },
            {
                "@name": "layout",
                "shortdesc": "The layout manager for this container.",
                "description": "The first time a container object is made visible, ScriptUI invokes this layout manager by calling its ;layout() ;function. Default is an instance of the ;LayoutManager ;class that is automatically created when the container element is created.",
                "datatype": {
                    "type": {
                        "@href": "#\/LayoutManager",
                        "@": "LayoutManager"
                    }
                }
            },
            {
                "@name": "margins",
                "shortdesc": "The number of pixels between the edges of a container and the outermost child elements.",
                "description": "You can specify different margins for each edge of the container. The default value is based on the type of container, and is chosen to match the standard Adobe UI guidelines.",
                "datatype": {
                    "type": "Number"
                }
            },
            {
                "@name": "orientation",
                "shortdesc": "The layout orientation of children in a container.",
                "description": "Interpreted by the layout manager for the container. The default ;LayoutManager ; Object accepts the (case-insensitive) values row, column, or stack.  For window and panel, the default is column, and for group the default is row. The allowed values for the container\u2019s alignChildren and its children\u2019s alignment properties depend on the orientation.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "spacing",
                "shortdesc": "The number of pixels separating one child element from its adjacent sibling element.",
                "description": "Because each container holds only a single row or column of children, only a single spacing value is needed for a container. The default value is based on the type of container, and is chosen to match standard Adobe UI guidelines.",
                "datatype": {
                    "type": "Number"
                }
            },
            {
                "@name": "alignment",
                "shortdesc": "The alignment style for this element. If defined, this value overrides the alignChildren setting for the parent container.",
                "description": {
                    "li": [
                        "For orientation=row:top, bottom, fill",
                        "For orientation=column: left, right, fill",
                        "For orientation=stack:top, bottom, left, right, fill"
                    ],
                    "@": "This can be a single string, which indicates the alignment for the orientation specified in the parent container, or an array of two strings, indicating both the horizontal and vertical alignment (in that order). Allowed values depend on the orientation value of the parent container. They are not case sensitive."
                },
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "properties",
                "shortdesc": "An object that contains one or more creation properties of the control (properties used only when the element is created).",
                "description": "A Group object has no creation properties.",
                "datatype": {
                    "type": "Object"
                }
            },
            {
                "@name": "enabled",
                "shortdesc": "True if this element is enabled.",
                "description": "An enabled element can accept input, according to its type. When false, control elements do not accept input, and all types of elements have a dimmed appearance.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "helpTip",
                "shortdesc": "The help text that is displayed when the mouse hovers over the element.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "indent",
                "shortdesc": "The number of pixels to indent the element during automatic layout.",
                "description": "Applies for column orientation and left alignment, or row orientation and top alignment.",
                "datatype": {
                    "type": "Number",
                    "min": "0"
                }
            },
            {
                "@name": "parent",
                "@rwaccess": "readonly",
                "shortdesc": "The parent element.",
                "datatype": {
                    "type": "Object"
                }
            },
            {
                "@name": "window",
                "@rwaccess": "readonly",
                "shortdesc": "The window that this element belongs to.",
                "datatype": {
                    "type": {
                        "@href": "#\/Window",
                        "@": "Window"
                    }
                }
            },
            {
                "@name": "type",
                "@rwaccess": "readonly",
                "shortdesc": "The element type; \"group\".",
                "datatype": {
                    "type": "String"
                }
            }
        ],
        "methods": [
            {
                "@name": "show",
                "shortdesc": "Shows this element.",
                "description": "When a window or container is hidden, its children are also hidden, but when it is shown again, the children retain their own visibility states."
            },
            {
                "@name": "hide",
                "shortdesc": "Hides this element."
            },
            {
                "@name": "add",
                "shortdesc": "Adds a child element to this container.",
                "description": "Creates and returns a new control or container object and adds it to the children of this group.",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "type",
                            "shortdesc": "The type of the child element, as specified for the type property.",
                            "description": "Control types are listed in the JavaScript Tools Guide.",
                            "datatype": {
                                "type": "String"
                            }
                        },
                        {
                            "@name": "bounds",
                            "@optional": "true",
                            "shortdesc": "A bounds specification that describes the size and position of the new control or container, relative to its parent.",
                            "description": "If supplied, this value creates a new ;Bounds ;object which is assigned to the new object\u2019s bounds property.",
                            "datatype": {
                                "type": {
                                    "@href": "#\/Bounds",
                                    "@": "Bounds"
                                }
                            }
                        },
                        {
                            "@name": "text",
                            "@optional": "true",
                            "shortdesc": "The text or label, a localizable string.",
                            "description": "Initial text to be displayed in the control as the title, label, or contents, depending on the control type. If supplied, this value is assigned to the new object\u2019s text property.",
                            "datatype": {
                                "type": "String"
                            }
                        },
                        {
                            "@name": "properties",
                            "@optional": "true",
                            "shortdesc": "An object that contains one or more creation properties of the new child (properties used only when the element is created).",
                            "description": {
                                "br": "properties",
                                "@": "The creation properties depend on the element type. See  property of each control type."
                            },
                            "datatype": {
                                "type": "Object"
                            }
                        }
                    ]
                },
                "datatype": {
                    "type": "Object"
                }
            },
            {
                "@name": "remove",
                "shortdesc": "Removes the specified child control from this group's ;children ;array.",
                "description": "No error results if the child does not exist.",
                "parameters": {
                    "parameter": {
                        "@name": "what",
                        "shortdesc": "The child control to remove, specified by 0-based index, text property value, or as a control object.",
                        "datatype": {
                            "type": "Any"
                        }
                    }
                }
            },
            {
                "@name": "addEventListener",
                "shortdesc": "Registers an event handler for a particular type of event occuring in this element.",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "eventName",
                            "shortdesc": "The name of the event.",
                            "description": "Event names are listed in the JavaScript Tools Guide.",
                            "datatype": {
                                "type": "String"
                            }
                        },
                        {
                            "@name": "handler",
                            "shortdesc": "The function that handles the event.",
                            "description": "This can be the name of a function defined in the extension, or a locally defined handler function to be executed when the event occurs. A handler function takes one argument, the ;UIEvent ;object.",
                            "datatype": {
                                "type": {
                                    "@href": "$COMMON\/javascript.xml#\/Function",
                                    "@": "Function"
                                }
                            }
                        },
                        {
                            "@name": "capturePhase",
                            "shortdesc": "When true, the handler is called only in the capturing phase of the event propagation.",
                            "description": "Default is false, meaning that the handler is called in the bubbling phase if this object is an ancestor of the target, or in the at-target phase if this object is itself the target.",
                            "datatype": {
                                "type": "Boolean",
                                "value": "false"
                            }
                        }
                    ]
                },
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "removeEventListener",
                "shortdesc": "Unregisters an event handler for a particular type of event occuring in this element.",
                "description": "All arguments must be identical to those that were used to register the event handler.",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "eventName",
                            "shortdesc": "The name of the event.",
                            "datatype": {
                                "type": "String"
                            }
                        },
                        {
                            "@name": "handler",
                            "shortdesc": "The function that handles the event.",
                            "datatype": {
                                "type": {
                                    "@href": "$COMMON\/javascript.xml#\/Function",
                                    "@": "Function"
                                }
                            }
                        },
                        {
                            "@name": "capturePhase",
                            "shortdesc": "Whether to call the handler only in the capturing phase of the event propagation.",
                            "datatype": {
                                "type": "Boolean",
                                "value": "false"
                            }
                        }
                    ]
                },
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "dispatchEvent",
                "shortdesc": "Simulates the occurrence of an event in this target.",
                "description": "A script can create a ;UIEvent ;object for a specific event and pass it to this method to start the event propagation for the event.",
                "datatype": {
                    "type": {
                        "@href": "#\/Event",
                        "@": "Event"
                    }
                }
            }
        ]
    },
    "Panel": {
        "class": "Panel",
        "superClass": null,
        "shortdesc": "A container for other types of controls, with an optional frame.",
        "elementCount": 2,
        "propertyCount": 26,
        "methodCount": 7,
        "properties": [
            {
                "@name": "characters",
                "shortdesc": "Reserve space for the specified number of characters; affects calculation of ;preferredSize ;.",
                "datatype": {
                    "type": "Number",
                    "min": "0"
                }
            },
            {
                "@name": "justify",
                "shortdesc": "The default text justification style for child text elements.",
                "description": "One of left, center, or right. Justification only works if this value is set on creation of the element.",
                "datatype": {
                    "type": "String",
                    "value": "left"
                }
            },
            {
                "@name": "text",
                "shortdesc": "The title or label text, a localizable string.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "graphics",
                "@rwaccess": "readonly",
                "shortdesc": "The graphics object that can be used to customize the element's appearance, in response to the ;onDraw() ;event.",
                "datatype": {
                    "type": {
                        "@href": "#\/ScriptUIGraphics",
                        "@": "ScriptUIGraphics"
                    }
                }
            },
            {
                "@name": "visible",
                "shortdesc": "True if this element is shown, false if it is hidden.",
                "description": "When a container is hidden, its children are also hidden, but they retain their own visibility values, and are shown or hidden accordingly when the parent is next shown.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "bounds",
                "shortdesc": "The boundaries of the element, in parent-relative coordinates.",
                "description": "Setting an element's size or location changes its bounds property, and vice-versa.",
                "datatype": {
                    "type": {
                        "@href": "#\/Bounds",
                        "@": "Bounds"
                    }
                }
            },
            {
                "@name": "location",
                "shortdesc": "The upper left corner of this element's frame relative to its parent.",
                "description": "The location is defined as [bounds.x, bounds.y]. Setting an element's location changes its bounds property, and vice-versa.",
                "datatype": {
                    "type": {
                        "@href": "#\/Point",
                        "@": "Point"
                    }
                }
            },
            {
                "@name": "maximumSize",
                "shortdesc": "The maximum height and width to which the element can be resized.",
                "datatype": {
                    "type": {
                        "@href": "#\/Dimension",
                        "@": "Dimension"
                    }
                }
            },
            {
                "@name": "minimumSize",
                "shortdesc": "The minimum height and width to which the element can be resized.",
                "datatype": {
                    "type": {
                        "@href": "#\/Dimension",
                        "@": "Dimension"
                    }
                }
            },
            {
                "@name": "preferredSize",
                "shortdesc": "The preferred size, used by layout managers to determine the best size for each element.",
                "description": "If not explicitly set by a script, value is established by the UI framework in which ScriptUI is employed, and is based on such attributes of the element as its text, font, font size, icon size, and other UI framework-specific attributes.A script can explicitly set this value before the layout manager is invoked in order to establish an element size other than the default.",
                "datatype": {
                    "type": {
                        "@href": "#\/Dimension",
                        "@": "Dimension"
                    }
                }
            },
            {
                "@name": "size",
                "shortdesc": "The current dimensions of this element.",
                "description": "Initially undefined, and unless explicitly set by a script, it is defined by a ;LayoutManager ;. A script can explicitly set size before the layout manager is invoked to establish an element size other than the preferredSize or the default size, but this is not recommended. Defined as [bounds.width, bounds.height]. Setting an element's size changes its bounds property, and vice-versa.",
                "datatype": {
                    "type": {
                        "@href": "#\/Dimension",
                        "@": "Dimension"
                    }
                }
            },
            {
                "@name": "windowBounds",
                "@rwaccess": "readonly",
                "shortdesc": "The bounds of this element relative to the top-level parent window.",
                "datatype": {
                    "type": {
                        "@href": "#\/Bounds",
                        "@": "Bounds"
                    }
                }
            },
            {
                "@name": "alignChildren",
                "shortdesc": "Specifies how to align the child elements.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "children",
                "@rwaccess": "readonly",
                "shortdesc": "An array of child elements.",
                "datatype": {
                    "type": "Object",
                    "array": ""
                }
            },
            {
                "@name": "layout",
                "shortdesc": "The layout manager for this container.",
                "description": "The first time a container object is made visible, ScriptUI invokes this layout manager by calling its ;layout() ;function. Default is an instance of the ;LayoutManager ;class that is automatically created when the container element is created.",
                "datatype": {
                    "type": {
                        "@href": "#\/LayoutManager",
                        "@": "LayoutManager"
                    }
                }
            },
            {
                "@name": "margins",
                "shortdesc": "The number of pixels between the edges of a container and the outermost child elements.",
                "description": "You can specify different margins for each edge of the container. The default value is based on the type of container, and is chosen to match the standard Adobe UI guidelines.",
                "datatype": {
                    "type": "Number"
                }
            },
            {
                "@name": "orientation",
                "shortdesc": "The layout orientation of children in a container.",
                "description": "Interpreted by the layout manager for the container. The default ;LayoutManager ; Object accepts the (case-insensitive) values row, column, or stack.  For window and panel, the default is column, and for group the default is row. The allowed values for the container\u2019s alignChildren and its children\u2019s alignment properties depend on the orientation.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "spacing",
                "shortdesc": "The number of pixels separating one child element from its adjacent sibling element.",
                "description": "Because each container holds only a single row or column of children, only a single spacing value is needed for a container. The default value is based on the type of container, and is chosen to match standard Adobe UI guidelines.",
                "datatype": {
                    "type": "Number"
                }
            },
            {
                "@name": "alignment",
                "shortdesc": "The alignment style for this element. If defined, this value overrides the alignChildren setting for the parent container.",
                "description": {
                    "li": [
                        "For orientation=row:top, bottom, fill",
                        "For orientation=column: left, right, fill",
                        "For orientation=stack:top, bottom, left, right, fill"
                    ],
                    "@": "This can be a single string, which indicates the alignment for the orientation specified in the parent container, or an array of two strings, indicating both the horizontal and vertical alignment (in that order). Allowed values depend on the orientation value of the parent container. They are not case sensitive."
                },
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "properties",
                "shortdesc": "An object that contains one or more creation properties of the control (properties used only when the element is created).",
                "description": {
                    "li": [
                        "borderStyle: A string that specifies the appearance of the border drawn around the panel. One of black, etched, gray, raised, sunken. Default is etched.",
                        "su1PanelCoordinates: Photoshop only. When true, this panel automatically adjusts the positions of its children for compatability with Photoshop CS. Default is false, meaning that the panel does not adjust the positions of its children, even if the parent window has automatic adjustment enabled."
                    ],
                    "@": "Creation properties of a Panel object can include:"
                },
                "datatype": {
                    "type": "Object"
                }
            },
            {
                "@name": "enabled",
                "shortdesc": "True if this element is enabled.",
                "description": "An enabled element can accept input, according to its type. When false, control elements do not accept input, and all types of elements have a dimmed appearance.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "helpTip",
                "shortdesc": "The help text that is displayed when the mouse hovers over the element.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "indent",
                "shortdesc": "The number of pixels to indent the element during automatic layout.",
                "description": "Applies for column orientation and left alignment, or row orientation and top alignment.",
                "datatype": {
                    "type": "Number",
                    "min": "0"
                }
            },
            {
                "@name": "parent",
                "@rwaccess": "readonly",
                "shortdesc": "The parent element.",
                "datatype": {
                    "type": "Object"
                }
            },
            {
                "@name": "window",
                "@rwaccess": "readonly",
                "shortdesc": "The window that this element belongs to.",
                "datatype": {
                    "type": {
                        "@href": "#\/Window",
                        "@": "Window"
                    }
                }
            },
            {
                "@name": "type",
                "@rwaccess": "readonly",
                "shortdesc": "The element type; \"panel\".",
                "datatype": {
                    "type": "String"
                }
            }
        ],
        "methods": [
            {
                "@name": "show",
                "shortdesc": "Shows this element.",
                "description": "When a window or container is hidden, its children are also hidden, but when it is shown again, the children retain their own visibility states."
            },
            {
                "@name": "hide",
                "shortdesc": "Hides this element."
            },
            {
                "@name": "add",
                "shortdesc": "Adds a child element to this container.",
                "description": "Creates and returns a new control or container object and adds it to the children of this group.",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "type",
                            "shortdesc": "The type of the child element, as specified for the type property.",
                            "description": "Control types are listed in the JavaScript Tools Guide.",
                            "datatype": {
                                "type": "String"
                            }
                        },
                        {
                            "@name": "bounds",
                            "@optional": "true",
                            "shortdesc": "A bounds specification that describes the size and position of the new control or container, relative to its parent.",
                            "description": "If supplied, this value creates a new ;Bounds ;object which is assigned to the new object\u2019s bounds property.",
                            "datatype": {
                                "type": {
                                    "@href": "#\/Bounds",
                                    "@": "Bounds"
                                }
                            }
                        },
                        {
                            "@name": "text",
                            "@optional": "true",
                            "shortdesc": "The text or label, a localizable string.",
                            "description": "Initial text to be displayed in the control as the title, label, or contents, depending on the control type. If supplied, this value is assigned to the new object\u2019s text property.",
                            "datatype": {
                                "type": "String"
                            }
                        },
                        {
                            "@name": "properties",
                            "@optional": "true",
                            "shortdesc": "An object that contains one or more creation properties of the new child (properties used only when the element is created).",
                            "description": {
                                "br": "properties",
                                "@": "The creation properties depend on the element type. See  property of each control type."
                            },
                            "datatype": {
                                "type": "Object"
                            }
                        }
                    ]
                },
                "datatype": {
                    "type": "Object"
                }
            },
            {
                "@name": "remove",
                "shortdesc": "Removes the specified child control from this group's ;children ;array.",
                "description": "No error results if the child does not exist.",
                "parameters": {
                    "parameter": {
                        "@name": "what",
                        "shortdesc": "The child control to remove, specified by 0-based index, text property value, or as a control object.",
                        "datatype": {
                            "type": "Any"
                        }
                    }
                }
            },
            {
                "@name": "addEventListener",
                "shortdesc": "Registers an event handler for a particular type of event occuring in this element.",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "eventName",
                            "shortdesc": "The name of the event.",
                            "description": "Event names are listed in the JavaScript Tools Guide.",
                            "datatype": {
                                "type": "String"
                            }
                        },
                        {
                            "@name": "handler",
                            "shortdesc": "The function that handles the event.",
                            "description": "This can be the name of a function defined in the extension, or a locally defined handler function to be executed when the event occurs. A handler function takes one argument, the ;UIEvent ;object.",
                            "datatype": {
                                "type": {
                                    "@href": "$COMMON\/javascript.xml#\/Function",
                                    "@": "Function"
                                }
                            }
                        },
                        {
                            "@name": "capturePhase",
                            "shortdesc": "When true, the handler is called only in the capturing phase of the event propagation.",
                            "description": "Default is false, meaning that the handler is called in the bubbling phase if this object is an ancestor of the target, or in the at-target phase if this object is itself the target.",
                            "datatype": {
                                "type": "Boolean",
                                "value": "false"
                            }
                        }
                    ]
                },
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "removeEventListener",
                "shortdesc": "Unregisters an event handler for a particular type of event occuring in this element.",
                "description": "All arguments must be identical to those that were used to register the event handler.",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "eventName",
                            "shortdesc": "The name of the event.",
                            "datatype": {
                                "type": "String"
                            }
                        },
                        {
                            "@name": "handler",
                            "shortdesc": "The function that handles the event.",
                            "datatype": {
                                "type": {
                                    "@href": "$COMMON\/javascript.xml#\/Function",
                                    "@": "Function"
                                }
                            }
                        },
                        {
                            "@name": "capturePhase",
                            "shortdesc": "Whether to call the handler only in the capturing phase of the event propagation.",
                            "datatype": {
                                "type": "Boolean",
                                "value": "false"
                            }
                        }
                    ]
                },
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "dispatchEvent",
                "shortdesc": "Simulates the occurrence of an event in this target.",
                "description": "A script can create a ;UIEvent ;object for a specific event and pass it to this method to start the event propagation for the event.",
                "datatype": {
                    "type": {
                        "@href": "#\/Event",
                        "@": "Event"
                    }
                }
            }
        ]
    },
    "Point": {
        "class": "Point",
        "superClass": null,
        "shortdesc": "Defines the location of a window or UI element. Contains a 2-element array.",
        "elementCount": 1,
        "propertyCount": 5,
        "methodCount": 0,
        "properties": [
            {
                "@name": "x",
                "shortdesc": "The horizontal coordinate, a pixel offset from the origin of the element's coordinate space.",
                "datatype": {
                    "type": "Number"
                }
            },
            {
                "@name": "y",
                "shortdesc": "The vertical coordinate, a pixel offset from the origin of the element's coordinate space.",
                "datatype": {
                    "type": "Number"
                }
            },
            {
                "@name": "left",
                "shortdesc": "The left coordinate.",
                "datatype": {
                    "type": "Number"
                }
            },
            {
                "@name": "top",
                "shortdesc": "The top coordinate.",
                "datatype": {
                    "type": "Number"
                }
            },
            {
                "@name": "length",
                "@rwaccess": "readonly",
                "shortdesc": "The array length.",
                "datatype": {
                    "type": "Number",
                    "value": "2"
                }
            }
        ],
        "methods": []
    },
    "Dimension": {
        "class": "Dimension",
        "superClass": null,
        "shortdesc": "Defines the size of a window or UI element. Contains a 2-element array.",
        "elementCount": 1,
        "propertyCount": 3,
        "methodCount": 0,
        "properties": [
            {
                "@name": "width",
                "shortdesc": "The width in pixels.",
                "datatype": {
                    "type": "Number"
                }
            },
            {
                "@name": "height",
                "shortdesc": "The height in pixels.",
                "datatype": {
                    "type": "Number"
                }
            },
            {
                "@name": "length",
                "@rwaccess": "readonly",
                "shortdesc": "The array length.",
                "datatype": {
                    "type": "Number",
                    "value": "2"
                }
            }
        ],
        "methods": []
    },
    "Bounds": {
        "class": "Bounds",
        "superClass": null,
        "shortdesc": "Defines the boundaries of a window within the screen\u2019s coordinate space, or of a UI element within the container\u2019s coordinate space.",
        "elementCount": 1,
        "propertyCount": 9,
        "methodCount": 0,
        "properties": [
            {
                "@name": "x",
                "shortdesc": "The horizontal coordinate, a pixel offset from the origin of the element's coordinate space.",
                "datatype": {
                    "type": "Number"
                }
            },
            {
                "@name": "y",
                "shortdesc": "The vertical coordinate, a pixel offset from the origin of the element's coordinate space.",
                "datatype": {
                    "type": "Number"
                }
            },
            {
                "@name": "width",
                "shortdesc": "The width in pixels.",
                "datatype": {
                    "type": "Number"
                }
            },
            {
                "@name": "height",
                "shortdesc": "The height in pixels.",
                "datatype": {
                    "type": "Number"
                }
            },
            {
                "@name": "left",
                "shortdesc": "The horizontal coordinate, a pixel offset from the origin of the element's coordinate space.",
                "datatype": {
                    "type": "Number"
                }
            },
            {
                "@name": "right",
                "shortdesc": "The width in pixels.",
                "datatype": {
                    "type": "Number"
                }
            },
            {
                "@name": "top",
                "shortdesc": "The height in pixels.",
                "datatype": {
                    "type": "Number"
                }
            },
            {
                "@name": "bottom",
                "shortdesc": "The vertical coordinate, a pixel offset from the origin of the element's coordinate space.",
                "datatype": {
                    "type": "Number"
                }
            },
            {
                "@name": "length",
                "@rwaccess": "readonly",
                "shortdesc": "The array length.",
                "datatype": {
                    "type": "Number",
                    "value": "4"
                }
            }
        ],
        "methods": []
    },
    "UIEvent": {
        "class": "UIEvent",
        "superClass": null,
        "shortdesc": "Encapsulates input event information for an event that propagates through a container and control hierarchy.",
        "elementCount": 2,
        "propertyCount": 10,
        "methodCount": 4,
        "properties": [
            {
                "@name": "captures",
                "@rwaccess": "readonly",
                "shortdesc": "True if this event can be captured.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "bubbles",
                "@rwaccess": "readonly",
                "shortdesc": "True if the event is of a type that bubbles.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "cancelable",
                "@rwaccess": "readonly",
                "shortdesc": "True if the default action associated with the event can be canceled with preventDefault().",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "currentTarget",
                "@rwaccess": "readonly",
                "shortdesc": "The event target object which is currently handling the event. During capturing and bubbling, this is different from the property target.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "eventPhase",
                "@rwaccess": "readonly",
                "shortdesc": "The current phase of event propagation; one of none, target, capture, bubble.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "target",
                "@rwaccess": "readonly",
                "shortdesc": "The event target object for this event.",
                "datatype": {
                    "type": "Object"
                }
            },
            {
                "@name": "timeStamp",
                "@rwaccess": "readonly",
                "shortdesc": "The date and time at which the event occurred.",
                "datatype": {
                    "type": {
                        "@href": "$COMMON\/javascript.xml#\/Date",
                        "@": "Date"
                    }
                }
            },
            {
                "@name": "type",
                "@rwaccess": "readonly",
                "shortdesc": "The name of the event that this  object represents.",
                "description": "Event types are listed in the JavaScript Tools Guide.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "view",
                "@rwaccess": "readonly",
                "shortdesc": "The ScriptUI element that this event relates to.",
                "datatype": {
                    "type": "Any"
                }
            },
            {
                "@name": "detail",
                "@rwaccess": "readonly",
                "shortdesc": "The click count for a mouse-click event.",
                "datatype": {
                    "type": "Any"
                }
            }
        ],
        "methods": [
            {
                "@name": "preventDefault",
                "shortdesc": "Prevents the default action associated with this event from being called."
            },
            {
                "@name": "stopPropagation",
                "shortdesc": "Stops the propagation of this event."
            },
            {
                "@name": "initEvent",
                "shortdesc": "Initializes a UI event as a core W3C event.",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "type",
                            "shortdesc": "The event type.",
                            "datatype": {
                                "type": "String"
                            }
                        },
                        {
                            "@name": "captures",
                            "shortdesc": "Set to true if this event can be captured.",
                            "datatype": {
                                "type": "Boolean",
                                "value": "false"
                            }
                        },
                        {
                            "@name": "bubbles",
                            "shortdesc": "Set to true if the event bubbles.",
                            "datatype": {
                                "type": "Boolean",
                                "value": "false"
                            }
                        },
                        {
                            "@name": "cancelable",
                            "shortdesc": "Set to true if the default action is cancelable.",
                            "datatype": {
                                "type": "Boolean",
                                "value": "false"
                            }
                        }
                    ]
                }
            },
            {
                "@name": "initUIEvent",
                "shortdesc": "Initializes an event.",
                "parameters": {
                    "parameter": [
                        {
                            "@name": "type",
                            "shortdesc": "The event type.",
                            "datatype": {
                                "type": "String"
                            }
                        },
                        {
                            "@name": "captures",
                            "shortdesc": "Set to true if this event can be captured.",
                            "datatype": {
                                "type": "Boolean",
                                "value": "false"
                            }
                        },
                        {
                            "@name": "bubbles",
                            "shortdesc": "Set to true if the event bubbles.",
                            "datatype": {
                                "type": "Boolean",
                                "value": "false"
                            }
                        },
                        {
                            "@name": "view",
                            "@optional": "true",
                            "shortdesc": "The ScriptUI element that this event relates to.",
                            "datatype": {
                                "type": "Object"
                            }
                        },
                        {
                            "@name": "detail",
                            "@optional": "true",
                            "shortdesc": "The click count for a mouse-click event.",
                            "datatype": {
                                "type": "Number"
                            }
                        }
                    ]
                }
            }
        ]
    },
    "Event": {
        "class": "Event",
        "superClass": null,
        "shortdesc": "Base class for UIEvent.",
        "elementCount": 2,
        "propertyCount": 12,
        "methodCount": 2,
        "properties": [
            {
                "@name": "NOT_DISPATCHING",
                "@rwaccess": "readonly",
                "datatype": {
                    "type": "any"
                }
            },
            {
                "@name": "CAPTURING_PHASE",
                "@rwaccess": "readonly",
                "datatype": {
                    "type": "any"
                }
            },
            {
                "@name": "AT_TARGET",
                "@rwaccess": "readonly",
                "datatype": {
                    "type": "any"
                }
            },
            {
                "@name": "BUBBLING_PHASE",
                "@rwaccess": "readonly",
                "datatype": {
                    "type": "any"
                }
            },
            {
                "@name": "captures",
                "@rwaccess": "readonly",
                "shortdesc": "True if this event can be captured.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "bubbles",
                "@rwaccess": "readonly",
                "shortdesc": "True if the event is of a type that bubbles.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "cancelable",
                "@rwaccess": "readonly",
                "shortdesc": "True if the default action associated with the event can be canceled with preventDefault().",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "currentTarget",
                "@rwaccess": "readonly",
                "shortdesc": "The event target object which is currently handling the event. During capturing and bubbling, this is different from the property target.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "eventPhase",
                "@rwaccess": "readonly",
                "shortdesc": "The current phase of event propagation; one of none, target, capture, bubble.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "target",
                "@rwaccess": "readonly",
                "shortdesc": "The event target object for this event.",
                "datatype": {
                    "type": "Object"
                }
            },
            {
                "@name": "timeStamp",
                "@rwaccess": "readonly",
                "shortdesc": "The date and time at which the event occurred.",
                "datatype": {
                    "type": {
                        "@href": "$COMMON\/javascript.xml#\/Date",
                        "@": "Date"
                    }
                }
            },
            {
                "@name": "type",
                "@rwaccess": "readonly",
                "shortdesc": "The name of the event that this object represents.",
                "description": "Event types are listed in the JavaScript Tools Guide.",
                "datatype": {
                    "type": "String"
                }
            }
        ],
        "methods": [
            {
                "@name": "preventDefault",
                "shortdesc": "Prevents the default action associated with this event from being called."
            },
            {
                "@name": "stopPropagation",
                "shortdesc": "Stops the propagation of this event."
            }
        ]
    },
    "Environment": {
        "class": "Environment",
        "superClass": null,
        "shortdesc": "Defines attributes of the ScriptUI environment.",
        "elementCount": 1,
        "propertyCount": 1,
        "methodCount": 0,
        "properties": [
            {
                "@name": "keyboardState",
                "@rwaccess": "readonly",
                "shortdesc": "An object that reports the active state of the keyboard at any time.",
                "description": "Provides access to the key state independent of the event-handling framework.",
                "datatype": {
                    "type": {
                        "@href": "#\/KeyboardState",
                        "@": "KeyboardState"
                    }
                }
            }
        ],
        "methods": []
    },
    "Events": {
        "class": "Events",
        "superClass": null,
        "shortdesc": "Provides access to objects used in the ScriptUI event system.",
        "elementCount": 1,
        "propertyCount": 0,
        "methodCount": 1,
        "properties": [],
        "methods": [
            {
                "@name": "createEvent",
                "shortdesc": "Creates an instance of the specified ;Event ;subclass.",
                "description": "The ;Event ;returned is a ;UIEvent,\n            KeyboardEvent ;or ;MouseEvent ;object,\n            depending on the requested type. This object can be passed as a parameter to an element's dispatchEvent\n            function in order to simulate a user-interaction event.",
                "parameters": {
                    "parameter": {
                        "@name": "eventType",
                        "shortdesc": "The name of an event type: one of \"UIEvent\", \"KeyboardEvent\", or \"MouseEvent\".",
                        "datatype": {
                            "type": "String"
                        }
                    }
                },
                "datatype": {
                    "type": {
                        "@href": "#\/Event",
                        "@": "Event"
                    }
                }
            }
        ]
    },
    "KeyboardState": {
        "class": "KeyboardState",
        "superClass": null,
        "shortdesc": "Reports the active state of the keyboard.",
        "elementCount": 1,
        "propertyCount": 5,
        "methodCount": 0,
        "properties": [
            {
                "@name": "keyName",
                "@rwaccess": "readonly",
                "shortdesc": "A string containing the name of the currently pressed key, such as \"a\", or an empty string.",
                "datatype": {
                    "type": "String"
                }
            },
            {
                "@name": "shiftKey",
                "@rwaccess": "readonly",
                "shortdesc": "True if the Shift key is pressed.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "ctrlKey",
                "@rwaccess": "readonly",
                "shortdesc": "True if the Ctrl key is pressed.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "altKey",
                "@rwaccess": "readonly",
                "shortdesc": "True if the Alt or Option key is pressed.",
                "datatype": {
                    "type": "Boolean"
                }
            },
            {
                "@name": "metaKey",
                "@rwaccess": "readonly",
                "shortdesc": "True if the Cmd key (in Mac OS) or Windows key (in Windows) is pressed.",
                "datatype": {
                    "type": "Boolean"
                }
            }
        ],
        "methods": []
    }
}